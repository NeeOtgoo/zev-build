{"version":3,"file":"static/js/5772.369a3d76.chunk.js","mappings":"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","sources":["components/shared-components/Flex/index.js","graphql/create.js","graphql/delete.js","views/app-views/programs/form.js","views/app-views/programs/table.js","views/app-views/programs/index.js"],"sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\n\nconst Flex = props => {\n\tconst { children, className, alignItems, justifyContent, mobileFlex, flexDirection } = props\n\tconst getFlexResponsive = () => mobileFlex ? 'd-flex' : 'd-md-flex'\n\treturn (\n\t\t<div className={`${getFlexResponsive()} ${className} ${flexDirection?('flex-' + flexDirection): ''} ${alignItems?('align-items-' + alignItems):''} ${justifyContent?('justify-content-' + justifyContent):''}` }>\n\t\t\t{children}\n\t\t</div>\n\t)\n}\n\nFlex.propTypes = {\n\tclassName: PropTypes.string,\n\talignItems: PropTypes.string,\n\tflexDirection: PropTypes.string,\n\tjustifyContent: PropTypes.string,\n\tmobileFlex: PropTypes.bool\n}\n\nFlex.defaultProps = {\n\tmobileFlex: true,\n\tflexDirection: 'row',\n\tclassName: ''\n};\n\n\nexport default Flex\n","import { gql } from '@apollo/client';\n\nexport const CREATE_SCHOOL = gql`\n    mutation createSchool($name: String, $nameMgl: String) {\n      createSchool(name: $name, nameMgl: $nameMgl) {\n        school {\n          id\n          name\n          nameMgl\n        }\n      }\n    }\n`;\n\nexport const CREATE_SUB_SCHOOL = gql`\n    mutation createSubSchool($name: String, $nameMgl: String, $school: Int!){\n      createSubSchool(name: $name, nameMgl: $nameMgl, school: $school) {\n        subSchool {\n          id\n          name\n          nameMgl \n          school {\n            id\n          }\n        }\n      }\n    }\n`;\n\nexport const REGISTER = gql`\n    mutation register($email: String!, $username: String!, $isTeacher: Boolean!, $isStudent: Boolean!, $password1: String!, $password2: String!){\n      register(email: $email, username: $username, isTeacher: $isTeacher, isStudent: $isStudent, password1: $password1, password2: $password2) {\n          success\n          errors\n          token\n      } \n    }\n\n`;\n\nexport const CREATE_TEACHER = gql`\n    mutation createTeacher($address: String, $birthCity: Int, $birthDistrict: Int, $birthdate: String, $degree: Int,\n                            $familyName: String, $joinBefore: String, $joinDate: String, $name: String, $phone: String, $phone2: String,\n                            $registerNo: String, $school: Int, $sex: String, $status: Int, $subSchool: Int, $teacherCode: String!,\n                            $username: String!, $password: String!, $email: String!, $access: String!\n                            # $user: Int\n                            ) {\n      createTeacher(address: $address, birthCity: $birthCity, birthDistrict: $birthDistrict, birthdate: $birthdate, degree: $degree,\n                             familyName: $familyName, joinBefore: $joinBefore, joinDate: $joinDate, name: $name, phone: $phone, phone2: $phone2, \n                            registerNo: $registerNo, school: $school, sex: $sex, status: $status, subSchool: $subSchool, \n                            teacherCode: $teacherCode, access: $access,\n                            username: $username, password: $password, email: $email\n                            # user: $user \n                            ) {\n        teacher {\n          id\n        }\n      }\n    }\n`;\n\nexport const CREATE_EMPLOYEE = gql`\n    mutation createEmployee(\n                $address: String\n                $birthCity: Int\n                $birthDistrict: Int\n                $birthdate: String\n                $email: String!\n                $employeeCode: String!\n                $familyName: String\n                $group: Int\n                $name: String\n                $password: String!\n                $phone: String\n                $phone2: String\n                $photo: Upload\n                $registerNo: String\n                $sex: String\n                $status: Int\n                $compartment: Int\n                $username: String!\n              ) {\n      createEmployee(\n                address: $address\n                birthCity: $birthCity\n                birthDistrict: $birthDistrict\n                birthdate: $birthdate\n                email: $email\n                employeeCode: $employeeCode\n                familyName: $familyName\n                group: $group\n                name: $name\n                password: $password\n                phone: $phone\n                phone2: $phone2\n                photo: $photo\n                compartment: $compartment\n                registerNo: $registerNo\n                sex: $sex\n                status: $status\n                username: $username\n          ) {\n          employee {\n          id\n        }\n      }\n    }\n`;\n\nexport const CREATE_STUDENT = gql`\n    mutation createStudent(\n      $activity: Int\n      $address: String\n      $allergies: String\n      $birthCity: Int\n      $birthDistrict: Int\n      $birthdate: String\n      $bloodType: String\n      $bodyIndex: String\n      $classes: Int\n      $classtime: Int\n      $drug: String\n      $etc: String\n      $familyName: String\n      $joinDate: String\n      $joinSchoolyear: String\n      $name: String\n      $nationality: String\n      $phone: String\n      $program: Int\n      $registerNo: String\n      $religion: String\n      $school: Int\n      $section: Int\n      $sex: String\n      $state: String\n      $status: Int\n      $statusExtra: Int\n      $surname: String\n      $underlyingDisease: String\n      $vaccine: String\n    ) {\n      createStudent(\n        activity: $activity\n        address: $address\n        allergies: $allergies\n        birthCity: $birthCity\n        birthDistrict: $birthDistrict\n        birthdate: $birthdate\n        bloodType: $bloodType\n        bodyIndex: $bodyIndex\n        classes: $classes\n        classtime: $classtime\n        drug: $drug\n        email: \"dummy@dummy.com\"\n        etc: $etc\n        familyName: $familyName\n        joinDate: $joinDate\n        joinSchoolyear: $joinSchoolyear\n        name: $name\n        nationality: $nationality\n        phone: $phone\n        program: $program\n        registerNo: $registerNo\n        religion: $religion\n        school: $school\n        section: $section\n        sex: $sex\n        state: $state\n        status: $status\n        statusExtra: $statusExtra\n        surname: $surname\n        underlyingDisease: $underlyingDisease\n        vaccine: $vaccine\n      ) {\n        student {\n          id\n        }\n      }\n    }\n`;\n\nexport const CREATE_SECTION = gql`\n  mutation createSection($classes: Int, $maxStudentNum: Int, $program: Int, $teacher: Int,  $school: Int, $section: String, $subSchool: Int) {\n    createSection(classes: $classes, program: $program, school: $school, section: $section, subSchool: $subSchool, maxStudentNum: $maxStudentNum, teacher: $teacher) {\n      section {\n        section\n      }\n    }\n  }\n`\nexport const CREATE_CLASSES = gql`\n  mutation createClasses($activity: Int, $classes: String,\n                          $program: Int, $school: Int, $status: String, $subSchool: Int) {\n    createClasses(activity: $activity, classes: $classes,\n                  program: $program, school: $school, status: $status, subSchool: $subSchool) {\n      classes {\n        classes\n      }\n    }\n  }\n`\nexport const CREATE_PROGRAM = gql`\n    mutation createProgram($program: String, $programMgl: String,  \n                           $status: String, $maxStudentNum: Int, $school: Int, $subSchool: Int) {\n      createProgram(program: $program, programMgl: $programMgl,  \n                    status: $status, maxStudentNum: $maxStudentNum, school: $school, subSchool: $subSchool) {\n        program {\n          id\n        }\n      }\n    }\n`;\n\nexport const CREATE_SUBJECT = gql`\n  mutation createSubject($credit: String, $subject: String, $content: String, $school: Int, $subSchool: Int) {\n    createSubject(credit: $credit, subject: $subject, school: $school, content: $content, subSchool: $subSchool) {\n      subject {\n        credit\n      }\n    }\n  }\n`\nexport const CREATE_PROGRAM_SUBJECT = gql`\n  mutation createProgramSubject($program: Int, $subject: Int) {\n    createProgramSubject(program: $program, subject: $subject) {\n      programSubjectType {\n        id\n      }\n    }\n  }\n`;\n\nexport const CREATE_ROUTINE_STUDENT = gql`\n  mutation createRoutineStudent ($routine: Int, $studentCode: String, $section: Int) {\n    createRoutineStudent (routine: $routine, studentCode: $studentCode, section: $section) {\n      routineStudent {\n        id\n      }\n    }\n  }\n`\n\nexport const CREATE_PARENT = gql`\n    mutation createParent ($address: String, $familyName: String, $name: String, $phone: String, $profession: String, $student: Int) {\n        createParent (address: $address, familyName: $familyName, name: $name, phone: $phone, profession: $profession, student: $student) {\n            parent {\n                name\n            }\n        }\n    }\n`;\n\nexport const CREATE_EVENT_TYPE = gql`\n    mutation createEventType ($color: String, $name: String) {\n        createEventType (color: $color, name: $name) {\n            eventType {\n                name\n            }\n        }\n    }\n`;\n\nexport const CREATE_EVENT = gql`\n    mutation createEvent ($content: String, $description: String, $endAt: String, $eventType: Int, $startAt: String, $title: String) {\n        createEvent (content: $content, description: $description, endAt: $endAt, eventType: $eventType, startAt: $startAt, title: $title) {\n            event {\n                title\n            }\n        }\n    }\n`;","import { gql } from '@apollo/client'\n\nexport const DELETE_CITY = gql `\n    mutation deleteCity($id: ID!){\n        deleteCity(id: $id){\n            city{\n              name\n              code\n            }\n        }\n    }\n`\n\nexport const DELETE_USER = gql `\n    mutation deleteAccount($username: String) {\n        deleteAccount(username: $username) {\n            account {\n                username\n            }\n        }\n    }\n`\n\nexport const DELETE_TEACHER = gql `\n    mutation deleteTeacher($id: ID!){\n      deleteTeacher(id: $id){\n            teacher{\n              name\n            }\n        }\n    }\n`;\n\nexport const DELETE_EMPLOYEES = gql `\n  mutation deleteEmployee($id: ID){\n    deleteEmployee(id: $id){\n      employee{\n        name\n      }\n    }\n  }\n  `;\n\nexport const DELETE_SUBJECT = gql `\n  mutation deleteSubject ($id: ID) {\n    deleteSubject (id: $id) {\n      subject {\n        credit\n      }\n    }\n  }\n`\n\nexport const DELETE_STUDENT = gql `\n    mutation deleteStudent($id: ID!){\n      deleteStudent(id: $id){\n            student{\n              surname\n            }\n        }\n    }\n`\n\nexport const DELETE_SUB_SCHOOL = gql `\n  mutation deleteSubSchool($id: ID){\n    deleteSubSchool(id: $id){\n      subSchool{\n        name\n      }\n    }\n}\n`\n\nexport const DELETE_SCHOOL = gql `\n  mutation deleteSchool($id: ID!){\n    deleteSchool(id: $id){\n      school{\n        name\n      }\n    }\n}\n`\n\nexport const DELETE_SECTION = gql `\n  mutation deleteSection($id: ID){\n    deleteSection(id: $id){\n      section{\n        section\n      }\n    }\n}\n`\n\nexport const DELETE_CLASS = gql `\n  mutation deleteClasses($id: ID!){\n    deleteClasses(id: $id){\n      classes{\n        classes\n      }\n    }\n}\n`\n\nexport const DELETE_PROGRAM = gql `\n    mutation deleteProgram($id: ID!){\n        deleteProgram(id: $id){\n            program{\n                program\n            }\n        }\n    }\n`;\n\nexport const DELETE_ROUTINE = gql `\n    mutation deleteRoutine ($id: ID) {\n        deleteRoutine (id: $id) {\n            routine {\n                createdAt\n            }\n        }\n    }\n`;\n\nexport const DELETE_PARENT = gql `\n    mutation deleteParent ($id: ID) {\n        deleteParent (id: $id) {\n            parent {\n                name\n            }\n        }\n    }\n`;\n\nexport const DELETE_EVENT_TYPE = gql `\n    mutation deleteEventType ($id: ID) {\n        deleteEventType (id: $id) {\n            eventType {\n                name\n            }\n        }\n    }\n`;\n\nexport const DELETE_EVENT = gql`\n    mutation deleteEvent ($id: ID) {\n        deleteEvent (id: $id) {\n            event {\n                title\n            }\n        }\n    }\n`;\n","import React, { useState, useEffect } from 'react';\nimport { Form, Input, message, Spin, Select, InputNumber } from 'antd';\nimport { useMutation, useQuery } from '@apollo/client';\nimport { ALL_PROGRAMS, ALL_SCHOOLS, ALL_SUB_SCHOOLS} from 'graphql/all'\nimport { CREATE_PROGRAM } from 'graphql/create'\nimport { UPDATE_PROGRAM } from 'graphql/update'\nimport IntlMessage from 'components/util-components/IntlMessage';\n\nconst { Option } = Select;\n\nfunction ProgramForm ({formType, editData, setIsModalVisible}) {\n\n    const [form] = Form.useForm();\n\n    const [createSchool, { loading }] = useMutation(CREATE_PROGRAM, {\n        refetchQueries: [ALL_PROGRAMS,\n\t\t\t'allPrograms'\n\t\t],\n\t\tonCompleted: data => {\n            message.success('Амжилттай хадгаллаа');\n            setIsModalVisible(false);\n\t\t}\n\t});\n\n    const [updateProgram, { loading: updateLoading }] = useMutation(UPDATE_PROGRAM, {\n        refetchQueries: [ALL_PROGRAMS, \n            'allPrograms'\n        ],\n        onCompleted: data => {\n            message.success('Амжилттай хадгаллаа');\n            setIsModalVisible(false);\n        }\n    })\n\n    const { data: schoolsData } = useQuery(ALL_SCHOOLS, {\n    });\n\n    const { data: subSchoolsData, loading: subSchoolsLoading } = useQuery(ALL_SUB_SCHOOLS, {\n    });\n\n    const [subSchoolList, setSubSchoolList] = useState(undefined);\n\n    useEffect(() => {\n        if(subSchoolsLoading === false && subSchoolsData){\n            setSubSchoolList(subSchoolsData.allSubSchools);\n        }\n    }, [subSchoolList, subSchoolsData, subSchoolsLoading])\n\n    \n\n    useEffect(() => {\n        if(formType === \"edit\") {\n            const newData = {\n\t\t\t\tprogram: editData.program,\n\t\t\t\tprogramMgl: editData.programMgl,\n\t\t\t\tmaxStudentNum: editData.maxStudentNum,\n\t\t\t\tschool: editData.school.id,\n\t\t\t\tsubSchool: editData.subSchool.id,\n\t\t\t\tstatus: editData.status,\n\t\t\t\tkey: editData.id,\n\t\t\t}\n            form.setFieldsValue(newData);\n            setSelected(form.getFieldValue('school'));\n        } else if(formType === \"create\") {\n            form.resetFields();\n        }\n    }, [editData, form, formType]);\n\n    const onFinish = values => {\n        if (formType === \"edit\") {\n            values.id = editData.id;\n            updateProgram({ variables: values });\n        } else {\n            createSchool({ variables: values });\n        }\n    };\n\n    const [selected, setSelected] = useState(\"\");\n\n    const onSchoolChange = (value) => {\n        setSelected(value);\n    };\n    \n    let type = null;\n    \n    let options = null;\n    \n    if (selected) {\n        type = selected;\n    }\n    \n    if (type) {\n        options = subSchoolList?.filter(Subschool => Subschool.school.id === type).map(filteredSubSchool => (\n            <Option key={filteredSubSchool.id} value={filteredSubSchool.id}>{filteredSubSchool.name}</Option>\n        ))\n    }\n\n    return (\n        <Spin spinning={loading || updateLoading} tip=\"Ачааллаж байна...\">\n            <Form  \n                id=\"ProgramForm\"\n                                layout={'vertical'}\n                form={form}\n                name=\"control-hooks\" \n                onFinish={onFinish}\n            >\n                <Form.Item name=\"program\" label={<IntlMessage id=\"name\" />} rules={[\n                    {\n                        required: true,\n                        message: <IntlMessage id=\"form.required\" />\n                    },\n                ]}>\n                    <Input />\n                </Form.Item>\n                <Form.Item name=\"programMgl\" label={<IntlMessage id=\"nameMgl\" />} rules={[\n                    {\n                        required: true,\n                        message: <IntlMessage id=\"form.required\" />\n                    },\n                ]}>\n                    <Input />\n                </Form.Item>\n                <Form.Item name=\"school\" label={<IntlMessage id=\"school\" />} rules={[\n                    {\n                        required: true,\n                        message: <IntlMessage id=\"form.required\" />\n                    },\n                ]}>\n                    <Select\n                        onChange={onSchoolChange}\n                    >\n                     {schoolsData?.allSchools.map((school, index) => (  \n                        <Option key={index} value={school.id}>{school.name}</Option>\n                    ))}\n                    </Select>\n                </Form.Item>\n                <Form.Item name=\"subSchool\" label={<IntlMessage id=\"sub-school\" />} rules={[\n                    {\n                        required: true,\n                        message: <IntlMessage id=\"form.required\" />\n                    },\n                ]}>\n                    <Select\n                        placeholder=\"Тэнхим сонгох\"\n                    >\n                        {options}\n                    </Select>\n                </Form.Item>\n                <Form.Item name=\"maxStudentNum\" label={<IntlMessage id=\"maxStudentNum\" />} rules={[\n                    {\n                        required: true,\n                        message: <IntlMessage id=\"form.required\" />\n                    },\n                ]}>\n                    <InputNumber/>\n                </Form.Item>\n                <Form.Item name=\"status\" label={<IntlMessage id=\"status\" />} rules={[\n                    {\n                        required: true,\n                        message: <IntlMessage id=\"form.required\" />\n                    },\n                ]}>\n                    <Select\n                        placeholder={<IntlMessage id=\"status\" />}\n                    >\n                     <Option key=\"1\" value=\"OPEN\">Нээлттэй</Option>\n                     <Option key=\"2\" value=\"CLOSED\">Хаалттай</Option>\n                    </Select>\n                </Form.Item>\n            </Form>\n        </Spin>\n    );\n};\n\nexport default ProgramForm","import React, { useState, useEffect } from 'react'\nimport { Card, Table, Input, Spin, Modal, message, Button } from 'antd';\nimport { DeleteTwoTone, SearchOutlined, EditTwoTone, PlusCircleOutlined, EyeTwoTone } from '@ant-design/icons';\nimport { useHistory } from 'react-router-dom';\nimport Flex from 'components/shared-components/Flex'\nimport utils from 'utils';\nimport ProgramForm from './form';\nimport { useQuery, useMutation } from '@apollo/client';\nimport { ALL_PROGRAMS } from 'graphql/all';\nimport IntlMessage from 'components/util-components/IntlMessage';\nimport { DELETE_PROGRAM } from 'graphql/delete';\nimport { APP_PREFIX_PATH } from 'configs/AppConfig';\n\nfunction  ProgramsTable (props) {\n\n\tconst { loading, data: dataPrograms } = useQuery(ALL_PROGRAMS, {\n\t});\n\tconst history = useHistory();\n    \n\tconst [list, setList] = useState(undefined)\n    const [reFill, setReFill] = useState(true)\n\tconst [tableLoading, setTableLoading] = useState(true);\n\n    useEffect(() => {\n\t\tfunction fillList () {\n            setList(dataPrograms.allPrograms);\n\t\t\tsetReFill(false);\n\t\t\tsetTableLoading(false);\n\t\t}\n        if(loading === false && dataPrograms){\n\t\t\tfillList()\n        }\n    }, [loading, dataPrograms, reFill])\n\n\tconst [isModalVisible, setIsModalVisible] = useState(false);\n\tconst [editData, setEditData] = useState([]);\n\tconst [formType, setFormType] = useState(\"\");\n\n    const showModal = () => {\n\t\tsetFormType(\"create\");\n      \tsetIsModalVisible(true);\n    };\n\n    const handleCancel = () => {\n      \tsetIsModalVisible(false);\n    };\n\n\tconst editRow = row => {\n\t\tsetFormType(\"edit\");\n\t\tsetEditData(row);\n\t\tsetIsModalVisible(true);\n\t};\n\n\tconst { confirm } = Modal;\n\n\tvar nf = Intl.NumberFormat();\n\n\tconst [deleteProgram] = useMutation(DELETE_PROGRAM, {\n\t\trefetchQueries: [ALL_PROGRAMS,\n\t\t\t'allPrograms'\n\t\t],\n\t\tonCompleted: data => {\n            message.success('Амжилттай устлаа');\n\t\t}\n\t});\n\n\tfunction deleteRow(row) {\n\t\tconfirm({\n\t\t  title: 'Устгах уу?',\n\t\t  okText: 'Устгах',\n\t\t  okType: 'danger',\n\t\t  cancelText: 'Болих',\n\t\t  onOk() {\n\t\t\tdeleteProgram({ variables: { id: row.id } }); \n\t\t  },\n\t\t});\n\t}\n\n\tconst showRow = (row) => {\n\t\thistory.push(`${APP_PREFIX_PATH}/programs/${row.id}`);\n\t}\n\n\tconst tableColumns = [\n\t\t{\n\t\t\tkey: 'program',\n\t\t\ttitle: <IntlMessage id=\"name\" />,\n\t\t\tdataIndex: 'program',\n\t\t\tsorter: (a, b) => utils.antdTableSorter(a, b, 'program')\n\t\t},\n\t\t{\n\t\t\tkey: 'programMgl',\n            title: <IntlMessage id=\"nameMgl\" />,\n            dataIndex: 'programMgl', \n\t\t\tsorter: (a, b) => utils.antdTableSorter(a, b, 'programMgl')\n\t\t},\n\t\t{\n\t\t\tkey: 'school',\n\t\t\ttitle: <IntlMessage id=\"school\" />,\n\t\t\tdataIndex: ['school', 'name'],\n\t\t\tsorter: (a, b) => utils.antdTableSorter(a, b, 'school')\n\t\t},\n\t\t{\n\t\t\tkey: 'subSchool',\n\t\t\ttitle: <IntlMessage id=\"sub-school\" />,\n\t\t\tdataIndex: ['subSchool', 'name'],\n\t\t\tsorter: (a, b) => utils.antdTableSorter(a, b, 'subSchool')\n\t\t},\n\t\t{\n\t\t\tkey: 'maxStudentNum',\n\t\t\ttitle: <IntlMessage id=\"maxStudentNum\" />,\n\t\t\tdataIndex: 'maxStudentNum',\n\t\t\tsorter: (a, b) => utils.antdTableSorter(a, b, 'maxStudentNum'),\n\t\t\trender: text => <span>{nf.format(text)}</span>\n\t\t}\n\t];\n\n\tif (props.permissions.edit === true || props.permissions.destroy === true) {\n\t\ttableColumns.push(\n\t\t\t{\n\t\t\t\tkey: 'actions',\n\t\t\t\ttitle: <IntlMessage id=\"main.action\" />,\n\t\t\t\tdataIndex: 'actions',\n\t\t\t\twidth: '20vw',\n\t\t\t\trender: (_, elm) => (\n\t\t\t\t\t<div className=\"text-center\">\n\t\t\t\t\t\t<Button size=\"small\" onClick={() => showRow(elm)} type=\"text\" icon={<EyeTwoTone/>} > <IntlMessage id=\"show1\" /></Button>\n\t\t\t\t\t\t{ props.permissions.edit === true &&\n\t\t\t\t\t\t\t<Button size=\"small\" onClick={() => editRow(elm)} type=\"text\" icon={<EditTwoTone twoToneColor=\"#ffdb00\"/>} > <IntlMessage id=\"edit\" /></Button>\n\t\t\t\t\t\t}\n\t\t\t\t\t\t{ props.permissions.destroy === true &&\n\t\t\t\t\t\t\t<Button size=\"small\" onClick={() => deleteRow(elm)} type=\"text\" icon={<DeleteTwoTone twoToneColor=\"#f42f2f\"/>} > <IntlMessage id=\"delete\" /> </Button>\n\t\t\t\t\t\t}\n\t\t\t\t\t</div>\n\t\t\t\t)\n\t\t\t}\n\t\t)\n\t}\n\n\tconst onSearch = e => {\n\t\tconst value = e.currentTarget.value\n\t\tif (!value) {\n\t\t\tsetReFill(true)\n\t\t}\n\t\tconst searchArray = list\n\t\tconst data = utils.wildCardSearch(searchArray, value)\n\t\tsetList(data)\n\t}\n\n\treturn (\n\t\t<>\n\t\t\t<Modal \n                title={formType === 'edit' ? <IntlMessage id=\"edit\" /> : <IntlMessage id=\"add_new3\" /> } \n                visible={isModalVisible} \n\t\t\t\tokText={<IntlMessage id=\"main.okText\" />}\n\t\t\t\tcancelText={<IntlMessage id=\"main.cancelText\" />}\n\t\t\t\tonCancel={handleCancel}\n\t\t\t\tokButtonProps={{form:'ProgramForm', key: 'submit', htmlType: 'submit'}}\n            >\n                <ProgramForm \n\t\t\t\t\tsetTableLoading={setTableLoading} \n\t\t\t\t\tsetReFill={setReFill} \n\t\t\t\t\tformType={formType} \n\t\t\t\t\teditData={editData} \n\t\t\t\t\tsetIsModalVisible={setIsModalVisible} \n\t\t\t\t/>\n            </Modal>\n\t\t\t<Card>\n\t\t\t\t<Flex alignItems=\"center\" justifyContent=\"between\" mobileFlex={false}>\n\t\t\t\t\t<Flex className=\"mb-1\" mobileFlex={false}>\n\t\t\t\t\t\t<div className=\"mr-md-3 mb-3\">\n\t\t\t\t\t\t\t<Input placeholder={\"Хайх\"} prefix={<SearchOutlined />} onChange={e => onSearch(e)}/>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</Flex>\n\t\t\t\t\t{ props.permissions.create === true &&\n\t\t\t\t\t\t<div className=\"mr-md-3 mb-3\">\n\t\t\t\t\t\t\t<Button onClick={showModal} type=\"primary\" icon={<PlusCircleOutlined />} block> <IntlMessage id=\"add_new\" /></Button>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t}\n\t\t\t\t</Flex>\n\t\t\t\t<div className=\"table-responsive\">\n\t\t\t\t\t<Spin spinning={tableLoading}>\n\t\t\t\t\t\t<Table \n\t\t\t\t\t\t\tcolumns={tableColumns} \n\t\t\t\t\t\t\tsize=\"small\"\n\t\t\t\t\t\t\tdataSource={list}\n\t\t\t\t\t\t\trowKey='id' \n\t\t\t\t\t\t\tbordered\n\t\t\t\t\t\t/>\n\t\t\t\t\t</Spin>\n\t\t\t\t</div>\n\t\t\t</Card>\n\t\t</>\n\t\t\n\t)\n}\n\nexport default ProgramsTable\n","import React from \"react\";\nimport ProgramsTable from './table';\nimport { CheckPer } from 'hooks/checkPermission';\nimport Loading from \"components/shared-components/Loading\";\n\nconst Index = (props) => {\n    \n    const create = CheckPer('add_program');\n    const edit = CheckPer('change_program');\n    const destroy = CheckPer('delete_program');\n\n    const permissions = {\n        create: create,\n        edit: edit,\n        destroy: destroy\n    }\n    \n    if (Object.values(permissions).indexOf('loading') > -1) {\n        return <Loading cover=\"content\" />\n    }\n\n    return (\n        <ProgramsTable title={props.title} permissions={permissions} />\n    )\n}\n\nexport default Index;\n"],"names":["Flex","props","children","className","alignItems","justifyContent","mobileFlex","flexDirection","defaultProps","CREATE_SCHOOL","gql","CREATE_SUB_SCHOOL","CREATE_TEACHER","CREATE_EMPLOYEE","CREATE_STUDENT","CREATE_SECTION","CREATE_CLASSES","CREATE_PROGRAM","CREATE_SUBJECT","CREATE_PARENT","CREATE_EVENT_TYPE","CREATE_EVENT","DELETE_TEACHER","DELETE_EMPLOYEES","DELETE_SUBJECT","DELETE_STUDENT","DELETE_SUB_SCHOOL","DELETE_SCHOOL","DELETE_SECTION","DELETE_CLASS","DELETE_PROGRAM","DELETE_PARENT","DELETE_EVENT_TYPE","DELETE_EVENT","Option","Select","formType","editData","setIsModalVisible","Form","form","useMutation","refetchQueries","ALL_PROGRAMS","onCompleted","data","message","createSchool","loading","UPDATE_PROGRAM","updateProgram","updateLoading","schoolsData","useQuery","ALL_SCHOOLS","ALL_SUB_SCHOOLS","subSchoolsData","subSchoolsLoading","useState","undefined","subSchoolList","setSubSchoolList","useEffect","allSubSchools","newData","program","programMgl","maxStudentNum","school","id","subSchool","status","key","setFieldsValue","setSelected","getFieldValue","resetFields","selected","type","options","filter","Subschool","map","filteredSubSchool","value","name","spinning","tip","layout","onFinish","values","variables","label","IntlMessage","rules","required","onChange","allSchools","index","placeholder","dataPrograms","history","useHistory","list","setList","reFill","setReFill","tableLoading","setTableLoading","allPrograms","isModalVisible","setEditData","setFormType","confirm","Modal","nf","Intl","NumberFormat","deleteProgram","tableColumns","title","dataIndex","sorter","a","b","utils","render","text","format","permissions","edit","destroy","push","width","_","elm","size","onClick","row","APP_PREFIX_PATH","icon","EyeTwoTone","EditTwoTone","twoToneColor","okText","okType","cancelText","onOk","DeleteTwoTone","visible","onCancel","okButtonProps","htmlType","prefix","SearchOutlined","e","currentTarget","searchArray","onSearch","create","PlusCircleOutlined","block","columns","dataSource","rowKey","bordered","CheckPer","Object","indexOf","Loading","cover"],"sourceRoot":""}