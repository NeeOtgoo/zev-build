{"version":3,"file":"static/js/5703.0dab3bd4.chunk.js","mappings":"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","sources":["graphql/create.js","graphql/delete.js","views/app-views/event/event-modal.js","views/app-views/event/event-card.js","views/app-views/event/event-list.js","views/app-views/event/event-list-modal.js","views/app-views/event/events.js","views/app-views/event/index.js"],"sourcesContent":["import { gql } from '@apollo/client';\n\nexport const CREATE_SCHOOL = gql`\n    mutation createSchool($name: String, $nameMgl: String) {\n      createSchool(name: $name, nameMgl: $nameMgl) {\n        school {\n          id\n          name\n          nameMgl\n        }\n      }\n    }\n`;\n\nexport const CREATE_SUB_SCHOOL = gql`\n    mutation createSubSchool($name: String, $nameMgl: String, $school: Int!){\n      createSubSchool(name: $name, nameMgl: $nameMgl, school: $school) {\n        subSchool {\n          id\n          name\n          nameMgl \n          school {\n            id\n          }\n        }\n      }\n    }\n`;\n\nexport const REGISTER = gql`\n    mutation register($email: String!, $username: String!, $isTeacher: Boolean!, $isStudent: Boolean!, $password1: String!, $password2: String!){\n      register(email: $email, username: $username, isTeacher: $isTeacher, isStudent: $isStudent, password1: $password1, password2: $password2) {\n          success\n          errors\n          token\n      } \n    }\n\n`;\n\nexport const CREATE_TEACHER = gql`\n    mutation createTeacher($address: String, $birthCity: Int, $birthDistrict: Int, $birthdate: String, $degree: Int,\n                            $familyName: String, $joinBefore: String, $joinDate: String, $name: String, $phone: String, $phone2: String,\n                            $registerNo: String, $school: Int, $sex: String, $status: Int, $subSchool: Int, $teacherCode: String!,\n                            $username: String!, $password: String!, $email: String!, $access: String!\n                            # $user: Int\n                            ) {\n      createTeacher(address: $address, birthCity: $birthCity, birthDistrict: $birthDistrict, birthdate: $birthdate, degree: $degree,\n                             familyName: $familyName, joinBefore: $joinBefore, joinDate: $joinDate, name: $name, phone: $phone, phone2: $phone2, \n                            registerNo: $registerNo, school: $school, sex: $sex, status: $status, subSchool: $subSchool, \n                            teacherCode: $teacherCode, access: $access,\n                            username: $username, password: $password, email: $email\n                            # user: $user \n                            ) {\n        teacher {\n          id\n        }\n      }\n    }\n`;\n\nexport const CREATE_EMPLOYEE = gql`\n    mutation createEmployee(\n                $address: String\n                $birthCity: Int\n                $birthDistrict: Int\n                $birthdate: String\n                $email: String!\n                $employeeCode: String!\n                $familyName: String\n                $group: Int\n                $name: String\n                $password: String!\n                $phone: String\n                $phone2: String\n                $photo: Upload\n                $registerNo: String\n                $sex: String\n                $status: Int\n                $compartment: Int\n                $username: String!\n              ) {\n      createEmployee(\n                address: $address\n                birthCity: $birthCity\n                birthDistrict: $birthDistrict\n                birthdate: $birthdate\n                email: $email\n                employeeCode: $employeeCode\n                familyName: $familyName\n                group: $group\n                name: $name\n                password: $password\n                phone: $phone\n                phone2: $phone2\n                photo: $photo\n                compartment: $compartment\n                registerNo: $registerNo\n                sex: $sex\n                status: $status\n                username: $username\n          ) {\n          employee {\n          id\n        }\n      }\n    }\n`;\n\nexport const CREATE_STUDENT = gql`\n    mutation createStudent(\n      $activity: Int\n      $address: String\n      $allergies: String\n      $birthCity: Int\n      $birthDistrict: Int\n      $birthdate: String\n      $bloodType: String\n      $bodyIndex: String\n      $classes: Int\n      $classtime: Int\n      $drug: String\n      $etc: String\n      $familyName: String\n      $joinDate: String\n      $joinSchoolyear: String\n      $name: String\n      $nationality: String\n      $phone: String\n      $program: Int\n      $registerNo: String\n      $religion: String\n      $school: Int\n      $section: Int\n      $sex: String\n      $state: String\n      $status: Int\n      $statusExtra: Int\n      $surname: String\n      $underlyingDisease: String\n      $vaccine: String\n    ) {\n      createStudent(\n        activity: $activity\n        address: $address\n        allergies: $allergies\n        birthCity: $birthCity\n        birthDistrict: $birthDistrict\n        birthdate: $birthdate\n        bloodType: $bloodType\n        bodyIndex: $bodyIndex\n        classes: $classes\n        classtime: $classtime\n        drug: $drug\n        email: \"dummy@dummy.com\"\n        etc: $etc\n        familyName: $familyName\n        joinDate: $joinDate\n        joinSchoolyear: $joinSchoolyear\n        name: $name\n        nationality: $nationality\n        phone: $phone\n        program: $program\n        registerNo: $registerNo\n        religion: $religion\n        school: $school\n        section: $section\n        sex: $sex\n        state: $state\n        status: $status\n        statusExtra: $statusExtra\n        surname: $surname\n        underlyingDisease: $underlyingDisease\n        vaccine: $vaccine\n      ) {\n        student {\n          id\n        }\n      }\n    }\n`;\n\nexport const CREATE_SECTION = gql`\n  mutation createSection($classes: Int, $maxStudentNum: Int, $program: Int, $teacher: Int,  $school: Int, $section: String, $subSchool: Int) {\n    createSection(classes: $classes, program: $program, school: $school, section: $section, subSchool: $subSchool, maxStudentNum: $maxStudentNum, teacher: $teacher) {\n      section {\n        section\n      }\n    }\n  }\n`\nexport const CREATE_CLASSES = gql`\n  mutation createClasses($activity: Int, $classes: String,\n                          $program: Int, $school: Int, $status: String, $subSchool: Int) {\n    createClasses(activity: $activity, classes: $classes,\n                  program: $program, school: $school, status: $status, subSchool: $subSchool) {\n      classes {\n        classes\n      }\n    }\n  }\n`\nexport const CREATE_PROGRAM = gql`\n    mutation createProgram($program: String, $programMgl: String,  \n                           $status: String, $maxStudentNum: Int, $school: Int, $subSchool: Int) {\n      createProgram(program: $program, programMgl: $programMgl,  \n                    status: $status, maxStudentNum: $maxStudentNum, school: $school, subSchool: $subSchool) {\n        program {\n          id\n        }\n      }\n    }\n`;\n\nexport const CREATE_SUBJECT = gql`\n  mutation createSubject($credit: String, $subject: String, $content: String, $school: Int, $subSchool: Int) {\n    createSubject(credit: $credit, subject: $subject, school: $school, content: $content, subSchool: $subSchool) {\n      subject {\n        credit\n      }\n    }\n  }\n`\nexport const CREATE_PROGRAM_SUBJECT = gql`\n  mutation createProgramSubject($program: Int, $subject: Int) {\n    createProgramSubject(program: $program, subject: $subject) {\n      programSubjectType {\n        id\n      }\n    }\n  }\n`;\n\nexport const CREATE_ROUTINE_STUDENT = gql`\n  mutation createRoutineStudent ($routine: Int, $studentCode: String, $section: Int) {\n    createRoutineStudent (routine: $routine, studentCode: $studentCode, section: $section) {\n      routineStudent {\n        id\n      }\n    }\n  }\n`\n\nexport const CREATE_PARENT = gql`\n    mutation createParent ($address: String, $familyName: String, $name: String, $phone: String, $profession: String, $student: Int) {\n        createParent (address: $address, familyName: $familyName, name: $name, phone: $phone, profession: $profession, student: $student) {\n            parent {\n                name\n            }\n        }\n    }\n`;\n\nexport const CREATE_EVENT_TYPE = gql`\n    mutation createEventType ($color: String, $name: String) {\n        createEventType (color: $color, name: $name) {\n            eventType {\n                name\n            }\n        }\n    }\n`;\n\nexport const CREATE_EVENT = gql`\n    mutation createEvent ($content: String, $description: String, $endAt: String, $eventType: Int, $startAt: String, $title: String) {\n        createEvent (content: $content, description: $description, endAt: $endAt, eventType: $eventType, startAt: $startAt, title: $title) {\n            event {\n                title\n            }\n        }\n    }\n`;","import { gql } from '@apollo/client'\n\nexport const DELETE_CITY = gql `\n    mutation deleteCity($id: ID!){\n        deleteCity(id: $id){\n            city{\n              name\n              code\n            }\n        }\n    }\n`\n\nexport const DELETE_USER = gql `\n    mutation deleteAccount($username: String) {\n        deleteAccount(username: $username) {\n            account {\n                username\n            }\n        }\n    }\n`\n\nexport const DELETE_TEACHER = gql `\n    mutation deleteTeacher($id: ID!){\n      deleteTeacher(id: $id){\n            teacher{\n              name\n            }\n        }\n    }\n`;\n\nexport const DELETE_EMPLOYEES = gql `\n  mutation deleteEmployee($id: ID){\n    deleteEmployee(id: $id){\n      employee{\n        name\n      }\n    }\n  }\n  `;\n\nexport const DELETE_SUBJECT = gql `\n  mutation deleteSubject ($id: ID) {\n    deleteSubject (id: $id) {\n      subject {\n        credit\n      }\n    }\n  }\n`\n\nexport const DELETE_STUDENT = gql `\n    mutation deleteStudent($id: ID!){\n      deleteStudent(id: $id){\n            student{\n              surname\n            }\n        }\n    }\n`\n\nexport const DELETE_SUB_SCHOOL = gql `\n  mutation deleteSubSchool($id: ID){\n    deleteSubSchool(id: $id){\n      subSchool{\n        name\n      }\n    }\n}\n`\n\nexport const DELETE_SCHOOL = gql `\n  mutation deleteSchool($id: ID!){\n    deleteSchool(id: $id){\n      school{\n        name\n      }\n    }\n}\n`\n\nexport const DELETE_SECTION = gql `\n  mutation deleteSection($id: ID){\n    deleteSection(id: $id){\n      section{\n        section\n      }\n    }\n}\n`\n\nexport const DELETE_CLASS = gql `\n  mutation deleteClasses($id: ID!){\n    deleteClasses(id: $id){\n      classes{\n        classes\n      }\n    }\n}\n`\n\nexport const DELETE_PROGRAM = gql `\n    mutation deleteProgram($id: ID!){\n        deleteProgram(id: $id){\n            program{\n                program\n            }\n        }\n    }\n`;\n\nexport const DELETE_ROUTINE = gql `\n    mutation deleteRoutine ($id: ID) {\n        deleteRoutine (id: $id) {\n            routine {\n                createdAt\n            }\n        }\n    }\n`;\n\nexport const DELETE_PARENT = gql `\n    mutation deleteParent ($id: ID) {\n        deleteParent (id: $id) {\n            parent {\n                name\n            }\n        }\n    }\n`;\n\nexport const DELETE_EVENT_TYPE = gql `\n    mutation deleteEventType ($id: ID) {\n        deleteEventType (id: $id) {\n            eventType {\n                name\n            }\n        }\n    }\n`;\n\nexport const DELETE_EVENT = gql`\n    mutation deleteEvent ($id: ID) {\n        deleteEvent (id: $id) {\n            event {\n                title\n            }\n        }\n    }\n`;\n","import { useMutation } from '@apollo/client';\nimport { Badge, Button, DatePicker, Form, Input, message, Modal, Select } from 'antd';\nimport IntlMessage from 'components/util-components/IntlMessage';\nimport { CREATE_EVENT } from 'graphql/create';\nimport { UPDATE_EVENT } from 'graphql/update';\nimport moment from 'moment';\nimport React, { useEffect } from 'react'\n\nconst { Option } = Select;\nconst { TextArea } = Input;\nconst { RangePicker } = DatePicker;\n\nconst EventModal = ({ visible, cancel, refetch, allEventTypes, formType, event }) => {\n\n\tconst [form] = Form.useForm();\n\n    const [create, { loading: createLoading }] = useMutation(CREATE_EVENT, {\n\t\tonCompleted: data => {\n            message.success('Амжилттай хадгаллаа');\n            form.resetFields();\n            refetch();\n            cancel();\n\t\t},\n    })\n\n    const [update, { loading }] = useMutation(UPDATE_EVENT, {\n\t\tonCompleted: data => {\n            message.success('Амжилттай хадгаллаа');\n            form.resetFields();\n            refetch();\n            cancel();\n\t\t},\n    })\n\n    useEffect(() => {\n\n        const setEventData = () => {\n            const newData ={\n                title: event.title,\n                description: event.description,\n                content: event.content,\n                eventType: event.eventType?.id,\n                dates: [ moment.utc(event.startAt), moment.utc(event.endAt) ]\n\t\t\t}\n            form.setFieldsValue(newData);\n        }\n\n        if (formType === 'edit') {\n            setEventData();\n        }\n    }, [event, form, formType])\n\n\tconst onSubmit = values => {\n        values.dates.map(function (date, index) {\n            if (index === 0) {\n                return values.startAt = moment(date).format('YYYY-MM-DD HH:mm')\n            } else {\n                return values.endAt = moment(date).format('YYYY-MM-DD HH:mm')\n            }\n        })\n        if (values.hasOwnProperty('endAt')) {\n            if (formType === 'edit') {\n                values.id = event.id;\n                update({ variables: values });\n            } else {\n                create({ variables: values });\n            }\n        }\n\t}\n\n\treturn (\n\t\t<Modal\n            title={ formType === 'edit' ? event.title : <IntlMessage id=\"add_new\" /> }\n\t\t\tvisible={visible}\n\t\t\tfooter={null}\n\t\t\tdestroyOnClose={true}\n            onCancel={cancel}\n        >\n\t\t\t<Form\n                layout=\"vertical\" \n\t\t\t\tname=\"event-form\"\n                id=\"event-form\"\n                form={form}\n\t\t\t\tpreserve={false}\n\t\t\t\tonFinish={onSubmit}\n            >\n\t\t\t\t<Form.Item name=\"title\" label={<IntlMessage id=\"title\" />} rules={[\n                    {\n                        required: true,\n                        message: <IntlMessage id=\"form.required\" />\n                    },\n                ]}>\n\t\t\t\t\t<Input />\n\t\t\t\t</Form.Item>\n\t\t\t\t<Form.Item name=\"eventType\" label={<IntlMessage id=\"event-type\" />} rules={[\n                    {\n                        required: true,\n                        message: <IntlMessage id=\"form.required\" />\n                    },\n                ]}>\n\t\t\t\t\t<Select>\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tallEventTypes?.map((elm, index) => (\n\t\t\t\t\t\t\t\t<Option value={elm.id} key={index}>\n\t\t\t\t\t\t\t\t\t<Badge color={elm.color} />\n\t\t\t\t\t\t\t\t\t<span className=\"text-capitalize font-weight-semibold\">{elm.name}</span>\n\t\t\t\t\t\t\t\t</Option>\n\t\t\t\t\t\t\t))\n\t\t\t\t\t\t}\n\t\t\t\t\t</Select>\n\t\t\t\t</Form.Item>\n                <Form.Item name=\"description\" label={<IntlMessage id=\"description\" />} rules={[\n                    {\n                        required: true,\n                        message: <IntlMessage id=\"form.required\" />\n                    },\n                ]}>\n\t\t\t\t\t<TextArea rows={4} />\n\t\t\t\t</Form.Item>\n                <Form.Item name=\"content\" label={<IntlMessage id=\"content\" />} rules={[\n                    {\n                        required: true,\n                        message: <IntlMessage id=\"form.required\" />\n                    },\n                ]}>\n\t\t\t\t\t<TextArea rows={4} />\n\t\t\t\t</Form.Item>\n\t\t\t\t<Form.Item name=\"dates\" label={<IntlMessage id=\"start_end_date\" />} rules={[\n                    {\n                        required: true,\n                        message: <IntlMessage id=\"form.required\" />\n                    },\n                ]}>\n                    <RangePicker className=\"w-100\" showTime />\n\t\t\t\t</Form.Item>\n\t\t\t\t<Form.Item className=\"text-right mb-0\">\n\t\t\t\t\t<Button type=\"primary\" htmlType=\"submit\" loading={createLoading || loading}>\n                        <IntlMessage id=\"main.okText\" />\n\t\t\t\t\t</Button>\n\t\t\t\t</Form.Item>\n\t\t\t</Form>\n\t\t</Modal>\n\t)\n}\n\nexport default EventModal","import React from 'react';\nimport { Badge, Button } from 'antd'\nimport { DeleteTwoTone, EditTwoTone } from '@ant-design/icons';\nimport moment from 'moment';\nimport { CalendarIcon } from '@heroicons/react/outline';\n\nconst EventCard = ({ data, canDelete, onDelete, onSingleEventSelect, canEdit }) => {\n\n    const cardActions = (item) => {\n        return (\n            <div className='flex justify-between p-2 border-t border-gray-light'>\n                { canEdit === true && \n                    <Button\n                        onClick={() => onSingleEventSelect(data)}\n                        type='text'\n                        shape=\"circle\"\n                        icon={<EditTwoTone twoToneColor=\"#ffdb00\"/>}\n                    />\n                }\n                { canDelete === true &&\n                    <Button\n                        onClick={() => onDelete(item.id)}\n                        type='text'\n                        shape=\"circle\"\n                        icon={<DeleteTwoTone twoToneColor={'#f42f2f'}/>}\n                    />\n                }\n            </div>\n        )\n    }\n\n    return (\n        <div \n            className='transition rounded-1 min-h-56 my-4 bg-background hover:cursor-pointer hover:-translate-y-1 hover:scale-102  duration-300'\n            // style={{ backgroundColor: data.eventType.color }}\n        >\n            <div className=\"mx-6 my-4 p-2\">\n                <div className=\"font-medium py-2 text-base border-b border-gray-light text-gray-700\">\n                    <Badge color={data.eventType.color} />\n                    {data.title}\n                </div>\n                <div className='flex flex-col space-y-1 mt-2'>\n                    <span className='flex items-center'>\n                        <CalendarIcon className='h-4 text-emind mr-2' />\n                        {moment.utc(data.startAt).format('HH:mm')} - {moment.utc(data.endAt).format('HH:mm')}\n                    </span>\n                    <p className=\"font-normal text-gray-700 text-sm mb-2\">\n                        {data.description}\n                    </p>\n                    <p className=\"font-normal text-gray-700 text-sm mb-4\">\n                        {data.content}\n                    </p>\n                </div>\n                { canDelete || canEdit ? (\n                    cardActions(data)\n                ) : null}\n            </div>\n        </div>\n        // <>\n        //     <Card\n        //         bordered={false}\n        //         hoverable \n        //         style={{ backgroundColor: data.eventType.color }}\n        //         actions={cardActions(data.id)}\n        //     >\n        //         <Row \n        //             onClick={() => onSingleEventSelect && canEdit && onSingleEventSelect(data)}\n        //         >\n        //             <Col xs={16} sm={16} md={16} lg={16} xl={16}>\n        //                 <div className='mb-0'>\n        //                     <div>\n        //                         <div className=\"d-flex align-items-center\">\n        //                             <h1 className=\"mb-0 font-weight-bold\" style={{ color: '#FFFFFF' }}>{data.title}</h1>\n        //                         </div>\n        //                     </div>\n        //                 </div>\n        //                 <h4 className=\"mb-0\" style={{ color: '#FFFFFF' }}>{data.description}</h4>\n        //                 <p className=\"mb-0\" style={{ color: '#FFFFFF' }}>{data.content}</p>\n        //             </Col>\n        //             <Col xs={8} sm={8} md={8} lg={8} xl={8}>\n        //                 <div className='text-center' >\n        //                     <p className=\"font-weight-bold mb-0\" style={{ color: '#FFFFFF' }}>{moment(data.startAt).format('HH:mm')} - {moment(data.endAt).format('HH:mm')}</p>\n        //                 </div>\n        //             </Col>\n        //         </Row>\n        //     </Card>\n        // </>\n    )\n}\n\nexport default EventCard","import React, { useState } from 'react';\nimport { CalendarOutlined } from '@ant-design/icons';\nimport EventCard from './event-card';\nimport EventModal from './event-modal';\nimport Scrollbars from 'react-custom-scrollbars';\n\nconst EventList = props => {\n\n\tconst { list, onDelete, canDelete, canEdit, allEventTypes, refetch } = props\n\n\tconst [modalVisible, setModalVisible] = useState(false);\n    const [selectedEvent, setSelectedEvent] = useState({});\n\n    const groups = list.reduce((groups, event) => {\n        const date = event.startAt.split('T')[0];\n        if (!groups[date]) {\n            groups[date] = [];\n        }\n        groups[date].push(event);\n        return groups;\n    }, {});\n      \n    const groupArrays = Object.keys(groups).map((date) => {\n        return {\n            date,\n            events: groups[date]\n        };\n    });\n\n    groupArrays.sort(function(a, b){return new Date(a.date) - new Date(b.date)})\n\n    const onSingleEventSelect = (event) => {\n        setModalVisible(true);\n        setSelectedEvent(event);\n    }\n\n\tconst onSingleEventSelectCancel = () => {\n\t\tsetModalVisible(false)\n\t}\n\n\treturn (\n        <>\n            <Scrollbars className='h-5/6' >\n                { groupArrays.map((item, index) => (\n                    <div key={index} className=\"p-4\">\n                        <h4>\n                            <CalendarOutlined />\n                            <span className=\"ml-2\">{item.date}</span>\n                        </h4>\n                        { item.events.map((event, i) => (\n                            <EventCard \n                                key={i}\n                                data={event}\n                                canDelete={canDelete}\n                                canEdit={canEdit}\n                                onDelete={onDelete}\n                                onSingleEventSelect={onSingleEventSelect}\n                            />\n                        ))}\n                    </div>\n                ))}\n            </Scrollbars>\n            <EventModal\n                formType={'edit'}\n                refetch={refetch}\n                cancel={onSingleEventSelectCancel}\n                visible={modalVisible}\n                allEventTypes={allEventTypes}\n                event={selectedEvent}\n                canEdit={canEdit}\n            />\n        </>\n\t)\n}\n\nexport default EventList","import React from 'react'\nimport { Modal } from 'antd';\nimport EventCard from './event-card';\n\nconst EventListModal = ({ visible, cancel, selectedDate, datas, canDelete, onDelete }) => {\n\n    return (\n        <Modal\n            title={selectedDate}\n\t\t\tvisible={visible}\n\t\t\tfooter={null}\n\t\t\tdestroyOnClose={true}\n            onCancel={cancel}\n        >\n            { datas.map((data, index) => (\n                <EventCard \n                    key={index} \n                    data={data} \n                    canDelete={canDelete}\n                    onDelete={onDelete}\n                />\n            ))}\n        </Modal>\n        \n    )\n}\n\nexport default EventListModal","import React, { useState } from 'react';\nimport { Calendar, Badge, Card, Row, Col, message, Button, Modal } from 'antd';\nimport moment from 'moment';\nimport { PlusCircleOutlined } from '@ant-design/icons';\nimport { ALL_EVENTS, ALL_EVENT_TYPES } from 'graphql/all';\nimport IntlMessage from 'components/util-components/IntlMessage';\nimport { useMutation, useQuery } from '@apollo/client';\nimport Loading from 'components/shared-components/Loading';\nimport EventModal from './event-modal';\nimport EventList from './event-list';\nimport EventListModal from './event-list-modal';\nimport { DELETE_EVENT } from 'graphql/delete';\n\nconst dateFormat = 'MMMM DD'\nconst { confirm } = Modal;\n\nconst CalendarApp = ({ permissions }) => {\n    \n\tconst [calendarList, setCalendarList] = useState([]);\n\tconst [modalVisible, setModalVisible] = useState(false);\n    const [eventListModalVisible, setEventListModalVisible] = useState(false);\n    const [selectedDate, setSelectedDate] = useState();\n    const [dateEvents, setDateEvents] = useState([]);\n\n    const { data: eventTypes } = useQuery(ALL_EVENT_TYPES);\n\n    const { loading, refetch } = useQuery(ALL_EVENTS, {\n        onCompleted: data => {\n            setCalendarList(data.allEvents);\n        }\n    })\n\n    const [destroy] = useMutation(DELETE_EVENT, {\n        onCompleted: data => {\n            setEventListModalVisible(false);\n            setModalVisible(false);\n            message.success('Амжилттай устлаа!');\n            refetch();\n        }\n    })\n\n\tconst cellRender = value => {\n\t\tconst listData = getListData(value.format((dateFormat)));\n\t\treturn (\n\t\t\t<ul className=\"calendar-event\">\n\t\t\t\t{listData.map((item, i) => (\n\t\t\t\t\t<li key={`${item.title}-${i}`}>\n\t\t\t\t\t\t<Badge color={item.eventType.color} text={item.title}/>\n\t\t\t\t\t</li>\n\t\t\t\t))}\n\t\t\t</ul>\n\t\t);\n\t}\n\n\tconst getListData = (value) => {\n\t\tconst listData = [];\n\t\tcalendarList.forEach(elm => {\n\t\t\tconst date = moment(elm.startAt)\n\t\t\tconst formatedDate = date.format(dateFormat)\n\t\t\tif(formatedDate === value) {\n\t\t\t\tlistData.push(elm)\n\t\t\t}\n\t\t})\n        listData.sort(function(a, b){return new Date(a.startAt) - new Date(b.startAt)})\n\t\treturn listData;\n\t}\n\n\tconst onSelect = value => {\n        const selectedDate = moment(value).format(dateFormat);\n        const listData = []\n        calendarList.filter(asd => moment(asd.startAt).format('YYYY-MM-DD') === value.format(('YYYY-MM-DD'))).map(filteredData => (\n\t\t\tlistData.push(filteredData)\n\t\t))\n        listData.sort(function(a, b){return new Date(a.startAt) - new Date(b.startAt)})\n        setDateEvents(listData);\n        setSelectedDate(selectedDate);\n\t\tsetEventListModalVisible(true);\n\t}\n\n\tconst onDeleteEvent = (item) => {\n        \n        confirm({\n            title: \"Устгах уу?\",\n            okText: \"Устгах\",\n            okType: 'danger',\n            cancelText: \"Болих\",\n            onOk() {\n                destroy({ variables: { id: item } })\n            },\n        });\n\t}\n\n\tconst onAddEventCancel = () => {\n\t\tsetModalVisible(false);\n        setEventListModalVisible(false);\n\t}\n\n    if (loading) {\n        return (<Loading cover='content' />)\n    }\n\n\treturn (\n\t\t<Card \n            className=\"calendar\"\n        >\n\t\t\t<div className='justify-between md:flex'>\n\t\t\t\t<div className='hidden md:block'>\n\t\t\t\t\t{ eventTypes?.allEventTypes.map((event, index) => (\n\t\t\t\t\t\t<Badge key={index} className='mr-4' color={event.color} text={event.name}/>\n\t\t\t\t\t))}\n\t\t\t\t</div>\n\t\t\t\t<div className=''>\n\t\t\t\t\t{ permissions.create === true && (\n\t\t\t\t\t\t<Button onClick={() => setModalVisible(true)} type=\"primary\" icon={<PlusCircleOutlined />} block> <IntlMessage id=\"add_new\" /> </Button>\n\t\t\t\t\t)}\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<Row gutter={[16, 16]}>\n\t\t\t\t<Col xs={24} sm={24} md={9} lg={6}>\n\t\t\t\t\t<h2 className=\"mb-4\"><IntlMessage id=\"event\" /></h2>\n\t\t\t\t\t<EventList \n                        canDelete={permissions.destroy}\n                        canEdit={permissions.edit}\n\t\t\t\t\t\tlist={calendarList} \n\t\t\t\t\t\tonDelete={onDeleteEvent}\n                        allEventTypes={eventTypes?.allEventTypes}\n                        refetch={refetch}\n\t\t\t\t\t/>\n\t\t\t\t</Col>\n\t\t\t\t<Col xs={24} sm={24} md={15} lg={18}>\n\t\t\t\t\t<Calendar\n\t\t\t\t\t\tonSelect={val => onSelect(val)} \n\t\t\t\t\t\tdateCellRender={cellRender}\n\t\t\t\t\t/>\n\t\t\t\t</Col>\n\t\t\t</Row>\n            <EventListModal \n                canDelete={permissions.destroy}\n                onDelete={onDeleteEvent}\n                selectedDate={selectedDate}\n\t\t\t\tvisible={eventListModalVisible}\n\t\t\t\tcancel={onAddEventCancel}\n                datas={dateEvents}\n            />\n\t\t\t<EventModal \n                refetch={refetch}\n\t\t\t\tvisible={modalVisible}\n\t\t\t\tcancel={onAddEventCancel}\n                allEventTypes={eventTypes?.allEventTypes}\n\t\t\t/>\n\t\t</Card>\n\t)\n}\n\nexport default CalendarApp\n\n","import React from \"react\";\nimport Events from './events';\nimport { CheckPer } from 'hooks/checkPermission';\nimport Loading from \"components/shared-components/Loading\";\n\nconst Index = (props) => {\n\n    const create = CheckPer('add_event');\n    const edit = CheckPer('change_event');\n    const destroy = CheckPer('delete_event');\n\n    const permissions = {\n        create: create,\n        edit: edit,\n        destroy: destroy\n    }\n\n    if (Object.values(permissions).indexOf('loading') > -1) {\n        return <Loading cover=\"content\" />\n    }\n\n    return (\n        <Events permissions={permissions} />\n    )\n}\n\nexport default Index;\n"],"names":["CREATE_SCHOOL","gql","CREATE_SUB_SCHOOL","CREATE_TEACHER","CREATE_EMPLOYEE","CREATE_STUDENT","CREATE_SECTION","CREATE_CLASSES","CREATE_PROGRAM","CREATE_SUBJECT","CREATE_PARENT","CREATE_EVENT_TYPE","CREATE_EVENT","DELETE_TEACHER","DELETE_EMPLOYEES","DELETE_SUBJECT","DELETE_STUDENT","DELETE_SUB_SCHOOL","DELETE_SCHOOL","DELETE_SECTION","DELETE_CLASS","DELETE_PROGRAM","DELETE_PARENT","DELETE_EVENT_TYPE","DELETE_EVENT","Option","Select","TextArea","Input","RangePicker","DatePicker","visible","cancel","refetch","allEventTypes","formType","event","Form","form","useMutation","onCompleted","data","message","resetFields","create","createLoading","loading","UPDATE_EVENT","update","useEffect","newData","title","description","content","eventType","id","dates","moment","startAt","endAt","setFieldsValue","setEventData","IntlMessage","footer","destroyOnClose","onCancel","layout","name","preserve","onFinish","values","map","date","index","format","hasOwnProperty","variables","label","rules","required","elm","value","color","className","rows","showTime","type","htmlType","item","canDelete","onDelete","onSingleEventSelect","canEdit","CalendarIcon","onClick","shape","icon","EditTwoTone","twoToneColor","DeleteTwoTone","props","list","useState","modalVisible","setModalVisible","selectedEvent","setSelectedEvent","groups","reduce","split","push","groupArrays","Object","keys","events","sort","a","b","Date","CalendarOutlined","i","selectedDate","datas","dateFormat","confirm","Modal","permissions","calendarList","setCalendarList","eventListModalVisible","setEventListModalVisible","setSelectedDate","dateEvents","setDateEvents","eventTypes","useQuery","ALL_EVENT_TYPES","ALL_EVENTS","allEvents","destroy","getListData","listData","forEach","onDeleteEvent","okText","okType","cancelText","onOk","onAddEventCancel","Loading","cover","text","PlusCircleOutlined","block","gutter","xs","sm","md","lg","edit","onSelect","val","filter","asd","filteredData","dateCellRender","CheckPer","indexOf"],"sourceRoot":""}