{"version":3,"file":"static/js/9199.b28feca7.chunk.js","mappings":"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","sources":["graphql/all.js","views/app-views/online-lesson/lesson-form.js"],"sourcesContent":["import { gql } from '@apollo/client';\n\nexport const ALL_SUBJECTS = gql`\n    query allSubjects ($offset: Int!, $limit: Int!, $filter: String) {\n        allSubjects (offset: $offset, limit: $limit, filter: $filter) {\n            id\n            school {\n                id\n                name\n            }\n            subSchool {\n                id\n                name\n            }\n            subject \n            credit\n            content\n            createUserid{\n                teacher{\n                    familyName\n                    name\n                }\n            }\n        }\n    }\n`;\n\nexport const TEACHER_STATUS = gql`\n    query allTeacherStatuss {\n        allTeacherStatuss {\n            id\n            name\n        }\n    }\n`\n\nexport const STUDENT_STATUS = gql`\n    query allStudentStatuss {\n        allStudentStatuss {\n            id\n            name\n        }\n    }\n`\n\nexport const STUDENT_STATUS_EXTRA = gql`\n    query allStudentStatusExtras {\n        allStudentStatusExtras {\n            id\n            name\n        }\n    }\n`\n\nexport const ALL_USERS = gql`\n    query allUsers {\n        allUsers {\n            id\n            username\n            email\n        }\n    }\n`;\n\nexport const USER_BY_USERNAME = gql`\n    query userByUsername($username: String!) {\n        userByUsername(username: $username) {\n            id\n            username\n        }\n    }\n`;\n\nexport const ALL_EMPLOYEES_ATTANDANCE_BY_RANGE = gql`\n    query employeesAttandanceByRange ($startDate: DateTime!, $endDate: DateTime!) {\n        employeesAttandanceByRange (startDate: $startDate, endDate: $endDate) {\n            id\n            isIn\n            isOut\n            timeIn\n            timeOut\n            user {\n                id\n                isTeacher\n                isEmployee\n                teacher {\n                    familyName\n                    name\n                    teacherCode\n                }\n                employee {\n                    familyName\n                    name\n                    employeeCode\n                }\n                groups {\n                    name\n                }\n            }\n        }\n    }\n`\n\nexport const ALL_TEACHER_AND_EMPLOYESS = gql`\n    query allAttendaceEmployees {\n        allAttendaceEmployees {\n            username\n            email\n            isTeacher\n            isEmployee\n            teacher {\n                teacherCode\n                familyName\n                name\n            }\n            employee {\n                employeeCode\n                familyName\n                name\n            }\n        }\n    }\n`;\n\nexport const ALL_EMPLOYEES_COMPARTMENT = gql`\n    query allEmployeesCompartment {\n        allEmployeesCompartment {\n            id\n            name\n        }\n    }\n`\n\nexport const ALL_EMPLOYEES = gql`\n    query allEmployees ($filter: String) {\n        allEmployees (filter: $filter) {\n            id\n            user {\n                id\n                username\n                email\n                groups {\n                    name\n                }\n            }\n            compartment {\n                id\n                name\n            }\n            employeeCode\n            familyName\n            name\n            registerNo\n            photo\n            phone\n            phone2\n            address\n            sex\n            birthdate\n            birthCity {\n                id\n            }\n            birthDistrict {\n                id\n            }\n            status {\n                id\n            }\n        }\n    }\n`\n\nexport const ALL_TEACHERS = gql`\n  \tquery allTeachers ($offset: Int!, $limit: Int!, $filter: String) {\n        allTeachers (offset: $offset, limit: $limit, filter: $filter) {\n            id\n            user {\n                id\n                username\n                email\n            }\n            teacherCode\n            degree{\n                id\n            }\n            access\n            familyName\n            name\n            registerNo\n            photo\n            phone\n            phone2\n            address\n            joinDate\n            joinBefore\n            sex\n            birthdate\n            birthCity {\n                id\n                name\n            }\n            birthDistrict {\n                id\n                name\n            }\n            status {\n                id\n                name\n            }\n            school {\n                id\n                name\n            }\n            subSchool {\n                id\n                name\n            }\n        }\n\t}\n`;\n\nexport const ALL_STUDENTS = gql`\n  \tquery allStudents ($filter: String, $program: Int, $classes: Int, $section: Int) {\n        allStudents (filter: $filter, program: $program, classes: $classes, section: $section) {\n            id\n            user {\n                id\n                username\n                email\n            }\n            studentCode\n            surname\n            familyName\n            name\n            religion\n            registerNo\n            nationality\n            state\n            photo\n            phone\n            address\n            bodyIndex\n            vaccine\n            drug\n            allergies\n            underlyingDisease\n            bloodType\n            etc\n            activity {\n                id\n                name\n            }\n            joinDate\n            sex\n            birthdate\n            classtime {\n                id\n                name\n            }\n            birthCity {\n                id\n                name\n            }\n            birthDistrict {\n                id\n                name\n            }\n            status {\n                id\n                name\n            }\n            statusExtra {\n                id\n                name\n            }\n            school {\n                id\n                name\n            }\n            classes {\n                id\n                classes\n            }\n            section {\n                id\n                section\n            }\n            program {\n                id\n                program\n            }\n            joinSchoolyear {\n                id\n                schoolyear\n            }\n        }\n    }\n`;\n\nexport const ALL_CITYS = gql`\n  \tquery allCitys{\n        allCitys {\n            id\n            name\n            code\n        }\n\t}\n`;\n\nexport const ALL_DISTRICTS = gql`\n    query allDistricts {\n        allDistricts {\n            id\n            code\n            name\n            cityID {\n                id\n                name\n            }\n        }\n    }\n`\n\nexport const ALL_PROGRAMS = gql`\n  \tquery allPrograms{\n        allPrograms {\n            id\n            program\n            programMgl\n            maxStudentNum\n            school {\n                id\n                name\n            }\n            subSchool {\n                id\n                name\n            }\n            status\n            createdAt\n            updatedAt\n        }\n\t  }\n`;\n\nexport const ALL_SCHOOLS = gql`\n  \tquery allSchools {\n        allSchools {\n            id\n            name\n            nameMgl\n        }\n\t}\n`;\n\nexport const ALL_SUB_SCHOOLS = gql`\n  \tquery allSubSchools{\n        allSubSchools {\n            id\n            name\n            nameMgl\n            school {\n                id\n                name\n            }\n\t\t}\n\t}\n`;\n\nexport const ALL_SECTIONS = gql`\n    query allSections {\n        allSections {\n            id\n            section\n            classes {\n                id\n                classes\n            }\n            program {\n                id\n                program\n            }\n            teacher{\n                id\n            }\n            program {\n                id\n                program\n            }\n            subSchool {\n                id\n                name\n            }\n            school {\n                id\n                name\n            }\n            createdAt\n            updatedAt\n        }\n    }\n`\n\nexport const ALL_CLASSESS = gql`\n    query allClassess ($program: Int!, $offset: Int!, $limit: Int!, $filter: String) {\n        allClassess (program: $program, offset: $offset, limit: $limit, filter: $filter) {\n            id\n            classes\n            # classesNumeric\n            activity {\n                id\n                name\n            }\n            program {\n                id\n                program\n            }\n            subSchool {\n                id\n                name\n            }\n            school {\n                id\n                name\n            }\n            status\n            sectionSet {\n                id\n                section\n                classes {\n                    id\n                    classes\n                }\n                program {\n                    id\n                    program\n                }\n                subSchool {\n                    id\n                    name\n                }\n                school {\n                    id\n                    name\n                }\n            }\n        }\n    }\n`\nexport const ALL_CLASSTIME = gql`\n    query allClasstimes {\n        allClasstimes {\n            id\n            name\n        }\n    }\n`\nexport const ALL_SCHOOL_YEAR = gql`\n    query allSchoolyears {\n        allSchoolyears {\n            id\n            schoolyear\n        }\n    }\n`;\n\nexport const ALL_PARENTS = gql`\n    query allParents ($offset: Int!, $limit: Int!, $filter: String) {\n        allParents (offset: $offset, limit: $limit, filter: $filter) {\n            id\n            familyName\n            name\n            profession\n            phone\n            address\n            student {\n                id\n                studentCode\n                familyName\n                name\n            }\n        }\n    }\n`;\n\nexport const SECTION_BY_CLASSES = gql`\n    query sectionsByClasses ($classes: Int!) {\n        sectionsByClasses (classes: $classes) {\n            id\n            section\n            maxStudentNum\n            teacher{\n                name\n                id\n            }\n            classes {\n                id\n                classes\n            }\n            program {\n                id\n                program\n            }\n            subSchool {\n                id\n                name\n            }\n            school {\n                id\n                name\n            }\n        }\n    }\n`;\n\nexport const TRANSFER_BY_STUDENT = gql`\n    query transfersByStudent ($student: Int!) {\n        transfersByStudent (student: $student) {\n            id\n            student {\n                familyName\n                name\n                photo\n                studentCode\n            }\n            school {\n                id\n                name\n            }\n            program {\n                id\n                program\n            }\n            classes {\n                id\n                classes\n            }\n            section {\n                id\n                section\n            }\n            status {\n                id\n                name\n            }\n            statusExtra {\n                id\n                name\n            }\n            classtime {\n                id\n                name\n            }\n            activity {\n                id\n                name\n            }\n            docDate\n            docNum\n            description\n            oldData\n        }\n    }\n`;\n\nexport const ALL_EVENT_TYPES = gql`\n    query allEventTypes {\n        allEventTypes {\n            id\n            name\n            color\n        }\n    }\n`;\n\nexport const ALL_EVENTS = gql`\n    query allEvents {\n        allEvents {\n            id\n            title\n            description\n            content\n            startAt\n            endAt\n            eventType {\n                id\n                name\n                color\n            }\n        }\n    } \n`;\n\nexport const ALL_EVENTS_BY_TYPE = gql`\n    query allEventsByType ($id: Int!) {\n        allEventsByType (id: $id) {\n            id\n            title\n            description\n            content\n            startAt\n            endAt\n            eventType\n        }\n    }\n`;\n\nexport const ALL_STUDENTS_PAGINATION =  gql`\n    query allStudentsPagination ($page: Int, $perPage: Int, $filter: String = \"\") {\n        allStudentsPagination (page: $page, perPage: $perPage, filter: $filter) {\n            page\n            perPage\n            pageCount\n            totalCount\n            records {\n                id\n                user {\n                    id\n                    username\n                    email\n                }\n                studentCode\n                surname\n                familyName\n                name\n                religion\n                registerNo\n                nationality\n                state\n                photo\n                phone\n                address\n                activity {\n                    id\n                    name\n                }\n                joinDate\n                sex\n                birthdate\n                classtime {\n                    id\n                    name\n                }\n                birthCity {\n                    id\n                    name\n                }\n                birthDistrict {\n                    id\n                    name\n                }\n                status {\n                    id\n                    name\n                }\n                statusExtra {\n                    id\n                    name\n                }\n                school {\n                    id\n                    name\n                }\n                classes {\n                    id\n                    classes\n                }\n                section {\n                    id\n                    section\n                }\n                program {\n                    id\n                    program\n                }\n                joinSchoolyear {\n                    id\n                    schoolyear\n                }\n            }\n        }\n    }\n`","import React, { useEffect } from 'react';\nimport { Form, message, Input, Spin, Select } from 'antd';\nimport { useMutation, useQuery } from '@apollo/client';\nimport { ALL_SCHOOL_YEAR } from 'graphql/all'\nimport { CREATE_ONLINE_LESSON, ALL_ONLINE_LESSON, UPDATE_ONLINE_LESSON } from 'graphql/lesson'\nimport 'braft-editor/dist/index.css';\nimport IntlMessage from 'components/util-components/IntlMessage';\n\nfunction LessonForm ({ formType, editData, setIsModalVisible, refetch }) {\n\n    const [form] = Form.useForm();\n\n    const { Option } = Select;\n    const { TextArea } = Input;\n\n    const { data: schoolyearData } = useQuery(ALL_SCHOOL_YEAR);\n    \n\n    const [createOnlineLesson, { loading: createLoading } ] = useMutation(CREATE_ONLINE_LESSON, {\n\t\tonCompleted: data => {\n            message.success('Амжилттай хадгаллаа');\n            form.resetFields();\n            refetch()\n            setIsModalVisible(false);\n\t\t}\n    });\n\n    const [updateOnlineLesson, { loading: updateLoading }] = useMutation(UPDATE_ONLINE_LESSON, {\n        onCompleted: data => {\n            message.success('Амжилттай хадгаллаа');\n            form.resetFields();\n            refetch()\n            setIsModalVisible(false);\n        }\n    })\n\n    useEffect(() => {\n        if(formType === \"edit\") {\n            const newData ={\n                description: editData.description,\n                schoolyear: editData.schoolyear.id,\n                status: editData.status,\n\t\t\t}\n            form.setFieldsValue(newData);\n        } else if(formType === \"create\") {\n            form.resetFields();\n        }\n    }, [form, formType, editData]);\n\n\n    const onFinish = values => {\n        if (formType === 'edit') {\n            values.id = editData.id;\n            updateOnlineLesson({ variables: values });\n        } else {\n            createOnlineLesson({ variables: values })\n        }\n    };\n\n    return (\n        <Spin spinning={createLoading || updateLoading} tip=\"Ачааллаж байна...\">\n            <Form  \n                id=\"LessonForm\"\n                layout={'vertical'}\n                form={form}\n                name=\"lesson\" \n                onFinish={onFinish}\n            >\n                <Form.Item name=\"schoolyear\" label={<IntlMessage id=\"schoolyear\" />} rules={[\n                    {\n                        required: true,\n                        message: <IntlMessage id=\"form.required\" />\n                    },\n                ]}>\n                    <Select>\n                        { schoolyearData?.allSchoolyears.map((schoolyear, index) => (\n                            <Option value={schoolyear.id} key={index} >{schoolyear.schoolyear} {schoolyear.season}</Option>\n                        ))}\n                    </Select>\n                </Form.Item>\n                <Form.Item name=\"description\" label={<IntlMessage id=\"description\" />} rules={[\n                    {\n                        required: true,\n                        message: <IntlMessage id=\"form.required\" />\n                    },\n                ]}>\n                    <TextArea rows={4} />\n                </Form.Item>\n                <Form.Item name=\"status\" label={<IntlMessage id=\"status\" />} rules={[\n                    {\n                        required: true,\n                        message: <IntlMessage id=\"form.required\" />\n                    },\n                ]}>\n                    <Select>\n                        <Option value=\"OPEN\" key={0} >{<IntlMessage id=\"status.open\" />}</Option>\n                        <Option value=\"CLOSED\" key={1} >{<IntlMessage id=\"status.closed\" />}</Option>\n                    </Select>\n                </Form.Item>\n            </Form>\n        </Spin>\n    );\n};\n\nexport default LessonForm"],"names":["ALL_SUBJECTS","gql","ALL_USERS","ALL_EMPLOYEES_ATTANDANCE_BY_RANGE","ALL_EMPLOYEES_COMPARTMENT","ALL_EMPLOYEES","ALL_TEACHERS","ALL_STUDENTS","ALL_CITYS","ALL_DISTRICTS","ALL_PROGRAMS","ALL_SCHOOLS","ALL_SUB_SCHOOLS","ALL_SECTIONS","ALL_CLASSESS","ALL_CLASSTIME","ALL_SCHOOL_YEAR","ALL_PARENTS","SECTION_BY_CLASSES","TRANSFER_BY_STUDENT","ALL_EVENT_TYPES","ALL_EVENTS","ALL_STUDENTS_PAGINATION","formType","editData","setIsModalVisible","refetch","Form","form","Option","Select","TextArea","Input","schoolyearData","useQuery","data","useMutation","CREATE_ONLINE_LESSON","onCompleted","message","resetFields","createOnlineLesson","createLoading","loading","UPDATE_ONLINE_LESSON","updateOnlineLesson","updateLoading","useEffect","newData","description","schoolyear","id","status","setFieldsValue","spinning","tip","layout","name","onFinish","values","variables","label","rules","required","allSchoolyears","map","index","value","season","rows"],"sourceRoot":""}