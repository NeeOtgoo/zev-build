{"version":3,"file":"static/js/7546.c8782038.chunk.js","mappings":"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","sources":["components/shared-components/Flex/index.js","graphql/create.js","graphql/delete.js","views/app-views/school/form.js","views/app-views/school/table.js","views/app-views/school/index.js"],"sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\n\nconst Flex = props => {\n\tconst { children, className, alignItems, justifyContent, mobileFlex, flexDirection } = props\n\tconst getFlexResponsive = () => mobileFlex ? 'd-flex' : 'd-md-flex'\n\treturn (\n\t\t<div className={`${getFlexResponsive()} ${className} ${flexDirection?('flex-' + flexDirection): ''} ${alignItems?('align-items-' + alignItems):''} ${justifyContent?('justify-content-' + justifyContent):''}` }>\n\t\t\t{children}\n\t\t</div>\n\t)\n}\n\nFlex.propTypes = {\n\tclassName: PropTypes.string,\n\talignItems: PropTypes.string,\n\tflexDirection: PropTypes.string,\n\tjustifyContent: PropTypes.string,\n\tmobileFlex: PropTypes.bool\n}\n\nFlex.defaultProps = {\n\tmobileFlex: true,\n\tflexDirection: 'row',\n\tclassName: ''\n};\n\n\nexport default Flex\n","import { gql } from '@apollo/client';\n\nexport const CREATE_SCHOOL = gql`\n    mutation createSchool($name: String, $nameMgl: String) {\n      createSchool(name: $name, nameMgl: $nameMgl) {\n        school {\n          id\n          name\n          nameMgl\n        }\n      }\n    }\n`;\n\nexport const CREATE_SUB_SCHOOL = gql`\n    mutation createSubSchool($name: String, $nameMgl: String, $school: Int!){\n      createSubSchool(name: $name, nameMgl: $nameMgl, school: $school) {\n        subSchool {\n          id\n          name\n          nameMgl \n          school {\n            id\n          }\n        }\n      }\n    }\n`;\n\nexport const REGISTER = gql`\n    mutation register($email: String!, $username: String!, $isTeacher: Boolean!, $isStudent: Boolean!, $password1: String!, $password2: String!){\n      register(email: $email, username: $username, isTeacher: $isTeacher, isStudent: $isStudent, password1: $password1, password2: $password2) {\n          success\n          errors\n          token\n      } \n    }\n\n`;\n\nexport const CREATE_TEACHER = gql`\n    mutation createTeacher($address: String, $birthCity: Int, $birthDistrict: Int, $birthdate: String, $degree: Int,\n                            $familyName: String, $joinBefore: String, $joinDate: String, $name: String, $phone: String, $phone2: String,\n                            $registerNo: String, $school: Int, $sex: String, $status: Int, $subSchool: Int, $teacherCode: String!,\n                            $username: String!, $password: String!, $email: String!, $access: String!\n                            # $user: Int\n                            ) {\n      createTeacher(address: $address, birthCity: $birthCity, birthDistrict: $birthDistrict, birthdate: $birthdate, degree: $degree,\n                             familyName: $familyName, joinBefore: $joinBefore, joinDate: $joinDate, name: $name, phone: $phone, phone2: $phone2, \n                            registerNo: $registerNo, school: $school, sex: $sex, status: $status, subSchool: $subSchool, \n                            teacherCode: $teacherCode, access: $access,\n                            username: $username, password: $password, email: $email\n                            # user: $user \n                            ) {\n        teacher {\n          id\n        }\n      }\n    }\n`;\n\nexport const CREATE_EMPLOYEE = gql`\n    mutation createEmployee(\n                $address: String\n                $birthCity: Int\n                $birthDistrict: Int\n                $birthdate: String\n                $email: String!\n                $employeeCode: String!\n                $familyName: String\n                $group: Int\n                $name: String\n                $password: String!\n                $phone: String\n                $phone2: String\n                $photo: Upload\n                $registerNo: String\n                $sex: String\n                $status: Int\n                $compartment: Int\n                $username: String!\n              ) {\n      createEmployee(\n                address: $address\n                birthCity: $birthCity\n                birthDistrict: $birthDistrict\n                birthdate: $birthdate\n                email: $email\n                employeeCode: $employeeCode\n                familyName: $familyName\n                group: $group\n                name: $name\n                password: $password\n                phone: $phone\n                phone2: $phone2\n                photo: $photo\n                compartment: $compartment\n                registerNo: $registerNo\n                sex: $sex\n                status: $status\n                username: $username\n          ) {\n          employee {\n          id\n        }\n      }\n    }\n`;\n\nexport const CREATE_STUDENT = gql`\n    mutation createStudent(\n      $activity: Int\n      $address: String\n      $allergies: String\n      $birthCity: Int\n      $birthDistrict: Int\n      $birthdate: String\n      $bloodType: String\n      $bodyIndex: String\n      $classes: Int\n      $classtime: Int\n      $drug: String\n      $etc: String\n      $familyName: String\n      $joinDate: String\n      $joinSchoolyear: String\n      $name: String\n      $nationality: String\n      $phone: String\n      $program: Int\n      $registerNo: String\n      $religion: String\n      $school: Int\n      $section: Int\n      $sex: String\n      $state: String\n      $status: Int\n      $statusExtra: Int\n      $surname: String\n      $underlyingDisease: String\n      $vaccine: String\n    ) {\n      createStudent(\n        activity: $activity\n        address: $address\n        allergies: $allergies\n        birthCity: $birthCity\n        birthDistrict: $birthDistrict\n        birthdate: $birthdate\n        bloodType: $bloodType\n        bodyIndex: $bodyIndex\n        classes: $classes\n        classtime: $classtime\n        drug: $drug\n        email: \"dummy@dummy.com\"\n        etc: $etc\n        familyName: $familyName\n        joinDate: $joinDate\n        joinSchoolyear: $joinSchoolyear\n        name: $name\n        nationality: $nationality\n        phone: $phone\n        program: $program\n        registerNo: $registerNo\n        religion: $religion\n        school: $school\n        section: $section\n        sex: $sex\n        state: $state\n        status: $status\n        statusExtra: $statusExtra\n        surname: $surname\n        underlyingDisease: $underlyingDisease\n        vaccine: $vaccine\n      ) {\n        student {\n          id\n        }\n      }\n    }\n`;\n\nexport const CREATE_SECTION = gql`\n  mutation createSection($classes: Int, $maxStudentNum: Int, $program: Int, $teacher: Int,  $school: Int, $section: String, $subSchool: Int) {\n    createSection(classes: $classes, program: $program, school: $school, section: $section, subSchool: $subSchool, maxStudentNum: $maxStudentNum, teacher: $teacher) {\n      section {\n        section\n      }\n    }\n  }\n`\nexport const CREATE_CLASSES = gql`\n  mutation createClasses($activity: Int, $classes: String,\n                          $program: Int, $school: Int, $status: String, $subSchool: Int) {\n    createClasses(activity: $activity, classes: $classes,\n                  program: $program, school: $school, status: $status, subSchool: $subSchool) {\n      classes {\n        classes\n      }\n    }\n  }\n`\nexport const CREATE_PROGRAM = gql`\n    mutation createProgram($program: String, $programMgl: String,  \n                           $status: String, $maxStudentNum: Int, $school: Int, $subSchool: Int) {\n      createProgram(program: $program, programMgl: $programMgl,  \n                    status: $status, maxStudentNum: $maxStudentNum, school: $school, subSchool: $subSchool) {\n        program {\n          id\n        }\n      }\n    }\n`;\n\nexport const CREATE_SUBJECT = gql`\n  mutation createSubject($credit: String, $subject: String, $content: String, $school: Int, $subSchool: Int) {\n    createSubject(credit: $credit, subject: $subject, school: $school, content: $content, subSchool: $subSchool) {\n      subject {\n        credit\n      }\n    }\n  }\n`\nexport const CREATE_PROGRAM_SUBJECT = gql`\n  mutation createProgramSubject($program: Int, $subject: Int) {\n    createProgramSubject(program: $program, subject: $subject) {\n      programSubjectType {\n        id\n      }\n    }\n  }\n`;\n\nexport const CREATE_ROUTINE_STUDENT = gql`\n  mutation createRoutineStudent ($routine: Int, $studentCode: String, $section: Int) {\n    createRoutineStudent (routine: $routine, studentCode: $studentCode, section: $section) {\n      routineStudent {\n        id\n      }\n    }\n  }\n`\n\nexport const CREATE_PARENT = gql`\n    mutation createParent ($address: String, $familyName: String, $name: String, $phone: String, $profession: String, $student: Int) {\n        createParent (address: $address, familyName: $familyName, name: $name, phone: $phone, profession: $profession, student: $student) {\n            parent {\n                name\n            }\n        }\n    }\n`;\n\nexport const CREATE_EVENT_TYPE = gql`\n    mutation createEventType ($color: String, $name: String) {\n        createEventType (color: $color, name: $name) {\n            eventType {\n                name\n            }\n        }\n    }\n`;\n\nexport const CREATE_EVENT = gql`\n    mutation createEvent ($content: String, $description: String, $endAt: String, $eventType: Int, $startAt: String, $title: String) {\n        createEvent (content: $content, description: $description, endAt: $endAt, eventType: $eventType, startAt: $startAt, title: $title) {\n            event {\n                title\n            }\n        }\n    }\n`;","import { gql } from '@apollo/client'\n\nexport const DELETE_CITY = gql `\n    mutation deleteCity($id: ID!){\n        deleteCity(id: $id){\n            city{\n              name\n              code\n            }\n        }\n    }\n`\n\nexport const DELETE_USER = gql `\n    mutation deleteAccount($username: String) {\n        deleteAccount(username: $username) {\n            account {\n                username\n            }\n        }\n    }\n`\n\nexport const DELETE_TEACHER = gql `\n    mutation deleteTeacher($id: ID!){\n      deleteTeacher(id: $id){\n            teacher{\n              name\n            }\n        }\n    }\n`;\n\nexport const DELETE_EMPLOYEES = gql `\n  mutation deleteEmployee($id: ID){\n    deleteEmployee(id: $id){\n      employee{\n        name\n      }\n    }\n  }\n  `;\n\nexport const DELETE_SUBJECT = gql `\n  mutation deleteSubject ($id: ID) {\n    deleteSubject (id: $id) {\n      subject {\n        credit\n      }\n    }\n  }\n`\n\nexport const DELETE_STUDENT = gql `\n    mutation deleteStudent($id: ID!){\n      deleteStudent(id: $id){\n            student{\n              surname\n            }\n        }\n    }\n`\n\nexport const DELETE_SUB_SCHOOL = gql `\n  mutation deleteSubSchool($id: ID){\n    deleteSubSchool(id: $id){\n      subSchool{\n        name\n      }\n    }\n}\n`\n\nexport const DELETE_SCHOOL = gql `\n  mutation deleteSchool($id: ID!){\n    deleteSchool(id: $id){\n      school{\n        name\n      }\n    }\n}\n`\n\nexport const DELETE_SECTION = gql `\n  mutation deleteSection($id: ID){\n    deleteSection(id: $id){\n      section{\n        section\n      }\n    }\n}\n`\n\nexport const DELETE_CLASS = gql `\n  mutation deleteClasses($id: ID!){\n    deleteClasses(id: $id){\n      classes{\n        classes\n      }\n    }\n}\n`\n\nexport const DELETE_PROGRAM = gql `\n    mutation deleteProgram($id: ID!){\n        deleteProgram(id: $id){\n            program{\n                program\n            }\n        }\n    }\n`;\n\nexport const DELETE_ROUTINE = gql `\n    mutation deleteRoutine ($id: ID) {\n        deleteRoutine (id: $id) {\n            routine {\n                createdAt\n            }\n        }\n    }\n`;\n\nexport const DELETE_PARENT = gql `\n    mutation deleteParent ($id: ID) {\n        deleteParent (id: $id) {\n            parent {\n                name\n            }\n        }\n    }\n`;\n\nexport const DELETE_EVENT_TYPE = gql `\n    mutation deleteEventType ($id: ID) {\n        deleteEventType (id: $id) {\n            eventType {\n                name\n            }\n        }\n    }\n`;\n\nexport const DELETE_EVENT = gql`\n    mutation deleteEvent ($id: ID) {\n        deleteEvent (id: $id) {\n            event {\n                title\n            }\n        }\n    }\n`;\n","import React, { useEffect } from 'react';\nimport { Form, Input, message, Spin } from 'antd';\nimport { useMutation } from '@apollo/client';\nimport { CREATE_SCHOOL } from 'graphql/create'\nimport { ALL_SCHOOLS } from 'graphql/all'\nimport { UPDATE_SCHOOL } from 'graphql/update'\nimport IntlMessage from 'components/util-components/IntlMessage';\n\nfunction SchoolForm ({editData, formType, setIsModalVisible}) {\n\n    const [form] = Form.useForm();\n\n    const [createSchool, { loading: createLoading }] = useMutation(CREATE_SCHOOL, {\n        refetchQueries: [ALL_SCHOOLS,\n\t\t\t'allSchools'\n\t\t],\n\t\tonCompleted: data => {\n            message.success('Амжилттай хадгаллаа');\n            setIsModalVisible(false);\n\t\t}\n\t});\n\n    const [updateSchool, { loading: updateLoading }] = useMutation(UPDATE_SCHOOL, {\n        refetchQueries: [ALL_SCHOOLS, \n            'allSchools'\n        ],\n        onCompleted: data => {\n            message.success('Амжилттай хадгаллаа');\n            setIsModalVisible(false);\n        }\n    })\n\n    useEffect(() => {\n        if(formType === \"edit\") {\n            form.setFieldsValue(editData);\n        } else if(formType === \"create\") {\n            form.resetFields();\n        }\n    }, [editData, form, formType]);\n\n    \n\n\n    const onFinish = values => {\n        if (formType === \"edit\") {\n            values.id = editData?.id\n            updateSchool({ variables: values})\n        } else {\n            createSchool({ variables: values })\n        }\n    };\n\n    return (\n        <Spin spinning={createLoading || updateLoading} tip=\"Ачааллаж байна...\">\n            <Form  \n                id=\"SchoolForm\"\n                                layout={'vertical'}\n                form={form}\n                name=\"school\" \n                onFinish={onFinish}\n            >\n                <Form.Item name=\"name\" label={<IntlMessage id=\"name\" />} rules={[\n                    {\n                        required: true,\n                        message: <IntlMessage id=\"form.required\" />\n                    },\n                ]}>\n                    <Input />\n                </Form.Item>\n                <Form.Item name=\"nameMgl\" label={<IntlMessage id=\"nameMgl\" />} rules={[\n                    {\n                        required: true,\n                        message: <IntlMessage id=\"form.required\" />\n                    },\n                ]}>\n                    <Input />\n                </Form.Item>\n            </Form>\n        </Spin>\n    );\n};\n\nexport default SchoolForm","import React, { useState, useEffect } from 'react'\nimport { Card, Table, Input, Spin, Empty, Modal, message, Button } from 'antd';\nimport { DeleteTwoTone, SearchOutlined, EditTwoTone, PlusCircleOutlined } from '@ant-design/icons';\nimport Flex from 'components/shared-components/Flex'\nimport utils from 'utils'\nimport SchoolForm from './form'\nimport { useQuery, useMutation } from '@apollo/client';\nimport IntlMessage from \"components/util-components/IntlMessage\";\nimport { ALL_SCHOOLS } from 'graphql/all';\nimport { DELETE_SCHOOL } from 'graphql/delete'\n\nfunction  AllSchoolTable (props) {\n\n\tconst { loading, data: schoolData } = useQuery(ALL_SCHOOLS, {\n\t});\n    \n\tconst [list, setList] = useState(undefined)\n\n    useEffect(() => {\n        if(loading === false && schoolData){\n            setList(schoolData.allSchools);\n        }\n    }, [loading, schoolData])\n\n\tconst [isModalVisible, setIsModalVisible] = useState(false);\n\tconst [editData, setEditData] = useState([]);\n\tconst [formType, setFormType] = useState(\"\");\n\n    const showModal = () => {\n\t\tsetFormType(\"create\")\n      \tsetIsModalVisible(true);\n    };\n\n    const handleCancel = () => {\n      \tsetIsModalVisible(false);\n    };\n\n\tconst editRow = row => {\n\t\tsetEditData(row);\n\t\tsetFormType(\"edit\")\n\t\tsetIsModalVisible(true);\n\t};\n\n\tconst { confirm } = Modal;\n\n\tconst [deleteSchool, { loading: loadingDelete }] = useMutation(DELETE_SCHOOL, {\n\t\trefetchQueries: [ALL_SCHOOLS,\n\t\t\t'allSchools'\n\t\t],\n\t\tonCompleted: data => {\n            message.success('Амжилттай устлаа');\n\t\t}\n\t});\n\t\n\tfunction deleteRow(row) {\n\t\tconfirm({\n\t\t  title: 'Устгах уу?',\n\t\t  okText: 'Устгах',\n\t\t  okType: 'danger',\n\t\t  cancelText: 'Болих',\n\t\t  onOk() {\n\t\t\tdeleteSchool({ variables: { id: row.id, name: row.name, nameMgl: row.nameMgl } }); \n\t\t  },\n\t\t});\n\t}\n\n\tconst tableColumns = [\n\t\t{\n\t\t\tkey: 'name',\n\t\t\ttitle: <IntlMessage id=\"name\" />,\n\t\t\tdataIndex: 'name',\n\t\t\twidth: '43%',\n\t\t\tsorter: (a, b) => utils.antdTableSorter(a, b, 'name')\n\t\t},\n\t\t{\n\t\t\tkey: 'nameMgl',\n            title: <IntlMessage id=\"nameMgl\" />,\n            dataIndex: 'nameMgl', \n\t\t\twidth: '43%',\n\t\t\tsorter: (a, b) => utils.antdTableSorter(a, b, 'nameMgl')\n\t\t}\n\t];\n\n\tif (props.permissions.edit === true ||\n\t\tprops.permissions.destroy === true ) {\n\t\t\ttableColumns.push(\n\t\t\t\t{\n\t\t\t\t\tkey: 'actions',\n\t\t\t\t\ttitle: <IntlMessage id=\"main.action\" />,\n\t\t\t\t\twidth: '15vw',\n\t\t\t\t\tdataIndex: 'actions',\n\t\t\t\t\trender: (_, elm) => (\n\t\t\t\t\t\t<div className=\"text-center\">\n\t\t\t\t\t\t\t{ props.permissions.edit === true &&\n\t\t\t\t\t\t\t\t<Button size=\"small\" onClick={() => editRow(elm)} type=\"text\" icon={<EditTwoTone twoToneColor=\"#ffdb00\"/>} > <IntlMessage id=\"edit\" /> </Button>\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t{ props.permissions.destroy === true &&\n\t\t\t\t\t\t\t\t<Button size=\"small\" onClick={() => deleteRow(elm)} type=\"text\" icon={<DeleteTwoTone twoToneColor=\"#f42f2f\"/>} > <IntlMessage id=\"delete\" /></Button>\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t)\n\t\t\t\t}\n\t\t\t)\n\t}\n\n\tconst onSearch = e => {\n\t\tconst value = e.currentTarget.value\n\t\tconst searchArray = e.currentTarget.value? list : schoolData?.allSchools\n\t\tconst data = utils.wildCardSearch(searchArray, value)\n\t\tsetList(data)\n\t}\n\n\treturn (\n\t\t<>\n\t\t\t<Modal \n\t\t\t\tforceRender\n                title={formType === 'edit' ? <IntlMessage id='edit' /> : <IntlMessage id=\"add_new\" /> }\n                visible={isModalVisible} \n\t\t\t\tokText={<IntlMessage id=\"main.okText\" />}\n\t\t\t\tcancelText={<IntlMessage id=\"main.cancelText\" />}\n\t\t\t\tonCancel={handleCancel}\n\t\t\t\tokButtonProps={{form:'SchoolForm', key: 'submit', htmlType: 'submit'}}\n            >\n                <SchoolForm formType={formType} setIsModalVisible={setIsModalVisible} editData={editData}/>\n            </Modal>\n\t\t\t<Card>\n\t\t\t\t<Flex alignItems=\"center\" justifyContent=\"between\" mobileFlex={false}>\n\t\t\t\t\t<Flex className=\"mb-1\" mobileFlex={false}>\n\t\t\t\t\t\t<div className=\"mr-md-3 mb-3\">\n\t\t\t\t\t\t\t<Input placeholder={'Хайх'} prefix={<SearchOutlined />} onChange={e => onSearch(e)}/>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</Flex>\n\t\t\t\t\t{ props.permissions.create === true &&\n\t\t\t\t\t\t<div className=\"mr-md-3 mb-3\">\n\t\t\t\t\t\t\t<Button onClick={showModal} type=\"primary\" icon={<PlusCircleOutlined />} block> <IntlMessage id=\"add_new\" /> </Button>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t}\n\t\t\t\t</Flex>\n\t\t\t\t<div className=\"table-responsive\">\n\t\t\t\t\t<Table \n\t\t\t\t\t\tcolumns={tableColumns} \n\t\t\t\t\t\tsize=\"small\"\n\t\t\t\t\t\tdataSource={list}\n\t\t\t\t\t\trowKey='id'  \n\t\t\t\t\t\tbordered\n\t\t\t\t\t\tlocale={{\n\t\t\t\t\t\t\temptyText: loading || loadingDelete ? <Spin /> : <Empty />\n\t\t\t\t\t\t}}\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t</Card>\n\t\t</>\n\t\t\n\t)\n}\n\nexport default AllSchoolTable\n","import React from \"react\";\nimport AllSchoolTable from './table';\nimport { CheckPer } from 'hooks/checkPermission';\nimport Loading from \"components/shared-components/Loading\";\n\nconst Index = (props) => {\n\n    const create = CheckPer('add_school');\n    const edit = CheckPer('change_school');\n    const destroy = CheckPer('delete_school');\n\n    const permissions = {\n        create: create,\n        edit: edit,\n        destroy: destroy\n    }\n\n    if (Object.values(permissions).indexOf('loading') > -1) {\n        return <Loading cover=\"content\" />\n    }\n\n    return (\n        <AllSchoolTable title={props.title} permissions={permissions} />\n    )\n}\n\nexport default Index;\n"],"names":["Flex","props","children","className","alignItems","justifyContent","mobileFlex","flexDirection","defaultProps","CREATE_SCHOOL","gql","CREATE_SUB_SCHOOL","CREATE_TEACHER","CREATE_EMPLOYEE","CREATE_STUDENT","CREATE_SECTION","CREATE_CLASSES","CREATE_PROGRAM","CREATE_SUBJECT","CREATE_PARENT","CREATE_EVENT_TYPE","CREATE_EVENT","DELETE_TEACHER","DELETE_EMPLOYEES","DELETE_SUBJECT","DELETE_STUDENT","DELETE_SUB_SCHOOL","DELETE_SCHOOL","DELETE_SECTION","DELETE_CLASS","DELETE_PROGRAM","DELETE_PARENT","DELETE_EVENT_TYPE","DELETE_EVENT","editData","formType","setIsModalVisible","Form","form","useMutation","refetchQueries","ALL_SCHOOLS","onCompleted","data","message","createSchool","createLoading","loading","UPDATE_SCHOOL","updateSchool","updateLoading","useEffect","setFieldsValue","resetFields","spinning","tip","id","layout","name","onFinish","values","variables","label","IntlMessage","rules","required","useQuery","schoolData","useState","undefined","list","setList","allSchools","isModalVisible","setEditData","setFormType","confirm","Modal","deleteSchool","loadingDelete","tableColumns","key","title","dataIndex","width","sorter","a","b","utils","permissions","edit","destroy","push","render","_","elm","size","onClick","type","icon","EditTwoTone","twoToneColor","row","okText","okType","cancelText","onOk","nameMgl","DeleteTwoTone","forceRender","visible","onCancel","okButtonProps","htmlType","placeholder","prefix","SearchOutlined","onChange","e","value","currentTarget","searchArray","onSearch","create","PlusCircleOutlined","block","columns","dataSource","rowKey","bordered","locale","emptyText","CheckPer","Object","indexOf","Loading","cover"],"sourceRoot":""}