{"version":3,"file":"static/js/2315.91abb7fd.chunk.js","mappings":"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","sources":["components/shared-components/AsyncTable/index.js","components/shared-components/Flex/index.js","graphql/create.js","graphql/delete.js","graphql/select.js","views/app-views/parent/form.js","views/app-views/parent/table.js","views/app-views/parent/index.js"],"sourcesContent":["import React, { useState } from 'react';\nimport { Button, Card, Input, Pagination, Table } from 'antd'\nimport { PlusCircleOutlined, SearchOutlined } from '@ant-design/icons';\nimport IntlMessage from 'components/util-components/IntlMessage';\nimport Flex from '../Flex';\n\nconst AsyncTable = ({ fetchData, loading, columns, data, permissions, showModal }) => {\n\n    const [filter, setFilter] = useState('');\n\n    const triggerFetch = (page, pageSize) => {\n        var start = 0;\n        var end = pageSize;\n        if (page !== 1) {\n            start = (page * pageSize) - pageSize\n            end = pageSize * page\n        }\n        fetchData({ variables: { offset: start, limit: end, filter: filter, program: 0 } })\n    }\n\n    const onPageChange = (page, pageSize) => {\n        triggerFetch(page, pageSize);\n    }\n\n    const onSearch = e => {\n        const value = e.currentTarget.value\n        fetchData({ variables: { offset: 0, limit: 10, filter: value, program: 0 } })\n        setFilter(value)\n    }\n\n    return (\n\t\t<Card>\n            <Flex alignItems=\"center\" justifyContent=\"between\" mobileFlex={false}>\n                <Flex className=\"mb-1\" mobileFlex={false}>\n                    <div className=\"mr-md-3 mb-3\">\n                        <Input placeholder={'Хайх'} prefix={<SearchOutlined />} onChange={e => onSearch(e)}/>\n                    </div>\n                </Flex>\n                { permissions.create === true &&\n                    <div className=\"mr-md-3 mb-3\">\n                        <Button onClick={showModal} type=\"primary\" icon={<PlusCircleOutlined />} block> <IntlMessage id=\"add_new\" /></Button>\n                    </div>\n                }\n            </Flex>\n            <div className=\"table-responsive\">\n                <Table \n                    // pagination={false}\n                    size=\"small\"\n                    columns={columns} \n                    dataSource={data}\n                    rowKey='id' \n                    bordered\n                    loading={loading}\n                />\n                {/* <Pagination \n                    className='text-right mt-4' \n                    total={count} \n                    onChange={onPageChange}\n                /> */}\n            </div>\n        </Card>    \n    )\n}\n\nexport default AsyncTable","import React from 'react'\nimport PropTypes from 'prop-types'\n\nconst Flex = props => {\n\tconst { children, className, alignItems, justifyContent, mobileFlex, flexDirection } = props\n\tconst getFlexResponsive = () => mobileFlex ? 'd-flex' : 'd-md-flex'\n\treturn (\n\t\t<div className={`${getFlexResponsive()} ${className} ${flexDirection?('flex-' + flexDirection): ''} ${alignItems?('align-items-' + alignItems):''} ${justifyContent?('justify-content-' + justifyContent):''}` }>\n\t\t\t{children}\n\t\t</div>\n\t)\n}\n\nFlex.propTypes = {\n\tclassName: PropTypes.string,\n\talignItems: PropTypes.string,\n\tflexDirection: PropTypes.string,\n\tjustifyContent: PropTypes.string,\n\tmobileFlex: PropTypes.bool\n}\n\nFlex.defaultProps = {\n\tmobileFlex: true,\n\tflexDirection: 'row',\n\tclassName: ''\n};\n\n\nexport default Flex\n","import { gql } from '@apollo/client';\n\nexport const CREATE_SCHOOL = gql`\n    mutation createSchool($name: String, $nameMgl: String) {\n      createSchool(name: $name, nameMgl: $nameMgl) {\n        school {\n          id\n          name\n          nameMgl\n        }\n      }\n    }\n`;\n\nexport const CREATE_SUB_SCHOOL = gql`\n    mutation createSubSchool($name: String, $nameMgl: String, $school: Int!){\n      createSubSchool(name: $name, nameMgl: $nameMgl, school: $school) {\n        subSchool {\n          id\n          name\n          nameMgl \n          school {\n            id\n          }\n        }\n      }\n    }\n`;\n\nexport const REGISTER = gql`\n    mutation register($email: String!, $username: String!, $isTeacher: Boolean!, $isStudent: Boolean!, $password1: String!, $password2: String!){\n      register(email: $email, username: $username, isTeacher: $isTeacher, isStudent: $isStudent, password1: $password1, password2: $password2) {\n          success\n          errors\n          token\n      } \n    }\n\n`;\n\nexport const CREATE_TEACHER = gql`\n    mutation createTeacher($address: String, $birthCity: Int, $birthDistrict: Int, $birthdate: String, $degree: Int,\n                            $familyName: String, $joinBefore: String, $joinDate: String, $name: String, $phone: String, $phone2: String,\n                            $registerNo: String, $school: Int, $sex: String, $status: Int, $subSchool: Int, $teacherCode: String!,\n                            $username: String!, $password: String!, $email: String!, $access: String!\n                            # $user: Int\n                            ) {\n      createTeacher(address: $address, birthCity: $birthCity, birthDistrict: $birthDistrict, birthdate: $birthdate, degree: $degree,\n                             familyName: $familyName, joinBefore: $joinBefore, joinDate: $joinDate, name: $name, phone: $phone, phone2: $phone2, \n                            registerNo: $registerNo, school: $school, sex: $sex, status: $status, subSchool: $subSchool, \n                            teacherCode: $teacherCode, access: $access,\n                            username: $username, password: $password, email: $email\n                            # user: $user \n                            ) {\n        teacher {\n          id\n        }\n      }\n    }\n`;\n\nexport const CREATE_EMPLOYEE = gql`\n    mutation createEmployee(\n                $address: String\n                $birthCity: Int\n                $birthDistrict: Int\n                $birthdate: String\n                $email: String!\n                $employeeCode: String!\n                $familyName: String\n                $group: Int\n                $name: String\n                $password: String!\n                $phone: String\n                $phone2: String\n                $photo: Upload\n                $registerNo: String\n                $sex: String\n                $status: Int\n                $compartment: Int\n                $username: String!\n              ) {\n      createEmployee(\n                address: $address\n                birthCity: $birthCity\n                birthDistrict: $birthDistrict\n                birthdate: $birthdate\n                email: $email\n                employeeCode: $employeeCode\n                familyName: $familyName\n                group: $group\n                name: $name\n                password: $password\n                phone: $phone\n                phone2: $phone2\n                photo: $photo\n                compartment: $compartment\n                registerNo: $registerNo\n                sex: $sex\n                status: $status\n                username: $username\n          ) {\n          employee {\n          id\n        }\n      }\n    }\n`;\n\nexport const CREATE_STUDENT = gql`\n    mutation createStudent(\n      $activity: Int\n      $address: String\n      $allergies: String\n      $birthCity: Int\n      $birthDistrict: Int\n      $birthdate: String\n      $bloodType: String\n      $bodyIndex: String\n      $classes: Int\n      $classtime: Int\n      $drug: String\n      $etc: String\n      $familyName: String\n      $joinDate: String\n      $joinSchoolyear: String\n      $name: String\n      $nationality: String\n      $phone: String\n      $program: Int\n      $registerNo: String\n      $religion: String\n      $school: Int\n      $section: Int\n      $sex: String\n      $state: String\n      $status: Int\n      $statusExtra: Int\n      $surname: String\n      $underlyingDisease: String\n      $vaccine: String\n    ) {\n      createStudent(\n        activity: $activity\n        address: $address\n        allergies: $allergies\n        birthCity: $birthCity\n        birthDistrict: $birthDistrict\n        birthdate: $birthdate\n        bloodType: $bloodType\n        bodyIndex: $bodyIndex\n        classes: $classes\n        classtime: $classtime\n        drug: $drug\n        email: \"dummy@dummy.com\"\n        etc: $etc\n        familyName: $familyName\n        joinDate: $joinDate\n        joinSchoolyear: $joinSchoolyear\n        name: $name\n        nationality: $nationality\n        phone: $phone\n        program: $program\n        registerNo: $registerNo\n        religion: $religion\n        school: $school\n        section: $section\n        sex: $sex\n        state: $state\n        status: $status\n        statusExtra: $statusExtra\n        surname: $surname\n        underlyingDisease: $underlyingDisease\n        vaccine: $vaccine\n      ) {\n        student {\n          id\n        }\n      }\n    }\n`;\n\nexport const CREATE_SECTION = gql`\n  mutation createSection($classes: Int, $maxStudentNum: Int, $program: Int, $teacher: Int,  $school: Int, $section: String, $subSchool: Int) {\n    createSection(classes: $classes, program: $program, school: $school, section: $section, subSchool: $subSchool, maxStudentNum: $maxStudentNum, teacher: $teacher) {\n      section {\n        section\n      }\n    }\n  }\n`\nexport const CREATE_CLASSES = gql`\n  mutation createClasses($activity: Int, $classes: String,\n                          $program: Int, $school: Int, $status: String, $subSchool: Int) {\n    createClasses(activity: $activity, classes: $classes,\n                  program: $program, school: $school, status: $status, subSchool: $subSchool) {\n      classes {\n        classes\n      }\n    }\n  }\n`\nexport const CREATE_PROGRAM = gql`\n    mutation createProgram($program: String, $programMgl: String,  \n                           $status: String, $maxStudentNum: Int, $school: Int, $subSchool: Int) {\n      createProgram(program: $program, programMgl: $programMgl,  \n                    status: $status, maxStudentNum: $maxStudentNum, school: $school, subSchool: $subSchool) {\n        program {\n          id\n        }\n      }\n    }\n`;\n\nexport const CREATE_SUBJECT = gql`\n  mutation createSubject($credit: String, $subject: String, $content: String, $school: Int, $subSchool: Int) {\n    createSubject(credit: $credit, subject: $subject, school: $school, content: $content, subSchool: $subSchool) {\n      subject {\n        credit\n      }\n    }\n  }\n`\nexport const CREATE_PROGRAM_SUBJECT = gql`\n  mutation createProgramSubject($program: Int, $subject: Int) {\n    createProgramSubject(program: $program, subject: $subject) {\n      programSubjectType {\n        id\n      }\n    }\n  }\n`;\n\nexport const CREATE_ROUTINE_STUDENT = gql`\n  mutation createRoutineStudent ($routine: Int, $studentCode: String, $section: Int) {\n    createRoutineStudent (routine: $routine, studentCode: $studentCode, section: $section) {\n      routineStudent {\n        id\n      }\n    }\n  }\n`\n\nexport const CREATE_PARENT = gql`\n    mutation createParent ($address: String, $familyName: String, $name: String, $phone: String, $profession: String, $student: Int) {\n        createParent (address: $address, familyName: $familyName, name: $name, phone: $phone, profession: $profession, student: $student) {\n            parent {\n                name\n            }\n        }\n    }\n`;\n\nexport const CREATE_EVENT_TYPE = gql`\n    mutation createEventType ($color: String, $name: String) {\n        createEventType (color: $color, name: $name) {\n            eventType {\n                name\n            }\n        }\n    }\n`;\n\nexport const CREATE_EVENT = gql`\n    mutation createEvent ($content: String, $description: String, $endAt: String, $eventType: Int, $startAt: String, $title: String) {\n        createEvent (content: $content, description: $description, endAt: $endAt, eventType: $eventType, startAt: $startAt, title: $title) {\n            event {\n                title\n            }\n        }\n    }\n`;","import { gql } from '@apollo/client'\n\nexport const DELETE_CITY = gql `\n    mutation deleteCity($id: ID!){\n        deleteCity(id: $id){\n            city{\n              name\n              code\n            }\n        }\n    }\n`\n\nexport const DELETE_USER = gql `\n    mutation deleteAccount($username: String) {\n        deleteAccount(username: $username) {\n            account {\n                username\n            }\n        }\n    }\n`\n\nexport const DELETE_TEACHER = gql `\n    mutation deleteTeacher($id: ID!){\n      deleteTeacher(id: $id){\n            teacher{\n              name\n            }\n        }\n    }\n`;\n\nexport const DELETE_EMPLOYEES = gql `\n  mutation deleteEmployee($id: ID){\n    deleteEmployee(id: $id){\n      employee{\n        name\n      }\n    }\n  }\n  `;\n\nexport const DELETE_SUBJECT = gql `\n  mutation deleteSubject ($id: ID) {\n    deleteSubject (id: $id) {\n      subject {\n        credit\n      }\n    }\n  }\n`\n\nexport const DELETE_STUDENT = gql `\n    mutation deleteStudent($id: ID!){\n      deleteStudent(id: $id){\n            student{\n              surname\n            }\n        }\n    }\n`\n\nexport const DELETE_SUB_SCHOOL = gql `\n  mutation deleteSubSchool($id: ID){\n    deleteSubSchool(id: $id){\n      subSchool{\n        name\n      }\n    }\n}\n`\n\nexport const DELETE_SCHOOL = gql `\n  mutation deleteSchool($id: ID!){\n    deleteSchool(id: $id){\n      school{\n        name\n      }\n    }\n}\n`\n\nexport const DELETE_SECTION = gql `\n  mutation deleteSection($id: ID){\n    deleteSection(id: $id){\n      section{\n        section\n      }\n    }\n}\n`\n\nexport const DELETE_CLASS = gql `\n  mutation deleteClasses($id: ID!){\n    deleteClasses(id: $id){\n      classes{\n        classes\n      }\n    }\n}\n`\n\nexport const DELETE_PROGRAM = gql `\n    mutation deleteProgram($id: ID!){\n        deleteProgram(id: $id){\n            program{\n                program\n            }\n        }\n    }\n`;\n\nexport const DELETE_ROUTINE = gql `\n    mutation deleteRoutine ($id: ID) {\n        deleteRoutine (id: $id) {\n            routine {\n                createdAt\n            }\n        }\n    }\n`;\n\nexport const DELETE_PARENT = gql `\n    mutation deleteParent ($id: ID) {\n        deleteParent (id: $id) {\n            parent {\n                name\n            }\n        }\n    }\n`;\n\nexport const DELETE_EVENT_TYPE = gql `\n    mutation deleteEventType ($id: ID) {\n        deleteEventType (id: $id) {\n            eventType {\n                name\n            }\n        }\n    }\n`;\n\nexport const DELETE_EVENT = gql`\n    mutation deleteEvent ($id: ID) {\n        deleteEvent (id: $id) {\n            event {\n                title\n            }\n        }\n    }\n`;\n","import { gql } from '@apollo/client';\n\nexport const SELECT_STUDENT = gql`\n    query allStudents ($filter: String) {\n        allStudents (filter: $filter) {\n            id\n            familyName\n            name\n            studentCode\n        }\n\t}\n`;\n\nexport const SELECT_TEACHER = gql`\n    query allTeachers ($filter: String) {\n        allTeachers (filter: $filter) {\n            id\n            familyName\n            name\n            teacherCode\n        }\n    }\n`;\n\n// export const SELECT_SECTION_TEACHER = gql `\n//     query allAssistantTeachers ($filter: String) {\n//         allAssistantTeachers (filter: $filter) {\n//             id\n//             familyName\n//             name \n//             teacherCode\n//         }\n//     }\n// `\n\nexport const SELECT_CLASSES = gql`\n    query allClassess ($filter: String, $program: Int) {\n        allClassess (filter: $filter, program: $program) {\n            id\n            classes\n        }\n\t}\n`;\n\nexport const SELECT_SUBJECT = gql `\n    query allSubjects ($offset: Int!, $limit: Int!, $filter: String) {\n        count (appName: \"subject\", modelName: \"Subject\", filter: $filter) {\n            count\n        }\n        allSubjects (offset: $offset, limit: $limit, filter: $filter) {\n            id\n            subject \n            content\n        }\n    }\n`;\n\nexport const SELECT_PROGRAM = gql`\n    query selectProgram {\n        allPrograms {\n            id\n            program\n        }\n    }\n`;\n\nexport const SECTIONS_BY_PROGRAM = gql`\n    query sectionsByProgram ($program: Int!) {\n        sectionsByProgram (program: $program) {\n            id\n            section \n            classes {\n                classes\n            }\n        }\n    }\n`;\n\nexport const SELECT_SECTION = gql `\n    query sectionsByClasses ($classes: Int!){\n        sectionsByClasses (classes: $classes) {\n            id \n            section\n        }\n    }\n`","import React, { useState, useEffect } from 'react';\nimport { Form, Input, message, Spin, Row, Col, Select, Empty } from 'antd';\nimport { useLazyQuery, useMutation, useQuery } from '@apollo/client';\nimport { ALL_USERS, ALL_PARENTS } from 'graphql/all';\nimport { CREATE_PARENT } from 'graphql/create';\nimport { UPDATE_PARENT } from 'graphql/update';\nimport IntlMessage from 'components/util-components/IntlMessage';\nimport { SELECT_STUDENT } from 'graphql/select';\nimport Loading from 'components/shared-components/Loading';\n\nconst { Option } = Select;\n\nfunction StudentForm ({ editData, formType, setIsModalVisible, setTableLoading }) {\n\n    const [form] = Form.useForm();\n    const { TextArea } = Input;\n\n    const [studentData, setStudentData] = useState([]);\n\n    const [fetchStudent, { loading: studentLoading }] = useLazyQuery(SELECT_STUDENT, {\n        onCompleted: data => {\n            setStudentData(data.allStudents)\n        }\n    });\n    const { data: allUsers } = useQuery(ALL_USERS);\n\n    const [createParent, { loading: createLoading }] = useMutation(CREATE_PARENT, {\n        refetchQueries: [ALL_PARENTS],\n\t\tonCompleted: data => {\n            message.success('Амжилттай хадгаллаа');\n            form.resetFields();\n            setIsModalVisible(false);\n            setTableLoading(true);\n\t\t}\n\t});\n\n    const [updateParent, { loading: editLoading }] = useMutation(UPDATE_PARENT, {\n        refetchQueries: [ALL_PARENTS],\n        onCompleted: data => {\n            message.success('Амжилттай хадгаллаа');\n            form.resetFields();\n            setIsModalVisible(false);\n            setTableLoading(true);\n\t\t}\n    })\n\n    useEffect(() => {\n        \n        if (formType === 'edit') {\n            const newData ={\n                name: editData.name,\n\t\t\t\tfamilyName: editData.familyName,\n\t\t\t\t// username: editData.user.username,\n\t\t\t\t// email: editData.user.email,\n\t\t\t\taddress: editData.address,\n\t\t\t\t// addressLive: editData.addressLive,\n\t\t\t\tphone: editData.phone,\n\t\t\t\tprofession: editData.profession,\n\t\t\t\tstudent: editData.student.id,\n\t\t\t}\n            form.setFieldsValue(newData);\n        }\n    }, [editData, formType, form, fetchStudent])\n\n    // function userExists(username) {\n    //     return allUsers?.allUsers.some(function(el) {\n    //         if (formType === \"edit\" && editData.user.username === username) {\n    //             return false;\n    //         } else {\n    //             return el.username === username;\n    //         }\n    //     }); \n    // }\n\n    const phoneRegEx = new RegExp(/^[7-9][0-9]{3}[0-9]{4}$/u);\n\n    function onFinish (values) {\n        if (formType === 'edit') {\n            values.id = editData.id\n            updateParent({ variables: values})\n        } else {\n            createParent({ variables: values});\n        }\n    };\n\n    const onSearch = value => {\n        if (value !== '') {\n            fetchStudent({ variables: { offset: 0, limit: 99999999, filter: value } })\n        }\n    }\n\n    return (\n        <Spin spinning={createLoading || editLoading} tip=\"Ачааллаж байна...\">\n            <Form  \n                id=\"StudentForm\"\n                layout={'vertical'}\n                form={form}\n                name=\"control-hooks\"\n                onFinish={onFinish}\n            >\n                <Row gutter={[16, 24]}>\n                    <Col className=\"gutter-row\" span={12}>\n                        <Form.Item name=\"familyName\" label={<IntlMessage id=\"familyName\" />} rules={[\n                            {\n                                required: true,\n                                message: <IntlMessage id=\"form.required\" />\n                            },\n                        ]}>\n                            <Input/>\n                        </Form.Item>\n                        <Form.Item name=\"profession\" label={<IntlMessage id=\"profession\" />} rules={[\n                            {\n                                required: true,\n                                message: <IntlMessage id=\"form.required\" />\n                            },\n                        ]}>\n                            <Input/>\n                        </Form.Item>\n                        <Form.Item name=\"address\" label={<IntlMessage id=\"address\" />} rules={[\n                            {\n                                required: true,\n                                message: <IntlMessage id=\"form.required\" />\n                            },\n                        ]}>\n                            <TextArea rows={2}/>\n                        </Form.Item>\n                    </Col>\n                    <Col className=\"gutter-row\" span={12}>\n                        <Form.Item name=\"name\" label={<IntlMessage id=\"name\" />} rules={[\n                            {\n                                required: true,\n                                message: <IntlMessage id=\"form.required\" />\n                            },\n                        ]}>\n                            <Input/>\n                        </Form.Item>\n                        <Form.Item name=\"student\" label={<IntlMessage id=\"student\" />} rules={[\n                            {\n                                required: true,\n                                message: <IntlMessage id=\"form.required\" />\n                            },\n                        ]}>\n                            <Select\n                                showSearch\n                                filterOption={false}\n                                notFoundContent={\n                                    studentLoading ? <Loading cover='content' /> \n                                    : <Empty image={Empty.PRESENTED_IMAGE_SIMPLE} />\n                                }\n                                onSearch={onSearch}\n                            >\n                                { studentData.map((item, index) => (\n                                    <Option value={item.id} key={index} > {item.familyName} {item.name} / {item.studentCode} </Option>\n                                ))}\n                            </Select>\n                        </Form.Item>\n                        <Form.Item name=\"phone\" label={<IntlMessage id=\"phone1\" />} rules={[\n                            {\n                                required: true,\n                                message: <IntlMessage id=\"form.required\" />\n                            },\n                            {\n                                validator(rule, value) {\n                                    if (phoneRegEx.test(value)) {\n                                        return Promise.resolve();\n                                    }\n                                    return Promise.reject('Утасны дугаар буруу байна!');\n                                },\n                            }\n                        ]}>\n                            <Input/>\n                        </Form.Item>\n                    </Col>\n                </Row>\n            </Form>\n        </Spin>\n    );\n};\n\nexport default StudentForm","import React, { useState, useEffect } from 'react'\nimport { Modal, message, Button } from 'antd';\nimport { DeleteTwoTone, EditTwoTone } from '@ant-design/icons';\nimport utils from 'utils'\nimport ParentForm from './form'\nimport { useLazyQuery, useMutation } from '@apollo/client';\nimport { DELETE_PARENT } from 'graphql/delete';\nimport { ALL_PARENTS } from 'graphql/all';\nimport IntlMessage from 'components/util-components/IntlMessage';\nimport AsyncTable from 'components/shared-components/AsyncTable';\n\nfunction  StudentsTable (props) {\n\n    const [count, setCount] = useState(1);\n    \n\tconst [list, setList] = useState([])\n\n\tconst [isModalVisible, setIsModalVisible] = useState(false);\n\tconst [editData, setEditData] = useState([]);\n\tconst [formType, setFormType] = useState(\"\");\n\n\tconst [fetchData, { loading, refetch }] = useLazyQuery(ALL_PARENTS, {\n        fetchPolicy: 'network-only',\n        onCompleted: data => {\n            setCount(data.count.count);\n            setList(data.allParents);\n        }\n\t});\n\n    useEffect(() => {\n        fetchData({ variables: { offset: 0, limit: 9, filter: ''} })\n    }, [fetchData])\n\n    const showModal = () => {\n\t\tsetFormType(\"create\");\n      \tsetIsModalVisible(true);\n    };\n\n    const handleCancel = () => {\n      setIsModalVisible(false);\n    };\n\n\tconst editRow = row => {\n\t\tsetEditData(row);\n\t\tsetFormType(\"edit\");\n\t\tsetIsModalVisible(true);\n\t};\n\n\tconst { confirm } = Modal;\n\n\tconst [deleteStudent] = useMutation(DELETE_PARENT, {\n\t\trefetchQueries: [ALL_PARENTS],\n\t\tonCompleted: data => {\n            message.success('Амжилттай устлаа');\n\t\t}\n\t});\n\n\tfunction deleteRow(row) {\n\t\tconfirm({\n            title: \"Устгах уу?\",\n            okText: \"Устгах\",\n            okType: 'danger',\n            cancelText: \"Болих\",\n            onOk() {\n                deleteStudent({ variables: { id: row.id } }); \n            },\n\t\t});\n\t}\n\n\tconst tableColumns = [\n\t\t{\n\t\t\tkey: 'familyName',\n\t\t\ttitle: <IntlMessage id=\"familyName\" />,\n\t\t\tdataIndex: 'familyName',\n\t\t\twidth: '10vw',\n\t\t\tsorter: (a, b) => utils.antdTableSorter(a, b, 'familyName')\n\t\t},\n\t\t{\n\t\t\tkey: 'name',\n\t\t\ttitle: <IntlMessage id=\"name\" />,\n\t\t\tdataIndex: 'name',\n\t\t\twidth: '10vw',\n\t\t\tsorter: (a, b) => utils.antdTableSorter(a, b, 'name')\n\t\t},\n\t\t{\n\t\t\tkey: 'profession',\n\t\t\ttitle: <IntlMessage id=\"profession\" />,\n\t\t\tdataIndex: 'profession',\n\t\t\tsorter: (a, b) => utils.antdTableSorter(a, b, 'profession')\n\t\t},\n\t\t{\n\t\t\tkey: 'phone',\n\t\t\ttitle: <IntlMessage id=\"phone1\" />,\n\t\t\tdataIndex: 'phone',\n\t\t\twidth: '10vw',\n\t\t\tsorter: (a, b) => utils.antdTableSorter(a, b, 'phone'),\n\t\t\trender: text => <span>{text.substr(0, 4) + `-` + text.substr(4, 9)}</span>,\n\t\t},\n\t\t{\n            title: <IntlMessage id=\"student\" />,\n            children: [\n                {\n                    key: 'student',\n                    title: <IntlMessage id=\"student\" />,\n                    dataIndex: 'student',\n                    width: '10vw',\n                    sorter: (a, b) => utils.antdTableSorter(a, b, 'student'),\n                    render: text => <span>{text.familyName} {text.name}</span>,\n                },\n                {\n                    key: 'studentCode',\n                    title: <IntlMessage id=\"studentCode\" />,\n                    dataIndex: ['student', 'studentCode'],\n                    width: '10vw',\n                    sorter: (a, b) => utils.antdTableSorter(a, b, 'studentCode'),\n                }\n            ]\n\t\t},\n\t];\n\n\tif (props.permissions.edit === true || props.permissions.destroy === true) {\n\t\ttableColumns.push(\n\t\t\t{\n\t\t\t\tkey: 'actions',\n\t\t\t\ttitle: <IntlMessage id=\"main.action\" />,\n\t\t\t\twidth: '15vw',\n\t\t\t\tdataIndex: 'actions',\n\t\t\t\trender: (_, elm) => (\n\t\t\t\t\t<div className=\"text-center\">\n\t\t\t\t\t\t{ props.permissions.edit === true &&\n\t\t\t\t\t\t\t<Button size=\"small\" onClick={() => editRow(elm)} type=\"text\" icon={<EditTwoTone twoToneColor=\"#ffdb00\"/>} > <IntlMessage id=\"edit\" /></Button>\n\t\t\t\t\t\t}\n\t\t\t\t\t\t{ props.permissions.destroy === true &&\n\t\t\t\t\t\t\t<Button size=\"small\" onClick={() => deleteRow(elm)} type=\"text\" icon={<DeleteTwoTone twoToneColor=\"#f42f2f\"/>} > <IntlMessage id=\"delete\" /></Button>\n\t\t\t\t\t\t}\n\t\t\t\t\t</div>\n\t\t\t\t)\n\t\t\t}\n\t\t)\n\t}\n\n\treturn (\n\t\t<>\n\t\t\t<Modal \n                title={ formType === `create` ? <IntlMessage id=\"add_new\" /> : <IntlMessage id=\"edit\" />}\n                visible={isModalVisible} \n\t\t\t\twidth={'80vw'}\n\t\t\t\tokText={<IntlMessage id=\"main.okText\" />}\n\t\t\t\tcancelText={<IntlMessage id=\"main.cancelText\" />}\n\t\t\t\tonCancel={handleCancel}\n\t\t\t\tokButtonProps={{form:'StudentForm', key: 'submit', htmlType: 'submit'}}\n            >\n                <ParentForm \n\t\t\t\t\trefetch={refetch}\n\t\t\t\t\tformType={formType} \n\t\t\t\t\teditData={editData} \n\t\t\t\t\tsetIsModalVisible={setIsModalVisible}\n\t\t\t\t/>\n            </Modal>\n\t\t\t<AsyncTable \n                fetchData={fetchData}\n                loading={loading}\n                columns={tableColumns}\n                data={list}\n                count={count}\n                permissions={props.permissions}\n                showModal={showModal}\n           />\n\t\t</>\n\t)\n}\n\nexport default StudentsTable\n","import React from \"react\";\nimport ParentsTable from './table';\nimport { CheckPer } from 'hooks/checkPermission';\nimport Loading from \"components/shared-components/Loading\";\n\nconst Index = (props) => {\n\n    const create = CheckPer('add_parent');\n    const edit = CheckPer('change_parent');\n    const destroy = CheckPer('delete_parent');\n\n    const permissions = {\n        create: create,\n        edit: edit,\n        destroy: destroy\n    }\n\n    if (Object.values(permissions).indexOf('loading') > -1) {\n        return <Loading cover=\"content\" />\n    }\n\n    return (\n        <ParentsTable title={props.title} permissions={permissions} />\n    )\n}\n\nexport default Index;\n"],"names":["fetchData","loading","columns","data","permissions","showModal","useState","setFilter","alignItems","justifyContent","mobileFlex","className","placeholder","prefix","onChange","e","value","currentTarget","variables","offset","limit","filter","program","onSearch","create","onClick","type","icon","block","id","size","dataSource","rowKey","bordered","Flex","props","children","flexDirection","defaultProps","CREATE_SCHOOL","gql","CREATE_SUB_SCHOOL","CREATE_TEACHER","CREATE_EMPLOYEE","CREATE_STUDENT","CREATE_SECTION","CREATE_CLASSES","CREATE_PROGRAM","CREATE_SUBJECT","CREATE_PARENT","CREATE_EVENT_TYPE","CREATE_EVENT","DELETE_TEACHER","DELETE_EMPLOYEES","DELETE_SUBJECT","DELETE_STUDENT","DELETE_SUB_SCHOOL","DELETE_SCHOOL","DELETE_SECTION","DELETE_CLASS","DELETE_PROGRAM","DELETE_PARENT","DELETE_EVENT_TYPE","DELETE_EVENT","SELECT_STUDENT","SELECT_TEACHER","SELECT_CLASSES","SELECT_SUBJECT","SELECT_PROGRAM","SECTIONS_BY_PROGRAM","SELECT_SECTION","Option","Select","editData","formType","setIsModalVisible","setTableLoading","Form","form","TextArea","Input","studentData","setStudentData","useLazyQuery","onCompleted","allStudents","fetchStudent","studentLoading","useQuery","ALL_USERS","useMutation","refetchQueries","ALL_PARENTS","message","resetFields","createParent","createLoading","UPDATE_PARENT","updateParent","editLoading","useEffect","newData","name","familyName","address","phone","profession","student","setFieldsValue","phoneRegEx","RegExp","spinning","tip","layout","onFinish","values","gutter","span","label","IntlMessage","rules","required","rows","showSearch","filterOption","notFoundContent","Loading","cover","image","Empty","map","item","index","studentCode","validator","rule","test","Promise","resolve","reject","count","setCount","list","setList","isModalVisible","setEditData","setFormType","fetchPolicy","allParents","refetch","confirm","Modal","deleteStudent","tableColumns","key","title","dataIndex","width","sorter","a","b","utils","render","text","substr","edit","destroy","push","_","elm","row","editRow","EditTwoTone","twoToneColor","okText","okType","cancelText","onOk","deleteRow","DeleteTwoTone","visible","onCancel","okButtonProps","htmlType","AsyncTable","CheckPer","Object","indexOf"],"sourceRoot":""}