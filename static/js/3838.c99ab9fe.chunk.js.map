{"version":3,"file":"static/js/3838.c99ab9fe.chunk.js","mappings":"6HAGMA,EAAO,SAAAC,GACZ,IAAQC,EAA+ED,EAA/EC,SAAUC,EAAqEF,EAArEE,UAAWC,EAA0DH,EAA1DG,WAAYC,EAA8CJ,EAA9CI,eAAgBC,EAA8BL,EAA9BK,WAAYC,EAAkBN,EAAlBM,cAErE,OACC,gBAAKJ,UAAS,UAFiBG,EAAa,SAAW,YAEjB,YAAIH,EAAS,YAAII,EAAe,QAAUA,EAAgB,GAAE,YAAIH,EAAY,eAAiBA,EAAY,GAAE,YAAIC,EAAgB,mBAAqBA,EAAgB,IAAM,SAC9MH,GAGJ,EAUAF,EAAKQ,aAAe,CACnBF,YAAY,EACZC,cAAe,MACfJ,UAAW,IAIZ,K,ooBC1BaM,GAAeC,EAAAA,EAAAA,IAAG,4jBAoDlBC,IA3BiBD,EAAAA,EAAAA,IAAG,yIASHA,EAAAA,EAAAA,IAAG,yIASGA,EAAAA,EAAAA,IAAG,mJASdA,EAAAA,EAAAA,IAAG,8IAmBfE,IATmBF,EAAAA,EAAAA,IAAG,gLAScA,EAAAA,EAAAA,IAAG,wvBAmDvCG,IArB4BH,EAAAA,EAAAA,IAAG,mbAqBHA,EAAAA,EAAAA,IAAG,qJAS/BI,GAAgBJ,EAAAA,EAAAA,IAAG,2xBAuCnBK,GAAeL,EAAAA,EAAAA,IAAG,qhCAiDlBM,GAAeN,EAAAA,EAAAA,IAAG,srDA8ElBO,GAAYP,EAAAA,EAAAA,IAAG,qIAUfQ,GAAgBR,EAAAA,EAAAA,IAAG,+NAcnBS,GAAeT,EAAAA,EAAAA,IAAG,oZAsBlBU,GAAcV,EAAAA,EAAAA,IAAG,6IAUjBW,GAAkBX,EAAAA,EAAAA,IAAG,6NAcrBY,GAAeZ,EAAAA,EAAAA,IAAG,goBAkClBa,GAAeb,EAAAA,EAAAA,IAAG,ulCA8ClBc,GAAgBd,EAAAA,EAAAA,IAAG,gIAQnBe,GAAkBf,EAAAA,EAAAA,IAAG,wIASrBgB,GAAchB,EAAAA,EAAAA,IAAG,4bAmBjBiB,GAAqBjB,EAAAA,EAAAA,IAAG,imBA8BxBkB,GAAsBlB,EAAAA,EAAAA,IAAG,8gCAkDzBmB,GAAkBnB,EAAAA,EAAAA,IAAG,mJAUrBoB,GAAapB,EAAAA,EAAAA,IAAG,yTAgChBqB,KAdqBrB,EAAAA,EAAAA,IAAG,yQAcGA,EAAAA,EAAAA,IAAG,o4D,4PC7lB9BsB,GAA2BtB,EAAAA,EAAAA,IAAG,8OAU9BuB,GAAwBvB,EAAAA,EAAAA,IAAG,kN,sFCExC,SAASwB,EAAa,GAAwF,IAAtFC,EAAI,EAAJA,KAAMC,EAAO,EAAPA,QAASC,EAAe,EAAfA,gBAAiBC,EAAqB,EAArBA,sBAAuBC,EAAK,EAALA,MAAgBC,GAAF,EAAPC,QAAmB,EAAVD,YAa3F,OAA0BE,EAAAA,EAAAA,GAASV,EAA0B,CACzDW,UAAW,CAAER,KAAMA,EAAMC,QAASA,GAClCQ,aAAc,IACdC,YAAa,SAAAC,GACLA,EAAIC,sBAAsBC,YAftC,SAAmBT,EAAOU,GACtBT,GAAW,SAAAU,GACP,IAAMC,GAAU,OAAOD,GAEjBE,EAAaD,EAAWE,OAAOd,EAAO,GAAG,GAG/C,OADAY,EAAWG,QAAQF,GACZD,CACX,GACF,CAOUI,CAAShB,EAEjB,IAPIiB,EAAI,EAAJA,KAeR,OAfqB,EAAPC,SAgBH,SAACC,EAAA,EAAO,KAIf,SAAC,IAAM,CACHvD,WAAWwD,EAAAA,EAAAA,IACPH,EAAKT,sBAAsBa,YAAc,eAAiBJ,EAAKT,sBAAsBC,WAAa,gBAAkB,cAExHa,QAAS,kBAbbvB,SACAD,EAAgBmB,EAAKT,sBAYM,EACvBe,KAAK,OACLC,MAAM,SAACC,EAAA,EAAU,CAAC7D,UAAU,gCAIxC,CAEe,SAAS8D,IAEpB,IAAQC,GAASC,EAAAA,EAAAA,YAAWC,EAAAA,GAApBF,KAER,GAAwBG,EAAAA,EAAAA,UAAS,GAAE,eAA5BC,EAAI,KAAEC,EAAO,KACpB,GAA8BF,EAAAA,EAAAA,WACP,IAAnBH,EAAKM,UAAqB,IAAM,IACnC,eAFMC,EAAO,KAAEC,EAAU,KAG1B,GAAwBL,EAAAA,EAAAA,UAASM,MAASC,OAAO,eAAc,eAAxDzC,EAAI,KAAE0C,EAAO,KACpB,GAA4CR,EAAAA,EAAAA,WAAS,GAAM,eAApDS,EAAc,KAAEC,EAAiB,KACxC,GAAwCV,EAAAA,EAAAA,UAAS,CAAC,GAAE,eAA7CW,EAAY,KAAE3C,EAAe,KACpC,GAA8BgC,EAAAA,EAAAA,UAAS,IAAG,eAAnC5B,EAAO,KAAED,EAAU,KAEpByC,EAAc,CAChBC,iBAAiBC,EAAAA,EAAAA,GAAS,oBAG9B,GAA0BzC,EAAAA,EAAAA,GAASX,EAAAA,GAAyB,CACxDY,UAAW,CAAE2B,KAAMA,EAAMG,QAASA,EAASW,OAAQ,IACnDvC,YAAa,SAAAC,GACTN,EAAWM,EAAIuC,sBAAsB5C,QACzC,IAJIe,EAAI,EAAJA,KAAMC,EAAO,EAAPA,QAOd,GAA6D6B,EAAAA,EAAAA,GAAYrD,EAAuB,CAC5FY,YAAa,SAAAC,GACTyC,EAAAA,GAAAA,QAAgB,0DAChBjD,GACJ,IACF,eALKkD,EAAoB,KAAaC,EAAe,KAAxBhC,QAY/B,SAASnB,IACLyC,GAAkB,SAAAW,GAAQ,OAAKA,CAAQ,GAC3C,CAEA,IAAMC,GAAe,CACjB,CACIC,IAAK,cACLC,OAAO,SAACC,EAAA,EAAW,CAACC,GAAG,gBACvBC,UAAW,cACXC,MAAO,MACPC,OAAQ,SAACC,EAAGC,GAAC,OAAKC,EAAAA,GAAAA,gBAAsBF,EAAGC,EAAG,cAAc,GAEhE,CACIR,IAAK,UACLC,OAAO,SAACC,EAAA,EAAW,CAACC,GAAG,YACvBC,UAAW,CAAC,UAAW,WACvBC,MAAO,OACPC,OAAQ,SAACC,EAAGC,GAAC,OAAKC,EAAAA,GAAAA,gBAAsBF,EAAGC,EAAG,UAAU,EACxDE,OAAQ,SAACC,EAAGC,GAAG,OACX,4BAAOA,EAAIC,QAAQA,QAAO,MAAKD,EAAIE,QAAQA,QAAO,KAAE,oBAAa,GAGzE,CACId,IAAK,aACLC,OAAO,SAACC,EAAA,EAAW,CAACC,GAAG,eACvBC,UAAW,aACXC,MAAO,OACPC,OAAQ,SAACC,EAAGC,GAAC,OAAKC,EAAAA,GAAAA,gBAAsBF,EAAGC,EAAG,aAAa,GAE/D,CACIR,IAAK,OACLC,OAAO,SAACC,EAAA,EAAW,CAACC,GAAG,SACvBC,UAAW,OACXC,MAAO,OACPC,OAAQ,SAACC,EAAGC,GAAC,OAAKC,EAAAA,GAAAA,gBAAsBF,EAAGC,EAAG,OAAO,GAEzD,CACIR,IAAK,KACLI,UAAW,KACXC,MAAO,OACPK,OAAQ,SAAClE,EAASuE,EAAKpE,GAAK,OACxB,SAACL,EAAY,CACTE,QAASA,EACTD,KAAMA,EACNE,gBAAiBA,EACjBC,sBAAuBA,EACvBC,MAAOA,EACPE,QAASA,EACTD,WAAYA,GACd,IAWd,OACI,UAAC,IAAI,YACD,SAAC,IAAK,CACFoE,QAAS9B,EACT+B,SAAUvE,EACVwE,QACI,gCACK7B,EAAYC,kBACT,SAAC,IAAM,CACHrB,QAAS,kBAAM2B,EAAqB,CAAE7C,UAAW,CAAEoE,KAAM/B,EAAa+B,OAAS,EAC/EjD,KAAK,UACLL,QAASgC,EAAgB,mGAIjC,SAAC,IAAM,CACH5B,QAASvB,EACTwB,KAAK,UAAS,yCAKzB,UAED,iBAAK3D,UAAU,cAAa,WACxB,gBACIA,UAAU,SACV6G,IAAI,SACJC,IAAG,oEAA+DjC,EAAa+B,KAAI,yBAEvF,0BAAO/B,EAAa+B,aAG5B,SAAC/G,EAAA,EAAI,CAACI,WAAW,SAASC,eAAe,UAAUC,YAAY,EAAM,UACjE,SAACN,EAAA,EAAI,CAACG,UAAU,OAAOG,YAAY,EAAM,UACrC,gBAAKH,UAAU,eAAc,UACzB,SAAC,IAAU,CACP+G,aAAcvC,MACdwC,SAAU,SAAAC,GA5ClC,IAAsBC,KA4C8BD,IA1C5CvC,EAAQF,IAAO0C,GAAOzC,OAAO,cA0CiB,WAK9C,SAAC,IAAK,CACF0C,KAAK,QACLC,QAAS5B,GACT6B,WAAY/E,EACZgF,OAAO,KACPC,UAAQ,EACRjE,QAASA,EACTkE,WAAY,CACRC,QAAStD,EACTuD,SAAUpD,EACVqD,iBAAiB,EACjBC,MAAW,OAAJvE,QAAI,IAAJA,OAAI,EAAJA,EAAM6B,sBAAsB2C,YAEvCb,SAzHZ,SAA2BQ,EAAYM,EAAS/B,GAC5C3B,EAAQoD,EAAWC,SACnBlD,EAAWiD,EAAWE,SAC1B,MA0HJ,C","sources":["components/shared-components/Flex/index.js","graphql/all.js","graphql/handover.js","views/app-views/handover/index.js"],"sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\n\nconst Flex = props => {\n\tconst { children, className, alignItems, justifyContent, mobileFlex, flexDirection } = props\n\tconst getFlexResponsive = () => mobileFlex ? 'd-flex' : 'd-md-flex'\n\treturn (\n\t\t<div className={`${getFlexResponsive()} ${className} ${flexDirection?('flex-' + flexDirection): ''} ${alignItems?('align-items-' + alignItems):''} ${justifyContent?('justify-content-' + justifyContent):''}` }>\n\t\t\t{children}\n\t\t</div>\n\t)\n}\n\nFlex.propTypes = {\n\tclassName: PropTypes.string,\n\talignItems: PropTypes.string,\n\tflexDirection: PropTypes.string,\n\tjustifyContent: PropTypes.string,\n\tmobileFlex: PropTypes.bool\n}\n\nFlex.defaultProps = {\n\tmobileFlex: true,\n\tflexDirection: 'row',\n\tclassName: ''\n};\n\n\nexport default Flex\n","import { gql } from '@apollo/client';\n\nexport const ALL_SUBJECTS = gql`\n    query allSubjects ($offset: Int!, $limit: Int!, $filter: String) {\n        allSubjects (offset: $offset, limit: $limit, filter: $filter) {\n            id\n            school {\n                id\n                name\n            }\n            subSchool {\n                id\n                name\n            }\n            subject \n            credit\n            content\n            createUserid{\n                teacher{\n                    familyName\n                    name\n                }\n            }\n        }\n    }\n`;\n\nexport const TEACHER_STATUS = gql`\n    query allTeacherStatuss {\n        allTeacherStatuss {\n            id\n            name\n        }\n    }\n`\n\nexport const STUDENT_STATUS = gql`\n    query allStudentStatuss {\n        allStudentStatuss {\n            id\n            name\n        }\n    }\n`\n\nexport const STUDENT_STATUS_EXTRA = gql`\n    query allStudentStatusExtras {\n        allStudentStatusExtras {\n            id\n            name\n        }\n    }\n`\n\nexport const ALL_USERS = gql`\n    query allUsers {\n        allUsers {\n            id\n            username\n            email\n        }\n    }\n`;\n\nexport const USER_BY_USERNAME = gql`\n    query userByUsername($username: String!) {\n        userByUsername(username: $username) {\n            id\n            username\n        }\n    }\n`;\n\nexport const ALL_EMPLOYEES_ATTANDANCE_BY_RANGE = gql`\n    query employeesAttandanceByRange ($startDate: DateTime!, $endDate: DateTime!) {\n        employeesAttandanceByRange (startDate: $startDate, endDate: $endDate) {\n            id\n            isIn\n            isOut\n            timeIn\n            timeOut\n            user {\n                id\n                isTeacher\n                isEmployee\n                teacher {\n                    familyName\n                    name\n                    teacherCode\n                }\n                employee {\n                    familyName\n                    name\n                    employeeCode\n                }\n                groups {\n                    name\n                }\n            }\n        }\n    }\n`\n\nexport const ALL_TEACHER_AND_EMPLOYESS = gql`\n    query allAttendaceEmployees {\n        allAttendaceEmployees {\n            username\n            email\n            isTeacher\n            isEmployee\n            teacher {\n                teacherCode\n                familyName\n                name\n            }\n            employee {\n                employeeCode\n                familyName\n                name\n            }\n        }\n    }\n`;\n\nexport const ALL_EMPLOYEES_COMPARTMENT = gql`\n    query allEmployeesCompartment {\n        allEmployeesCompartment {\n            id\n            name\n        }\n    }\n`\n\nexport const ALL_EMPLOYEES = gql`\n    query allEmployees ($filter: String) {\n        allEmployees (filter: $filter) {\n            id\n            user {\n                id\n                username\n                email\n                groups {\n                    name\n                }\n            }\n            compartment {\n                id\n                name\n            }\n            employeeCode\n            familyName\n            name\n            registerNo\n            photo\n            phone\n            phone2\n            address\n            sex\n            birthdate\n            birthCity {\n                id\n            }\n            birthDistrict {\n                id\n            }\n            status {\n                id\n            }\n        }\n    }\n`\n\nexport const ALL_TEACHERS = gql`\n  \tquery allTeachers ($offset: Int!, $limit: Int!, $filter: String) {\n        allTeachers (offset: $offset, limit: $limit, filter: $filter) {\n            id\n            user {\n                id\n                username\n                email\n            }\n            teacherCode\n            degree{\n                id\n            }\n            access\n            familyName\n            name\n            registerNo\n            photo\n            phone\n            phone2\n            address\n            joinDate\n            joinBefore\n            sex\n            birthdate\n            birthCity {\n                id\n                name\n            }\n            birthDistrict {\n                id\n                name\n            }\n            status {\n                id\n                name\n            }\n            school {\n                id\n                name\n            }\n            subSchool {\n                id\n                name\n            }\n        }\n\t}\n`;\n\nexport const ALL_STUDENTS = gql`\n  \tquery allStudents ($filter: String, $program: Int, $classes: Int, $section: Int) {\n        allStudents (filter: $filter, program: $program, classes: $classes, section: $section) {\n            id\n            user {\n                id\n                username\n                email\n            }\n            studentCode\n            surname\n            familyName\n            name\n            religion\n            registerNo\n            nationality\n            state\n            photo\n            phone\n            address\n            bodyIndex\n            vaccine\n            drug\n            allergies\n            underlyingDisease\n            bloodType\n            etc\n            activity {\n                id\n                name\n            }\n            joinDate\n            sex\n            birthdate\n            classtime {\n                id\n                name\n            }\n            birthCity {\n                id\n                name\n            }\n            birthDistrict {\n                id\n                name\n            }\n            status {\n                id\n                name\n            }\n            statusExtra {\n                id\n                name\n            }\n            school {\n                id\n                name\n            }\n            classes {\n                id\n                classes\n            }\n            section {\n                id\n                section\n            }\n            program {\n                id\n                program\n            }\n            joinSchoolyear {\n                id\n                schoolyear\n            }\n        }\n    }\n`;\n\nexport const ALL_CITYS = gql`\n  \tquery allCitys{\n        allCitys {\n            id\n            name\n            code\n        }\n\t}\n`;\n\nexport const ALL_DISTRICTS = gql`\n    query allDistricts {\n        allDistricts {\n            id\n            code\n            name\n            cityID {\n                id\n                name\n            }\n        }\n    }\n`\n\nexport const ALL_PROGRAMS = gql`\n  \tquery allPrograms{\n        allPrograms {\n            id\n            program\n            programMgl\n            maxStudentNum\n            school {\n                id\n                name\n            }\n            subSchool {\n                id\n                name\n            }\n            status\n            createdAt\n            updatedAt\n        }\n\t  }\n`;\n\nexport const ALL_SCHOOLS = gql`\n  \tquery allSchools {\n        allSchools {\n            id\n            name\n            nameMgl\n        }\n\t}\n`;\n\nexport const ALL_SUB_SCHOOLS = gql`\n  \tquery allSubSchools{\n        allSubSchools {\n            id\n            name\n            nameMgl\n            school {\n                id\n                name\n            }\n\t\t}\n\t}\n`;\n\nexport const ALL_SECTIONS = gql`\n    query allSections {\n        allSections {\n            id\n            section\n            classes {\n                id\n                classes\n            }\n            program {\n                id\n                program\n            }\n            teacher{\n                id\n            }\n            program {\n                id\n                program\n            }\n            subSchool {\n                id\n                name\n            }\n            school {\n                id\n                name\n            }\n            createdAt\n            updatedAt\n        }\n    }\n`\n\nexport const ALL_CLASSESS = gql`\n    query allClassess ($program: Int!, $offset: Int!, $limit: Int!, $filter: String) {\n        allClassess (program: $program, offset: $offset, limit: $limit, filter: $filter) {\n            id\n            classes\n            # classesNumeric\n            activity {\n                id\n                name\n            }\n            program {\n                id\n                program\n            }\n            subSchool {\n                id\n                name\n            }\n            school {\n                id\n                name\n            }\n            status\n            sectionSet {\n                id\n                section\n                classes {\n                    id\n                    classes\n                }\n                program {\n                    id\n                    program\n                }\n                subSchool {\n                    id\n                    name\n                }\n                school {\n                    id\n                    name\n                }\n            }\n        }\n    }\n`\nexport const ALL_CLASSTIME = gql`\n    query allClasstimes {\n        allClasstimes {\n            id\n            name\n        }\n    }\n`\nexport const ALL_SCHOOL_YEAR = gql`\n    query allSchoolyears {\n        allSchoolyears {\n            id\n            schoolyear\n        }\n    }\n`;\n\nexport const ALL_PARENTS = gql`\n    query allParents ($offset: Int!, $limit: Int!, $filter: String) {\n        allParents (offset: $offset, limit: $limit, filter: $filter) {\n            id\n            familyName\n            name\n            profession\n            phone\n            address\n            student {\n                id\n                studentCode\n                familyName\n                name\n            }\n        }\n    }\n`;\n\nexport const SECTION_BY_CLASSES = gql`\n    query sectionsByClasses ($classes: Int!) {\n        sectionsByClasses (classes: $classes) {\n            id\n            section\n            maxStudentNum\n            teacher{\n                name\n                id\n            }\n            classes {\n                id\n                classes\n            }\n            program {\n                id\n                program\n            }\n            subSchool {\n                id\n                name\n            }\n            school {\n                id\n                name\n            }\n        }\n    }\n`;\n\nexport const TRANSFER_BY_STUDENT = gql`\n    query transfersByStudent ($student: Int!) {\n        transfersByStudent (student: $student) {\n            id\n            student {\n                familyName\n                name\n                photo\n                studentCode\n            }\n            school {\n                id\n                name\n            }\n            program {\n                id\n                program\n            }\n            classes {\n                id\n                classes\n            }\n            section {\n                id\n                section\n            }\n            status {\n                id\n                name\n            }\n            statusExtra {\n                id\n                name\n            }\n            classtime {\n                id\n                name\n            }\n            activity {\n                id\n                name\n            }\n            docDate\n            docNum\n            description\n            oldData\n        }\n    }\n`;\n\nexport const ALL_EVENT_TYPES = gql`\n    query allEventTypes {\n        allEventTypes {\n            id\n            name\n            color\n        }\n    }\n`;\n\nexport const ALL_EVENTS = gql`\n    query allEvents {\n        allEvents {\n            id\n            title\n            description\n            content\n            startAt\n            endAt\n            eventType {\n                id\n                name\n                color\n            }\n        }\n    } \n`;\n\nexport const ALL_EVENTS_BY_TYPE = gql`\n    query allEventsByType ($id: Int!) {\n        allEventsByType (id: $id) {\n            id\n            title\n            description\n            content\n            startAt\n            endAt\n            eventType\n        }\n    }\n`;\n\nexport const ALL_STUDENTS_PAGINATION =  gql`\n    query allStudentsPagination ($page: Int, $perPage: Int, $filter: String = \"\") {\n        allStudentsPagination (page: $page, perPage: $perPage, filter: $filter) {\n            page\n            perPage\n            pageCount\n            totalCount\n            records {\n                id\n                user {\n                    id\n                    username\n                    email\n                }\n                studentCode\n                surname\n                familyName\n                name\n                religion\n                registerNo\n                nationality\n                state\n                photo\n                phone\n                address\n                activity {\n                    id\n                    name\n                }\n                joinDate\n                sex\n                birthdate\n                classtime {\n                    id\n                    name\n                }\n                birthCity {\n                    id\n                    name\n                }\n                birthDistrict {\n                    id\n                    name\n                }\n                status {\n                    id\n                    name\n                }\n                statusExtra {\n                    id\n                    name\n                }\n                school {\n                    id\n                    name\n                }\n                classes {\n                    id\n                    classes\n                }\n                section {\n                    id\n                    section\n                }\n                program {\n                    id\n                    program\n                }\n                joinSchoolyear {\n                    id\n                    schoolyear\n                }\n            }\n        }\n    }\n`","import { gql } from \"@apollo/client\"\n\nexport const STUDENT_HANDOVER_BY_DATE = gql`\n    query studentHandoverByDate ($date: Date, $student: ID) {\n        studentHandoverByDate (date: $date, student: $student) {\n            code\n            isSuccessed\n            isNotified\n        }\n    }\n`\n\nexport const SET_HANDOVER_SUCCSSED = gql`\n    mutation setHandOverSuccessed ($code: String!) {\n        setHandOverSuccessed (code: $code) {\n            handOver {\n                isSuccessed\n            }\n        }\n    }\n`","import React, { useContext, useState } from 'react'\nimport { useMutation, useQuery } from '@apollo/client';\nimport { Button, Card, DatePicker, Modal, Table, message } from 'antd';\nimport { ALL_STUDENTS_PAGINATION } from 'graphql/all';\nimport utils, { classNames } from 'utils'\nimport IntlMessage from 'components/util-components/IntlMessage';\nimport { SET_HANDOVER_SUCCSSED, STUDENT_HANDOVER_BY_DATE } from 'graphql/handover';\nimport moment from 'moment';\nimport Flex from 'components/shared-components/Flex';\nimport Loading from 'components/shared-components/Loading';\nimport { QrcodeIcon } from '@heroicons/react/outline';\nimport { CheckPer } from 'hooks/checkPermission';\nimport { UserContext } from 'hooks/UserContextProvider';\n\nfunction ShowHandOver({ date, student, setHandOverData, toggleModalVisibility, index, records, setRecords }) {\n\n    function moveItem (index, location){\n        setRecords(prevRecords => {\n            const newRecords = [...prevRecords];\n            \n            const itemToMove = newRecords.splice(index, 1)[0];\n            \n            newRecords.unshift(itemToMove);\n            return newRecords;\n        });\n      };\n\n    const { data, loading } = useQuery(STUDENT_HANDOVER_BY_DATE, {\n        variables: { date: date, student: student },\n        pollInterval: 10000,\n        onCompleted: res => {\n            if (res.studentHandoverByDate.isNotified) {\n                moveItem(index, 'top')\n            }\n        }\n    })\n\n    function showQR() {\n        toggleModalVisibility()\n        setHandOverData(data.studentHandoverByDate)\n    }\n\n    if (loading) {\n        return <Loading />\n    }\n\n    return (\n        <Button\n            className={classNames(\n                data.studentHandoverByDate.isSuccessed ? \"bg-green-500\" : data.studentHandoverByDate.isNotified ? \"bg-yellow-500\" : \"bg-red-500\",\n            )}\n            onClick={() => showQR()}\n            type=\"text\"\n            icon={<QrcodeIcon className='h-6 w-6 mx-auto text-white' />}\n        >\n        </Button>\n    )\n}\n\nexport default function Index() {\n\n    const { user } = useContext(UserContext)\n\n    const [page, setPage] = useState(1);\n    const [perPage, setPerPage] = useState(\n        user.isTeacher === true ? 100 : 10\n    )\n    const [date, setDate] = useState(moment().format(\"YYYY-MM-DD\"));\n    const [isModalVisible, setIsModalVisible] = useState(false);\n    const [handoverData, setHandOverData] = useState({});\n    const [records, setRecords] = useState([])\n\n    const permissions = {\n        change_handover: CheckPer('change_handover')\n    }\n\n    const { data, loading } = useQuery(ALL_STUDENTS_PAGINATION, {\n        variables: { page: page, perPage: perPage, filter: '' },\n        onCompleted: res => {\n            setRecords(res.allStudentsPagination.records)\n        }\n    });\n\n    const [setHandOverSuccessed, { loading: handoverLoading }] = useMutation(SET_HANDOVER_SUCCSSED, {\n        onCompleted: res => {\n            message.success(\"Амжилттай\")\n            toggleModalVisibility()\n        }\n    })\n\n    function handleTableChange(pagination, filters, sorter) {\n        setPage(pagination.current);\n        setPerPage(pagination.pageSize)\n    }\n\n    function toggleModalVisibility() {\n        setIsModalVisible(prevData => !prevData)\n    }\n\n    const tableColumns = [\n        {\n            key: 'studentCode',\n            title: <IntlMessage id=\"studentCode\" />,\n            dataIndex: 'studentCode',\n            width: '8vw',\n            sorter: (a, b) => utils.antdTableSorter(a, b, 'studentCode')\n        },\n        {\n            key: 'classes',\n            title: <IntlMessage id=\"classes\" />,\n            dataIndex: ['classes', 'classes'],\n            width: '10vw',\n            sorter: (a, b) => utils.antdTableSorter(a, b, 'classes'),\n            render: (_, elm) => (\n                <span>{elm.classes.classes} - {elm.section.section} <br /></span>\n            )\n        },\n        {\n            key: 'familyName',\n            title: <IntlMessage id=\"familyName\" />,\n            dataIndex: 'familyName',\n            width: '10vw',\n            sorter: (a, b) => utils.antdTableSorter(a, b, 'familyName')\n        },\n        {\n            key: 'name',\n            title: <IntlMessage id=\"name\" />,\n            dataIndex: 'name',\n            width: '10vw',\n            sorter: (a, b) => utils.antdTableSorter(a, b, 'name')\n        },\n        {\n            key: 'id',\n            dataIndex: 'id',\n            width: '25px',\n            render: (student, row, index) => (\n                <ShowHandOver\n                    student={student}\n                    date={date}\n                    setHandOverData={setHandOverData}\n                    toggleModalVisibility={toggleModalVisibility}\n                    index={index}\n                    records={records}\n                    setRecords={setRecords}\n                />\n            )\n        }\n    ]\n\n    function onDateChange(value) {\n        if (value) {\n            setDate(moment(value).format(\"YYYY-MM-DD\"))\n        }\n    }\n\n    return (\n        <Card>\n            <Modal\n                visible={isModalVisible}\n                onCancel={toggleModalVisibility}\n                footer={\n                    <>\n                        {permissions.change_handover &&\n                            <Button\n                                onClick={() => setHandOverSuccessed({ variables: { code: handoverData.code } })}\n                                type='default'\n                                loading={handoverLoading}\n                            >\n                                Баталгаажуулах\n                            </Button>}\n                        <Button\n                            onClick={toggleModalVisibility}\n                            type='primary'\n                        >\n                            Хаах\n                        </Button>\n                    </>\n                }\n            >\n                <div className='text-center'>\n                    <img\n                        className='m-auto'\n                        alt='qrcode'\n                        src={`https://chart.googleapis.com/chart?chs=177x177&cht=qr&chl=${handoverData.code}&chld=H&choe=UTF-8`}\n                    />\n                    <span>{handoverData.code}</span>\n                </div>\n            </Modal>\n            <Flex alignItems=\"center\" justifyContent=\"between\" mobileFlex={false}>\n                <Flex className=\"mb-1\" mobileFlex={false}>\n                    <div className=\"mr-md-3 mb-3\">\n                        <DatePicker\n                            defaultValue={moment()}\n                            onChange={e => onDateChange(e)}\n                        />\n                    </div>\n                </Flex>\n            </Flex>\n            <Table\n                size=\"small\"\n                columns={tableColumns}\n                dataSource={records}\n                rowKey='id'\n                bordered\n                loading={loading}\n                pagination={{\n                    current: page,\n                    pageSize: perPage,\n                    showSizeChanger: true,\n                    total: data?.allStudentsPagination.totalCount\n                }}\n                onChange={handleTableChange}\n            />\n        </Card>\n    )\n}\n"],"names":["Flex","props","children","className","alignItems","justifyContent","mobileFlex","flexDirection","defaultProps","ALL_SUBJECTS","gql","ALL_USERS","ALL_EMPLOYEES_ATTANDANCE_BY_RANGE","ALL_EMPLOYEES_COMPARTMENT","ALL_EMPLOYEES","ALL_TEACHERS","ALL_STUDENTS","ALL_CITYS","ALL_DISTRICTS","ALL_PROGRAMS","ALL_SCHOOLS","ALL_SUB_SCHOOLS","ALL_SECTIONS","ALL_CLASSESS","ALL_CLASSTIME","ALL_SCHOOL_YEAR","ALL_PARENTS","SECTION_BY_CLASSES","TRANSFER_BY_STUDENT","ALL_EVENT_TYPES","ALL_EVENTS","ALL_STUDENTS_PAGINATION","STUDENT_HANDOVER_BY_DATE","SET_HANDOVER_SUCCSSED","ShowHandOver","date","student","setHandOverData","toggleModalVisibility","index","setRecords","records","useQuery","variables","pollInterval","onCompleted","res","studentHandoverByDate","isNotified","location","prevRecords","newRecords","itemToMove","splice","unshift","moveItem","data","loading","Loading","classNames","isSuccessed","onClick","type","icon","QrcodeIcon","Index","user","useContext","UserContext","useState","page","setPage","isTeacher","perPage","setPerPage","moment","format","setDate","isModalVisible","setIsModalVisible","handoverData","permissions","change_handover","CheckPer","filter","allStudentsPagination","useMutation","message","setHandOverSuccessed","handoverLoading","prevData","tableColumns","key","title","IntlMessage","id","dataIndex","width","sorter","a","b","utils","render","_","elm","classes","section","row","visible","onCancel","footer","code","alt","src","defaultValue","onChange","e","value","size","columns","dataSource","rowKey","bordered","pagination","current","pageSize","showSizeChanger","total","totalCount","filters"],"sourceRoot":""}