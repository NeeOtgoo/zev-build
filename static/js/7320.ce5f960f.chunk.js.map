{"version":3,"file":"static/js/7320.ce5f960f.chunk.js","mappings":"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","sources":["graphql/all.js","graphql/select.js","views/app-views/live/form.js"],"sourcesContent":["import { gql } from '@apollo/client';\n\nexport const ALL_SUBJECTS = gql`\n    query allSubjects ($offset: Int!, $limit: Int!, $filter: String) {\n        allSubjects (offset: $offset, limit: $limit, filter: $filter) {\n            id\n            school {\n                id\n                name\n            }\n            subSchool {\n                id\n                name\n            }\n            subject \n            credit\n            content\n            createUserid{\n                teacher{\n                    familyName\n                    name\n                }\n            }\n        }\n    }\n`;\n\nexport const TEACHER_STATUS = gql`\n    query allTeacherStatuss {\n        allTeacherStatuss {\n            id\n            name\n        }\n    }\n`\n\nexport const STUDENT_STATUS = gql`\n    query allStudentStatuss {\n        allStudentStatuss {\n            id\n            name\n        }\n    }\n`\n\nexport const STUDENT_STATUS_EXTRA = gql`\n    query allStudentStatusExtras {\n        allStudentStatusExtras {\n            id\n            name\n        }\n    }\n`\n\nexport const ALL_USERS = gql`\n    query allUsers {\n        allUsers {\n            id\n            username\n            email\n        }\n    }\n`;\n\nexport const USER_BY_USERNAME = gql`\n    query userByUsername($username: String!) {\n        userByUsername(username: $username) {\n            id\n            username\n        }\n    }\n`;\n\nexport const ALL_EMPLOYEES_ATTANDANCE_BY_RANGE = gql`\n    query employeesAttandanceByRange ($startDate: DateTime!, $endDate: DateTime!) {\n        employeesAttandanceByRange (startDate: $startDate, endDate: $endDate) {\n            id\n            isIn\n            isOut\n            timeIn\n            timeOut\n            user {\n                id\n                isTeacher\n                isEmployee\n                teacher {\n                    familyName\n                    name\n                    teacherCode\n                }\n                employee {\n                    familyName\n                    name\n                    employeeCode\n                }\n                groups {\n                    name\n                }\n            }\n        }\n    }\n`\n\nexport const ALL_TEACHER_AND_EMPLOYESS = gql`\n    query allAttendaceEmployees {\n        allAttendaceEmployees {\n            username\n            email\n            isTeacher\n            isEmployee\n            teacher {\n                teacherCode\n                familyName\n                name\n            }\n            employee {\n                employeeCode\n                familyName\n                name\n            }\n        }\n    }\n`;\n\nexport const ALL_EMPLOYEES_COMPARTMENT = gql`\n    query allEmployeesCompartment {\n        allEmployeesCompartment {\n            id\n            name\n        }\n    }\n`\n\nexport const ALL_EMPLOYEES = gql`\n    query allEmployees ($filter: String) {\n        allEmployees (filter: $filter) {\n            id\n            user {\n                id\n                username\n                email\n                groups {\n                    name\n                }\n            }\n            compartment {\n                id\n                name\n            }\n            employeeCode\n            familyName\n            name\n            registerNo\n            photo\n            phone\n            phone2\n            address\n            sex\n            birthdate\n            birthCity {\n                id\n            }\n            birthDistrict {\n                id\n            }\n            status {\n                id\n            }\n        }\n    }\n`\n\nexport const ALL_TEACHERS = gql`\n  \tquery allTeachers ($offset: Int!, $limit: Int!, $filter: String) {\n        allTeachers (offset: $offset, limit: $limit, filter: $filter) {\n            id\n            user {\n                id\n                username\n                email\n            }\n            teacherCode\n            degree{\n                id\n            }\n            access\n            familyName\n            name\n            registerNo\n            photo\n            phone\n            phone2\n            address\n            joinDate\n            joinBefore\n            sex\n            birthdate\n            birthCity {\n                id\n                name\n            }\n            birthDistrict {\n                id\n                name\n            }\n            status {\n                id\n                name\n            }\n            school {\n                id\n                name\n            }\n            subSchool {\n                id\n                name\n            }\n        }\n\t}\n`;\n\nexport const ALL_STUDENTS = gql`\n  \tquery allStudents ($filter: String, $program: Int, $classes: Int, $section: Int) {\n        allStudents (filter: $filter, program: $program, classes: $classes, section: $section) {\n            id\n            user {\n                id\n                username\n                email\n            }\n            studentCode\n            surname\n            familyName\n            name\n            religion\n            registerNo\n            nationality\n            state\n            photo\n            phone\n            address\n            bodyIndex\n            vaccine\n            drug\n            allergies\n            underlyingDisease\n            bloodType\n            etc\n            activity {\n                id\n                name\n            }\n            joinDate\n            sex\n            birthdate\n            classtime {\n                id\n                name\n            }\n            birthCity {\n                id\n                name\n            }\n            birthDistrict {\n                id\n                name\n            }\n            status {\n                id\n                name\n            }\n            statusExtra {\n                id\n                name\n            }\n            school {\n                id\n                name\n            }\n            classes {\n                id\n                classes\n            }\n            section {\n                id\n                section\n            }\n            program {\n                id\n                program\n            }\n            joinSchoolyear {\n                id\n                schoolyear\n            }\n        }\n    }\n`;\n\nexport const ALL_CITYS = gql`\n  \tquery allCitys{\n        allCitys {\n            id\n            name\n            code\n        }\n\t}\n`;\n\nexport const ALL_DISTRICTS = gql`\n    query allDistricts {\n        allDistricts {\n            id\n            code\n            name\n            cityID {\n                id\n                name\n            }\n        }\n    }\n`\n\nexport const ALL_PROGRAMS = gql`\n  \tquery allPrograms{\n        allPrograms {\n            id\n            program\n            programMgl\n            maxStudentNum\n            school {\n                id\n                name\n            }\n            subSchool {\n                id\n                name\n            }\n            status\n            createdAt\n            updatedAt\n        }\n\t  }\n`;\n\nexport const ALL_SCHOOLS = gql`\n  \tquery allSchools {\n        allSchools {\n            id\n            name\n            nameMgl\n        }\n\t}\n`;\n\nexport const ALL_SUB_SCHOOLS = gql`\n  \tquery allSubSchools{\n        allSubSchools {\n            id\n            name\n            nameMgl\n            school {\n                id\n                name\n            }\n\t\t}\n\t}\n`;\n\nexport const ALL_SECTIONS = gql`\n    query allSections {\n        allSections {\n            id\n            section\n            classes {\n                id\n                classes\n            }\n            program {\n                id\n                program\n            }\n            teacher{\n                id\n            }\n            program {\n                id\n                program\n            }\n            subSchool {\n                id\n                name\n            }\n            school {\n                id\n                name\n            }\n            createdAt\n            updatedAt\n        }\n    }\n`\n\nexport const ALL_CLASSESS = gql`\n    query allClassess ($program: Int!, $offset: Int!, $limit: Int!, $filter: String) {\n        allClassess (program: $program, offset: $offset, limit: $limit, filter: $filter) {\n            id\n            classes\n            # classesNumeric\n            activity {\n                id\n                name\n            }\n            program {\n                id\n                program\n            }\n            subSchool {\n                id\n                name\n            }\n            school {\n                id\n                name\n            }\n            status\n            sectionSet {\n                id\n                section\n                classes {\n                    id\n                    classes\n                }\n                program {\n                    id\n                    program\n                }\n                subSchool {\n                    id\n                    name\n                }\n                school {\n                    id\n                    name\n                }\n            }\n        }\n    }\n`\nexport const ALL_CLASSTIME = gql`\n    query allClasstimes {\n        allClasstimes {\n            id\n            name\n        }\n    }\n`\nexport const ALL_SCHOOL_YEAR = gql`\n    query allSchoolyears {\n        allSchoolyears {\n            id\n            schoolyear\n        }\n    }\n`;\n\nexport const ALL_PARENTS = gql`\n    query allParents ($offset: Int!, $limit: Int!, $filter: String) {\n        allParents (offset: $offset, limit: $limit, filter: $filter) {\n            id\n            familyName\n            name\n            profession\n            phone\n            address\n            student {\n                id\n                studentCode\n                familyName\n                name\n            }\n        }\n    }\n`;\n\nexport const SECTION_BY_CLASSES = gql`\n    query sectionsByClasses ($classes: Int!) {\n        sectionsByClasses (classes: $classes) {\n            id\n            section\n            maxStudentNum\n            teacher{\n                name\n                id\n            }\n            classes {\n                id\n                classes\n            }\n            program {\n                id\n                program\n            }\n            subSchool {\n                id\n                name\n            }\n            school {\n                id\n                name\n            }\n        }\n    }\n`;\n\nexport const TRANSFER_BY_STUDENT = gql`\n    query transfersByStudent ($student: Int!) {\n        transfersByStudent (student: $student) {\n            id\n            student {\n                familyName\n                name\n                photo\n                studentCode\n            }\n            school {\n                id\n                name\n            }\n            program {\n                id\n                program\n            }\n            classes {\n                id\n                classes\n            }\n            section {\n                id\n                section\n            }\n            status {\n                id\n                name\n            }\n            statusExtra {\n                id\n                name\n            }\n            classtime {\n                id\n                name\n            }\n            activity {\n                id\n                name\n            }\n            docDate\n            docNum\n            description\n            oldData\n        }\n    }\n`;\n\nexport const ALL_EVENT_TYPES = gql`\n    query allEventTypes {\n        allEventTypes {\n            id\n            name\n            color\n        }\n    }\n`;\n\nexport const ALL_EVENTS = gql`\n    query allEvents {\n        allEvents {\n            id\n            title\n            description\n            content\n            startAt\n            endAt\n            eventType {\n                id\n                name\n                color\n            }\n        }\n    } \n`;\n\nexport const ALL_EVENTS_BY_TYPE = gql`\n    query allEventsByType ($id: Int!) {\n        allEventsByType (id: $id) {\n            id\n            title\n            description\n            content\n            startAt\n            endAt\n            eventType\n        }\n    }\n`;\n\nexport const ALL_STUDENTS_PAGINATION =  gql`\n    query allStudentsPagination ($page: Int, $perPage: Int, $filter: String = \"\") {\n        allStudentsPagination (page: $page, perPage: $perPage, filter: $filter) {\n            page\n            perPage\n            pageCount\n            totalCount\n            records {\n                id\n                user {\n                    id\n                    username\n                    email\n                }\n                studentCode\n                surname\n                familyName\n                name\n                religion\n                registerNo\n                nationality\n                state\n                photo\n                phone\n                address\n                activity {\n                    id\n                    name\n                }\n                joinDate\n                sex\n                birthdate\n                classtime {\n                    id\n                    name\n                }\n                birthCity {\n                    id\n                    name\n                }\n                birthDistrict {\n                    id\n                    name\n                }\n                status {\n                    id\n                    name\n                }\n                statusExtra {\n                    id\n                    name\n                }\n                school {\n                    id\n                    name\n                }\n                classes {\n                    id\n                    classes\n                }\n                section {\n                    id\n                    section\n                }\n                program {\n                    id\n                    program\n                }\n                joinSchoolyear {\n                    id\n                    schoolyear\n                }\n            }\n        }\n    }\n`","import { gql } from '@apollo/client';\n\nexport const SELECT_STUDENT = gql`\n    query allStudents ($filter: String) {\n        allStudents (filter: $filter) {\n            id\n            familyName\n            name\n            studentCode\n        }\n\t}\n`;\n\nexport const SELECT_TEACHER = gql`\n    query allTeachers ($filter: String) {\n        allTeachers (filter: $filter) {\n            id\n            familyName\n            name\n            teacherCode\n        }\n    }\n`;\n\n// export const SELECT_SECTION_TEACHER = gql `\n//     query allAssistantTeachers ($filter: String) {\n//         allAssistantTeachers (filter: $filter) {\n//             id\n//             familyName\n//             name \n//             teacherCode\n//         }\n//     }\n// `\n\nexport const SELECT_CLASSES = gql`\n    query allClassess ($filter: String, $program: Int) {\n        allClassess (filter: $filter, program: $program) {\n            id\n            classes\n        }\n\t}\n`;\n\nexport const SELECT_SUBJECT = gql `\n    query allSubjects ($offset: Int!, $limit: Int!, $filter: String) {\n        count (appName: \"subject\", modelName: \"Subject\", filter: $filter) {\n            count\n        }\n        allSubjects (offset: $offset, limit: $limit, filter: $filter) {\n            id\n            subject \n            content\n        }\n    }\n`;\n\nexport const SELECT_PROGRAM = gql`\n    query selectProgram {\n        allPrograms {\n            id\n            program\n        }\n    }\n`;\n\nexport const SECTIONS_BY_PROGRAM = gql`\n    query sectionsByProgram ($program: Int!) {\n        sectionsByProgram (program: $program) {\n            id\n            section \n            classes {\n                classes\n            }\n        }\n    }\n`;\n\nexport const SELECT_SECTION = gql `\n    query sectionsByClasses ($classes: Int!){\n        sectionsByClasses (classes: $classes) {\n            id \n            section\n        }\n    }\n`","import React, { useState, useEffect } from 'react';\nimport { Col, DatePicker, Empty, Form, Input, InputNumber, message, Row, Select, Spin } from 'antd';\nimport { useLazyQuery, useMutation, useQuery } from '@apollo/client';\nimport IntlMessage from 'components/util-components/IntlMessage';\nimport { CREATE_LIVE, UPDATE_LIVE } from 'graphql/live';\nimport { ALL_PROGRAMS, ALL_SECTIONS } from 'graphql/all';\nimport moment from 'moment';\nimport { SELECT_CLASSES, SELECT_TEACHER } from 'graphql/select';\nimport Loading from 'components/shared-components/Loading';\n\nconst { Option } = Select;\n\nfunction SchoolForm ({editData, formType, setIsModalVisible, refetch}) {\n\n    const [form] = Form.useForm();\n\n    const [allSections, setAllSections] = useState([]);\n\n    const [teacherData, setTeacherData] = useState([]);\n\n    const [fetchTeacher, { loading: teacherLoading }] = useLazyQuery(SELECT_TEACHER, {\n        onCompleted: data => {\n            setTeacherData(data.allTeachers)\n        }\n    });\n    const [fetchClasses, { data: allClasses }] = useLazyQuery(SELECT_CLASSES);\n    const { data: allPrograms } = useQuery(ALL_PROGRAMS);\n\n    const { data } = useQuery(ALL_SECTIONS);\n\n    const [createSchool, { loading: createLoading }] = useMutation(CREATE_LIVE, {\n\t\tonCompleted: data => {\n            message.success('Амжилттай хадгаллаа');\n            setIsModalVisible(false);\n            refetch();\n\t\t}\n\t});\n\n    const [updateSchool, { loading: updateLoading }] = useMutation(UPDATE_LIVE, {\n        onCompleted: data => {\n            message.success('Амжилттай хадгаллаа');\n            setIsModalVisible(false);\n            refetch();\n        }\n    });\n\n    useEffect(() => {\n        fetchTeacher({ variables: { offset: 0, limit: 9, filter: ''} })\n        if(formType === \"edit\") {\n            form.setFieldsValue({\n                title: editData.title,\n                description: editData.description,\n                duration: editData.duration,\n                status: editData.status,\n                teacher: editData.teacher.id,\n                date: moment(editData.date),\n                type: editData.type,\n                section: editData.section.id\n            });\n        } else if(formType === \"create\") {\n            form.resetFields();\n        }\n    }, [editData, fetchTeacher, form, formType, data]);\n\n    const onFinish = values => {\n        if (formType === \"edit\") {\n            values.id = editData?.id\n            updateSchool({ variables: values})\n        } else {\n            createSchool({ variables: values })\n        }\n    };\n\n    const onProgramChange = (value) => {\n        fetchClasses({ variables: { program: value, offset: 1, limit: 1, filter: '' } })\n    }\n\n    const onClassesChange = (value) => {\n        const datas = data?.allSections.filter(section => section.classes.id === value).map(filteredSection => (\n            filteredSection\n        ));\n        setAllSections(datas);\n    }\n\n    // teacher select\n\n    const onSearch = value => {\n        if (value !== '') {\n            fetchTeacher({ variables: { offset: 0, limit: 99999999, filter: value } })\n        }\n    }\n\n    // end teacher select\n\n    return (\n        <Spin spinning={createLoading || updateLoading} tip=\"Ачааллаж байна...\">\n            <Form  \n                id=\"SchoolForm\"\n                layout={'vertical'}\n                form={form}\n                name=\"school\"\n                onFinish={onFinish}\n            >\n                <Row gutter={[16, 24]}>\n                    <Col className=\"gutter-row\" span={12}>\n                        <Form.Item name=\"title\" label={<IntlMessage id=\"title\" />} rules={[\n                            {\n                                required: true,\n                                message: <IntlMessage id=\"form.required\" />\n                            },\n                        ]}>\n                            <Input />\n                        </Form.Item>\n                        <Form.Item name=\"program\" label={<IntlMessage id=\"program\" />} rules={[\n                            {\n                                required: true,\n                                message: <IntlMessage id=\"form.required\" />\n                            },\n                        ]}>\n                            <Select\n                                onChange={onProgramChange}\n                            >\n                                { allPrograms?.allPrograms.map((program, index) => (\n                                    <Option key={index} value={program.id} >{program.program}</Option>\n                                ))}\n                            </Select>\n                        </Form.Item>\n                        <Form.Item name=\"section\" label={<IntlMessage id=\"section\" />} rules={[\n                            { \n                                required: true,\n                                message: \"Хоосон орхих боломжгүй\"\n                            }\n                        ]}>\n                            <Select>\n                                { allSections.map((section, index) => (\n                                    <Option key={index} value={section.id} >{section.section}</Option>\n                                ))}\n                            </Select>\n                        </Form.Item>\n                        <Form.Item name=\"date\" label={<IntlMessage id=\"date\" />} rules={[\n                            { \n                                required: true,\n                                message: \"Хоосон орхих боломжгүй\"\n                            }\n                        ]}>\n                            <DatePicker \n                                showTime\n                                style={{ width: '100%' }} \n                            />\n                        </Form.Item>\n                        <Form.Item name=\"status\" label={<IntlMessage id=\"status\" />} rules={[\n                            { \n                                required: true,\n                                message: \"Хоосон орхих боломжгүй\"\n                            }\n                        ]}>\n                            <Select>\n                                <Option key={0} value={'OPEN'} >Нээлттэй</Option>\n                                <Option key={1} value={'CLOSED'} >Хаалттай</Option>\n                            </Select>\n                        </Form.Item>\n                    </Col>\n                    <Col className=\"gutter-row\" span={12}>\n                        <Form.Item name=\"teacher\" label={<IntlMessage id=\"teacher\" />} rules={[\n                            {\n                                required: true,\n                                message: <IntlMessage id=\"form.required\" />\n                            },\n                        ]}>\n                            <Select\n                                showSearch\n                                filterOption={false}\n                                notFoundContent={\n                                    teacherLoading ? <Loading cover='content' /> \n                                    : <Empty image={Empty.PRESENTED_IMAGE_SIMPLE} />\n                                }\n                                onSearch={onSearch}\n                            >\n                                { teacherData.map((item, index) => (\n                                    <Option key={item.id} value={item.id} > {item.familyName} {item.name} / {item.teacherCode} </Option>\n                                ))}\n                            </Select>\n                        </Form.Item>\n                        <Form.Item name=\"classes\" label={<IntlMessage id=\"classes\" />} rules={[\n                            {\n                                required: true,\n                                message: <IntlMessage id=\"form.required\" />\n                            },\n                        ]}>\n                            <Select\n                                onChange={onClassesChange}\n                            >\n                                { allClasses?.allClassess.map((classes, index) => (\n                                    <Option key={index} value={classes.id} >{classes.classes}</Option>\n                                ))}\n                            </Select>\n                        </Form.Item>\n                        <Form.Item name=\"type\" label={<IntlMessage id=\"onlineType\" />} rules={[\n                            { \n                                required: true,\n                                message: \"Хоосон орхих боломжгүй\"\n                            }\n                        ]}>\n                            <Select>\n                                <Option value={'WEBINAR'} ><IntlMessage id=\"WEBINAR\" /></Option>\n                                <Option value={'ZOOM'} ><IntlMessage id=\"ZOOM\" /></Option>\n                            </Select>\n                        </Form.Item>\n                        <Form.Item name=\"duration\" label={<IntlMessage id=\"duration\" />} rules={[\n                            { \n                                required: true,\n                                message: \"Хоосон орхих боломжгүй\"\n                            }\n                        ]}>\n                            <InputNumber min={1} style={{ width: '100%' }} />\n                        </Form.Item>\n                        <Form.Item name=\"description\" label={<IntlMessage id=\"description\" />} rules={[\n                            {\n                                required: true,\n                                message: <IntlMessage id=\"form.required\" />\n                            },\n                        ]}>\n                            <Input.TextArea rows={4} />\n                        </Form.Item>\n                    </Col>\n                </Row>\n            </Form>\n        </Spin>\n    );\n};\n\nexport default SchoolForm"],"names":["ALL_SUBJECTS","gql","ALL_USERS","ALL_EMPLOYEES_ATTANDANCE_BY_RANGE","ALL_EMPLOYEES_COMPARTMENT","ALL_EMPLOYEES","ALL_TEACHERS","ALL_STUDENTS","ALL_CITYS","ALL_DISTRICTS","ALL_PROGRAMS","ALL_SCHOOLS","ALL_SUB_SCHOOLS","ALL_SECTIONS","ALL_CLASSESS","ALL_CLASSTIME","ALL_SCHOOL_YEAR","ALL_PARENTS","SECTION_BY_CLASSES","TRANSFER_BY_STUDENT","ALL_EVENT_TYPES","ALL_EVENTS","ALL_STUDENTS_PAGINATION","SELECT_STUDENT","SELECT_TEACHER","SELECT_CLASSES","SELECT_SUBJECT","SELECT_PROGRAM","SECTIONS_BY_PROGRAM","SELECT_SECTION","Option","Select","editData","formType","setIsModalVisible","refetch","Form","form","useState","allSections","setAllSections","teacherData","setTeacherData","useLazyQuery","onCompleted","data","allTeachers","fetchTeacher","teacherLoading","loading","fetchClasses","allClasses","allPrograms","useQuery","useMutation","CREATE_LIVE","message","createSchool","createLoading","UPDATE_LIVE","updateSchool","updateLoading","useEffect","variables","offset","limit","filter","setFieldsValue","title","description","duration","status","teacher","id","date","moment","type","section","resetFields","spinning","tip","layout","name","onFinish","values","gutter","className","span","label","rules","required","onChange","value","program","map","index","showTime","style","width","showSearch","filterOption","notFoundContent","cover","image","Empty","onSearch","item","familyName","teacherCode","datas","classes","filteredSection","allClassess","min","rows"],"sourceRoot":""}