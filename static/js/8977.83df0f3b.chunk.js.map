{"version":3,"file":"static/js/8977.83df0f3b.chunk.js","mappings":"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","sources":["components/shared-components/FormModal/index.js","graphql/plan.js","graphql/select.js","views/app-views/plan/sub-plan/sub-plan-action-form.js","views/app-views/plan/sub-plan/index.js","views/app-views/plan/daily-plan/form.js","views/app-views/plan/daily-plan/index.js","views/app-views/plan/sub-plan/form.js","views/app-views/plan/show.js"],"sourcesContent":["import React, { forwardRef, useImperativeHandle, useState } from 'react'\nimport { Modal } from 'antd';\n\nconst FormModal = forwardRef(({ children, title, footer, formName = 'form' }, ref) => {\n    \n    const [isModalVisible, setIsModalVisible] = useState(false);\n\n    useImperativeHandle(ref, () => ({\n        handleOpen() {\n            setIsModalVisible(true);\n        },\n        handleCancel () {\n            setIsModalVisible(false);\n        }\n    }));\n    \n    return (\n        <Modal \n            width={1000}\n            title={title} \n            visible={isModalVisible}\n            onCancel={ref.current?.handleCancel}\n            okText=\"Хадгалах\"\n            footer={footer}\n            cancelText=\"Болих\"\n            okButtonProps={{form:formName, key: 'submit', htmlType: 'submit'}}\n        >\n            {children}\n        </Modal>\n    )\n});\n\nexport default FormModal;\n","import { gql } from \"@apollo/client\";\n\nexport const ALL_PLANS = gql`\n    query allPlans {\n        allPlans {\n            id\n            section {\n                id\n                section\n                program {\n                    id\n                }\n                classes {\n                    classes\n                }\n            }\n            approvedBy {\n                familyName\n                name\n            }\n            teacher {\n                familyName\n                name\n            }\n            startDate\n            endDate\n        }\n    }\n`\n\nexport const CREATE_PLAN = gql`\n    mutation createPlan ($endDate: Date, $section: ID, $startDate: Date) {\n        createPlan (endDate: $endDate, section: $section, startDate: $startDate) {\n            plan {\n                id\n            }\n        }\n    }\n`\n\nexport const PLAN_BY_ID = gql`\n    query planById ($id: ID!) {\n        planById (id: $id) {\n            id\n            section {\n                section\n                school {\n                    name\n                }\n                classes {\n                    classes\n                }\n            }\n            approvedBy {\n                familyName\n                name\n            }\n            teacher {\n                familyName\n                name\n            }\n            startDate\n            endDate\n        }\n    }\n`\n\nexport const UPDATE_PLAN = gql`\n    mutation updatePlan ($id: ID, $endDate: Date, $section: ID, $startDate: Date) {\n        updatePlan (id: $id, endDate: $endDate, section: $section, startDate: $startDate) {\n            plan {\n                id\n            }\n        }\n    }\n`\n\nexport const DELETE_PLAN = gql`\n    mutation deletePlan ($id: ID) {\n        deletePlan (id: $id) {\n            plan {\n                startDate\n            }\n        }\n    }\n`\n\nexport const ALL_DAILY_PLANS = gql`\n    query allDailyPlans ($plan: ID!) {\n        allDailyPlans (plan: $plan) {\n            id\n            action\n            monday\n            tuesday\n            wednesday\n            thursday\n            friday\n            isAllDay\n            allDay\n            approvedBy {\n                familyName\n                name\n            }\n        }\n    }\n`\n\nexport const CREATE_DAILY_PLAN = gql`\n    mutation createDailyPlan (\n        $action: String\n        $allDay: String = \".\"\n        $friday: String = \".\"\n        $isAllDay: Boolean\n        $monday: String = \".\"\n        $plan: ID\n        $thursday: String = \".\"\n        $tuesday: String = \".\"\n        $wednesday: String = \".\"\n    ) {\n        createDailyPlan (\n            action: $action\n            allDay: $allDay\n            friday: $friday\n            isAllDay: $isAllDay\n            monday: $monday\n            plan: $plan\n            thursday: $thursday\n            tuesday: $tuesday\n            wednesday: $wednesday\n        ) {\n            dailyPlan {\n                id\n            }\n        }\n    }\n`\n\nexport const UPDATE_DAILY_PLAN = gql`\n    mutation updateDailyPlan (\n        $action: String\n        $allDay: String = \"\"\n        $friday: String = \"\"\n        $isAllDay: Boolean\n        $monday: String = \"\"\n        $id: ID\n        $thursday: String = \"\"\n        $tuesday: String = \"\"\n        $wednesday: String = \"\"\n    ) {\n        updateDailyPlan (\n            action: $action\n            allDay: $allDay\n            friday: $friday\n            isAllDay: $isAllDay\n            monday: $monday\n            id: $id\n            thursday: $thursday\n            tuesday: $tuesday\n            wednesday: $wednesday\n        ) {\n            dailyPlan {\n                id\n            }\n        }\n    }\n`\n\nexport const DELETE_DAILY_PLAN = gql`\n    mutation deleteDailyPlan ($id: ID) {\n        deleteDailyPlan (id: $id) {\n            dailyPlan {\n                monday\n            }\n        }\n    }\n`\n\nexport const ALL_SUB_PLANS = gql`\n    query allSubPlans ($plan: ID!) {\n        allSubPlans (plan: $plan) {\n            id\n            subject {\n                id\n                subject\n            }\n            content\n            goal\n            teachingMethods\n            consumables\n            walk\n            running\n            jumping\n            shoot\n            hand\n            body\n        }\n    }\n`\n\nexport const CREATE_SUB_PLAN = gql`\n    mutation createSubPlan(\n        $plan: ID\n        $subject: ID\n        $consumables: String\n        $content: String\n        $goal: String\n        $teachingMethods: String\n        $hand: String = \"\"\n        $jumping: String = \"\"\n        $running: String = \"\"\n        $shoot: String = \"\"\n        $body: String = \"\"\n        $walk: String = \"\"\n        $game: String = \"\"\n    ) {\n        createSubPlan (\n            body: $body\n            consumables: $consumables\n            content: $content\n            goal: $goal\n            hand: $hand\n            jumping: $jumping\n            plan: $plan\n            running: $running\n            shoot: $shoot\n            subject: $subject\n            teachingMethods: $teachingMethods\n            walk: $walk\n            game: $game\n        ) {\n            subPlan {\n                id\n            }\n        }\n    }\n`\n\nexport const UPDATE_SUB_PLAN = gql`\n    mutation updateSubPlan(\n        $id: ID\n        $subject: ID\n        $consumables: String\n        $teachingMethods: String\n        $content: String\n        $goal: String = \"\"\n        $hand: String = \"\"\n        $jumping: String = \"\"\n        $running: String = \"\"\n        $shoot: String = \"\"\n        $body: String = \"\"\n        $walk: String = \"\"\n        $game: String = \"\"\n    ) {\n        updateSubPlan (\n            body: $body\n            consumables: $consumables\n            content: $content\n            goal: $goal\n            hand: $hand\n            jumping: $jumping\n            id: $id\n            running: $running\n            shoot: $shoot\n            subject: $subject\n            teachingMethods: $teachingMethods\n            walk: $walk\n            game: $game\n        ) {\n            subPlan {\n                id\n            }\n        }\n    }\n`\n\nexport const DELETE_SUB_PLAN = gql`\n    mutation deleteSubPlan ($id: ID) {\n        deleteSubPlan (id: $id) {\n            subPlan {\n                walk\n            }\n        }\n    }\n`\n\nexport const ALL_SUB_PLAN_ACTIONS = gql`\n    query allSubPlanActions ($subPlan: ID!) {\n        allSubPlanActions (subPlan: $subPlan) {\n            id\n            action\n            teacherActivity\n            studentActivity\n            subPlan {\n                id\n            }\n            approvedBy {\n                familyName\n                name\n            }\n        }\n    }\n`\n\nexport const CREATE_SUB_PLAN_ACTION = gql`\n    mutation createSubPlanAction (\n        $action: String\n        $studentActivity: String\n        $subPlan: ID\n        $teacherActivity: String\n    ) {\n        createSubPlanAction (\n            action: $action\n            studentActivity: $studentActivity\n            subPlan: $subPlan\n            teacherActivity: $teacherActivity\n        ) {\n            subPlanAction {\n                id\n            }\n        }\n    }\n`\n\nexport const UPDATE_SUB_PLAN_ACTION = gql`\n    mutation updateSubPlanAction (\n        $action: String\n        $studentActivity: String\n        $id: ID\n        $teacherActivity: String\n    ) {\n        updateSubPlanAction (\n            action: $action\n            studentActivity: $studentActivity\n            id: $id\n            teacherActivity: $teacherActivity\n        ) {\n            subPlanAction {\n                id\n            }\n        }\n    }\n`\n\nexport const DELETE_SUB_PLAN_ACTION = gql`\n    mutation deleteSubPlanAction ($id: ID) {\n        deleteSubPlanAction (id: $id) {\n            subPlanAction {\n                action\n            }\n        }\n    }\n`\n\nexport const APPROVE_PLAN = gql`\n    mutation approvePlan ($plan: ID) {\n        approvePlan (plan: $plan) {\n            plan {\n                id\n            }\n        }\n    }\n`\n\nexport const APPROVE_DAILY_PLAN = gql`\n    mutation approveDailyPlan ($dailyPlan: ID, $isApproved: Boolean) {\n        approveDailyPlan (dailyPlan: $dailyPlan, isApproved: $isApproved) {\n            dailyPlan {\n                id\n            }\n        }\n    }\n`\n\nexport const APPROVE_SUB_PLAN_ACTION = gql`\n    mutation approveSubPlanAction ($subPlanAction: ID, $isApproved: Boolean) {\n        approveSubPlanAction (subPlanAction: $subPlanAction, isApproved: $isApproved) {\n            subPlanAction {\n                id\n            }\n        }\n    }\n`","import { gql } from '@apollo/client';\n\nexport const SELECT_STUDENT = gql`\n    query allStudents ($filter: String) {\n        allStudents (filter: $filter) {\n            id\n            familyName\n            name\n            studentCode\n        }\n\t}\n`;\n\nexport const SELECT_TEACHER = gql`\n    query allTeachers ($filter: String) {\n        allTeachers (filter: $filter) {\n            id\n            familyName\n            name\n            teacherCode\n        }\n    }\n`;\n\n// export const SELECT_SECTION_TEACHER = gql `\n//     query allAssistantTeachers ($filter: String) {\n//         allAssistantTeachers (filter: $filter) {\n//             id\n//             familyName\n//             name \n//             teacherCode\n//         }\n//     }\n// `\n\nexport const SELECT_CLASSES = gql`\n    query allClassess ($filter: String, $program: Int) {\n        allClassess (filter: $filter, program: $program) {\n            id\n            classes\n        }\n\t}\n`;\n\nexport const SELECT_SUBJECT = gql `\n    query allSubjects ($offset: Int!, $limit: Int!, $filter: String) {\n        count (appName: \"subject\", modelName: \"Subject\", filter: $filter) {\n            count\n        }\n        allSubjects (offset: $offset, limit: $limit, filter: $filter) {\n            id\n            subject \n            content\n        }\n    }\n`;\n\nexport const SELECT_PROGRAM = gql`\n    query selectProgram {\n        allPrograms {\n            id\n            program\n        }\n    }\n`;\n\nexport const SECTIONS_BY_PROGRAM = gql`\n    query sectionsByProgram ($program: Int!) {\n        sectionsByProgram (program: $program) {\n            id\n            section \n            classes {\n                classes\n            }\n        }\n    }\n`;\n\nexport const SELECT_SECTION = gql `\n    query sectionsByClasses ($classes: Int!){\n        sectionsByClasses (classes: $classes) {\n            id \n            section\n        }\n    }\n`","import React, { useEffect } from 'react';\nimport { Form, Input, message, Spin } from 'antd';\nimport IntlMessage from 'components/util-components/IntlMessage';\nimport { useMutation } from '@apollo/client';\nimport { ALL_SUB_PLAN_ACTIONS, CREATE_SUB_PLAN_ACTION, UPDATE_SUB_PLAN_ACTION } from 'graphql/plan';\nimport BraftEditor from 'braft-editor';\n\nfunction SubPlanActionForm ({ closeModal, selectedData, subPlan }) {\n\n    const [form] = Form.useForm();\n\n    const [create, { loading: createLoading }] = useMutation(CREATE_SUB_PLAN_ACTION, {\n        refetchQueries: [{\n            query: ALL_SUB_PLAN_ACTIONS,\n            variables: { subPlan: subPlan }\n        }],\n        onCompleted: data => {\n            closeModal();\n            message.success(\"Амжилттай хадгаллаа\")\n        }\n    })\n\n    const [update, { loading: updateLoading }] = useMutation(UPDATE_SUB_PLAN_ACTION, {\n        refetchQueries: [{\n            query: ALL_SUB_PLAN_ACTIONS,\n            variables: { subPlan: subPlan }\n        }],\n        onCompleted: data => {\n            closeModal();\n            message.success(\"Амжилттай хадгаллаа\")\n        }\n    })\n\n    useEffect(() => {\n        if (selectedData.id) {\n            const formData ={\n                action: selectedData.action,\n                teacherActivity: BraftEditor.createEditorState(selectedData.teacherActivity),\n                studentActivity: BraftEditor.createEditorState(selectedData.studentActivity)\n\t\t\t}\n            form.setFieldsValue(formData);\n        } else {\n            form.resetFields()\n        }\n    }, [selectedData, form])\n    \n\n    const onFinish = values => {\n        values.subPlan= subPlan\n        values.teacherActivity = values.teacherActivity.toHTML();\n        values.studentActivity = values.studentActivity.toHTML();\n        if (selectedData.id) {\n            values.id = selectedData.id\n            update({ variables: values })\n        } else {\n            create({ variables: values })\n        }\n    };\n\n    return (\n        <Spin spinning={createLoading || updateLoading} tip=\"Ачааллаж байна...\">\n            <Form  \n                id=\"subPlanActionForm\"\n                layout={'vertical'}\n                form={form}\n                name=\"subPlanActionForm\" \n                onFinish={onFinish}\n            >\n                <Form.Item name=\"action\" label={`Үйл ажиллагаа`} rules={[\n                    {\n                        required: true,\n                        message: <IntlMessage id=\"form.required\" />\n                    },\n                    {\n                        max: 100,\n                        message: <IntlMessage id=\"form.max\" />\n                    }\n                ]}>\n                    <Input />\n                </Form.Item>\n                <Form.Item name=\"teacherActivity\" label={`Багшийн дэмжлэг, чиглүүлэг`} rules={[\n                    {\n                        required: true,\n                        message: <IntlMessage id=\"form.required\" />\n                    }\n                ]}>\n                    <BraftEditor\n                        className='border rounded-2'\n                        language=\"en\"\n                    />\n                </Form.Item>\n                <Form.Item name=\"studentActivity\" label={`Хүүхдийн үйл ажиллагаа`} rules={[\n                    {\n                        required: true,\n                        message: <IntlMessage id=\"form.required\" />\n                    }\n                ]}>\n                    <BraftEditor\n                        className='border rounded-2'\n                        language=\"en\"\n                    />\n                </Form.Item>\n            </Form>\n        </Spin>\n    );\n};\n\nexport default SubPlanActionForm","import React, { useEffect, useRef, useState } from 'react'\nimport { useMutation, useQuery } from '@apollo/client';\nimport { Checkbox, message, Modal } from 'antd';\nimport { DeleteTwoTone } from '@ant-design/icons';\nimport { PlusCircleIcon } from '@heroicons/react/outline'\nimport { ALL_SUB_PLAN_ACTIONS, DELETE_SUB_PLAN_ACTION, DELETE_SUB_PLAN, ALL_SUB_PLANS, APPROVE_SUB_PLAN_ACTION } from 'graphql/plan';\nimport FormModal from 'components/shared-components/FormModal';\nimport SubPlanActionForm from './sub-plan-action-form';\nimport { classNames } from 'utils';\nimport { useParams } from 'react-router-dom';\n\nconst { confirm } = Modal\n\nconst SubPlanActionsRow = ({ onActionRowClick, item, onDelete, permissions }) => {\n\n    const [points, setPoints] = useState({ x: 0, y: 0 });\n    const [show, setShow] = useState(false);\n\n    const contextMenuRef = useRef()\n\n    const [approveSubPlanAction, { loading: approveSubPlanActionLoading }] = useMutation(APPROVE_SUB_PLAN_ACTION, {\n        refetchQueries: [{\n            query: ALL_SUB_PLAN_ACTIONS,\n            variables: { subPlan: item.subPlan.id }\n        }]\n    })\n\n    useEffect(() => {\n\n        function onClickOutside() {\n            setShow(false)\n        }\n\n        const handleClickOutside = (event) => {\n            if (contextMenuRef.current && !contextMenuRef.current.contains(event.target)) {\n                onClickOutside && onClickOutside();\n            }\n        };\n        document.addEventListener('contextmenu', handleClickOutside, true);\n        document.addEventListener('click', handleClickOutside, true);\n        return () => {\n            document.removeEventListener('contextmenu', handleClickOutside, true);\n            document.addEventListener('click', handleClickOutside, true);\n        };\n    }, []);\n\n    function onCheckBoxChange(e) {\n        approveSubPlanAction({ variables: { subPlanAction: item.id, isApproved: e.target.checked } });\n    }\n\n    return (\n        <>\n            <tr\n                className=\"border-b hover:cursor-pointer break-after-auto break-inside-avoid\"\n                onContextMenuCapture={(e) => {\n                    e.preventDefault();\n                    if (permissions.delete) {\n                        setShow(true);\n                        setPoints({ x: e.pageX, y: e.pageY });\n                    }\n                }}\n                onClick={() => onActionRowClick(item)}\n            >\n                <td className=\"text-sm text-gray-900 border-r print:break-before-auto\">{item.action}</td>\n                <td className=\"text-sm text-gray-900 border-r print:break-before-auto\" dangerouslySetInnerHTML={{ __html: item.teacherActivity }} />\n                <td className=\"text-sm text-gray-900 border-r print:break-before-auto\" dangerouslySetInnerHTML={{ __html: item.studentActivity }} />\n                <td\n                    className=\"text-sm text-gray-900 border-r print:hidden\"\n                    onClick={e => permissions.approve_plan && (e && e.stopPropagation) && e.stopPropagation()}\n                >\n                    {permissions.approve_plan ?\n                        <Checkbox\n                            onChange={e => onCheckBoxChange(e)}\n                            disabled={approveSubPlanActionLoading}\n                            checked={item.approvedBy ? true : false}\n                        >\n                            {item.approvedBy ? 'Баталсан' : 'Батлагдаагүй'}\n                        </Checkbox>\n                        :\n                        <span>{item.approvedBy ? 'Баталсан' : 'Батлагдаагүй'}</span>\n                    }\n                </td>\n            </tr>\n            {show &&\n                <tr\n                    ref={contextMenuRef}\n                    className={classNames(show ? 'absolute' : 'hidden', ' z-10')}\n                    style={{\n                        top: points.y,\n                        left: points.x\n                    }}\n                >\n                    <td className=\"bg-white w-60 border border-gray-300 rounded-lg flex flex-col text-sm py-4 px-2 text-gray-500\">\n                        <div className=\"flex py-1 px-2 rounded hover:bg-background hover:cursor-pointer\" onClick={() => onDelete(item.id)}>\n                            <div className=\"w-8\">\n                                <DeleteTwoTone twoToneColor=\"#eb2f96\" key=\"delete\" />\n                            </div>\n                            <div>Устгах</div>\n                        </div>\n                    </td>\n                </tr>\n            }\n        </>\n    )\n}\n\nconst Index = ({ data, permissions, teacher, onClick }) => {\n\n    const { id } = useParams()\n\n    const [selectedData, setSelectedData] = useState({})\n    const [points, setPoints] = useState({ x: 0, y: 0 });\n    const [show, setShow] = useState(false);\n\n    const subPlanActionModalRef = useRef()\n    const contextMenuRef = useRef()\n\n    const { data: actions, refetch } = useQuery(ALL_SUB_PLAN_ACTIONS, {\n        variables: { subPlan: data.id }\n    })\n\n    const [deleteSubPlan] = useMutation(DELETE_SUB_PLAN, {\n        refetchQueries: [{\n            query: ALL_SUB_PLANS,\n            variables: { plan: id }\n        }],\n        onCompleted: data => {\n            message.success(\"Амжилттай устлаа\")\n        }\n    })\n\n    const [deletePlanAction] = useMutation(DELETE_SUB_PLAN_ACTION, {\n        onCompleted: data => {\n            message.success(\"Амжилттай устлаа\")\n            refetch()\n        }\n    })\n\n    function onDelete(id) {\n        confirm({\n            title: 'Устгах уу?',\n            okText: 'Устгах',\n            okType: 'danger',\n            cancelText: 'Болих',\n            onOk() {\n                deletePlanAction({ variables: { id: id } })\n            },\n        });\n    }\n\n    function onDeleteSubPlan(id) {\n        confirm({\n            title: 'Устгах уу?',\n            okText: 'Устгах',\n            okType: 'danger',\n            cancelText: 'Болих',\n            onOk() {\n                deleteSubPlan({ variables: { id: id } })\n            },\n        });\n    }\n\n    function handleCancel() {\n        subPlanActionModalRef.current.handleCancel()\n    }\n\n    function handleOpen() {\n        if (permissions.create) {\n            setSelectedData({})\n            subPlanActionModalRef.current.handleOpen()\n        }\n    }\n\n    function onActionRowClick(params) {\n        if (permissions.edit) {\n            setSelectedData(params)\n            subPlanActionModalRef.current.handleOpen()\n        }\n    }\n\n    useEffect(() => {\n\n        function onClickOutside() {\n            setShow(false)\n        }\n\n        const handleClickOutside = (event) => {\n            if (contextMenuRef.current && !contextMenuRef.current.contains(event.target)) {\n                onClickOutside && onClickOutside();\n            }\n        };\n        document.addEventListener('contextmenu', handleClickOutside, true);\n        document.addEventListener('click', handleClickOutside, true);\n        return () => {\n            document.removeEventListener('contextmenu', handleClickOutside, true);\n            document.addEventListener('click', handleClickOutside, true);\n        };\n    }, []);\n\n    return (\n        <>\n            <FormModal ref={subPlanActionModalRef} formName=\"subPlanActionForm\">\n                <SubPlanActionForm\n                    subPlan={data.id}\n                    selectedData={selectedData}\n                    closeModal={handleCancel}\n                />\n            </FormModal>\n            <div\n                className='hover:cursor-pointer'\n                onContextMenuCapture={(e) => {\n                    e.preventDefault();\n                    if (permissions.delete) {\n                        setShow(true);\n                        setPoints({ x: e.pageX, y: e.pageY });\n                    }\n                }}\n            >\n                <div onClick={() => onClick(data)}>\n                    {data.subject.subject &&\n                        <div className='font-bold text-black whitespace-pre-line'>\n                            Суралцахуйн чиглэл: {data.subject.subject}\n                        </div>\n                    }\n                    {data.content &&\n                        <div className='flex flex-row justify-'>\n                            <div className='font-bold text-black pr-1'>Агуулга:</div>\n                            <div dangerouslySetInnerHTML={{ __html: data.content }} />\n                        </div>\n                    }\n                    {data.walk &&\n                        <div className='font-bold text-black whitespace-pre-line'>\n                            Алхалт: {data.walk}\n                        </div>\n                    }\n                    {data.running &&\n                        <div className='font-bold text-black whitespace-pre-line'>\n                            Гүйлт: {data.running}\n                        </div>\n                    }\n                    {data.jumping &&\n                        <div className='font-bold text-black whitespace-pre-line'>\n                            Үсрэлт: {data.jumping}\n                        </div>\n                    }\n                    {data.shoot &&\n                        <div className='font-bold text-black whitespace-pre-line'>\n                            Шидэлт: {data.shoot}\n                        </div>\n                    }\n                    {data.game &&\n                        <div className='font-bold text-black whitespace-pre-line'>\n                            Гар хурууны хөдөлгөөнөө зохицуулна: {data.hand}\n                        </div>\n                    }\n                    {data.body &&\n                        <div className='font-bold text-black whitespace-pre-line'>\n                            Бие хөгжүүлэх дасгал: {data.body}\n                        </div>\n                    }\n                    {data.game &&\n                        <div className='font-bold text-black whitespace-pre-line'>\n                            Тоглоом: {data.game}\n                        </div>\n                    }\n                    {data.goal &&\n                        <div className='flex flex-row'>\n                            <div className='font-bold text-black pr-1'>Зорилго:</div>\n                            <div dangerouslySetInnerHTML={{ __html: data.goal }} />\n                        </div>\n                    }\n                    {data.teachingMethods &&\n                        <div className='flex flex-row'>\n                            <div className='font-bold text-black pr-1'>Заах арга:</div>\n                            <div dangerouslySetInnerHTML={{ __html: data.teachingMethods }} />\n                        </div>\n                    }\n                    {data.consumables &&\n                        <div className='flex flex-row'>\n                            <div className='font-bold text-black pr-1'>Хэрэглэгдэхүүн:</div>\n                            <div dangerouslySetInnerHTML={{ __html: data.consumables }} />\n                        </div>\n                    }\n\n                </div>\n                <div\n                    ref={contextMenuRef}\n                    className={classNames(show ? 'absolute' : 'hidden', ' z-10')}\n                    style={{\n                        top: points.y,\n                        left: points.x\n                    }}\n                >\n                    <div className=\"bg-white w-60 border border-gray-300 rounded-lg flex flex-col text-sm py-4 px-2 text-gray-500\">\n                        <div className=\"flex py-1 px-2 rounded hover:bg-background hover:cursor-pointer\" onClick={() => onDeleteSubPlan(data.id)}>\n                            <div className=\"w-8\">\n                                <DeleteTwoTone twoToneColor=\"#eb2f96\" key=\"delete\" />\n                            </div>\n                            <div>Устгах</div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n            <div className=\"flex flex-col\">\n                <div className=\"sm:-mx-6 lg:-mx-8\">\n                    <div className=\"py-2 inline-block min-w-full print:block sm:px-6 lg:px-8\">\n                        <div className=\"\">\n                            <table className=\"w-full table-fixed border text-center print:break-before-all\">\n                                <thead>\n                                    <tr className=\"border-b\">\n                                        <td className=\"px-6 py-4  text-sm font-bold text-gray-900 border-r\">Үйл ажиллагаа</td>\n                                        <td className=\"text-sm text-gray-900 font-bold px-6 py-4 border-r\">Багшийн дэмжлэг, чиглүүлэг</td>\n                                        <td className=\"text-sm text-gray-900 font-bold px-6 py-4 border-r\">Хүүхдийн үйл ажиллагаа</td>\n                                        <td className=\"text-sm text-gray-900 font-bold px-6 py-4 border-r print:hidden\">Төлөв</td>\n                                    </tr>\n                                </thead>\n                                <tbody>\n                                    {actions?.allSubPlanActions.map((item, index) => (\n                                        <SubPlanActionsRow\n                                            key={index}\n                                            item={item}\n                                            permissions={permissions}\n                                            onDelete={onDelete}\n                                            onActionRowClick={onActionRowClick}\n                                        />\n                                    ))}\n                                    {permissions.create &&\n                                        <tr className=\"bg-white border-b print:hidden\">\n                                            <td className=\"px-6 py-4  font-bold text-gray-900 border-r\" colSpan={4}>\n                                                <PlusCircleIcon className='h-6 m-auto hover:cursor-pointer' onClick={() => handleOpen()} />\n                                            </td>\n                                        </tr>\n                                    }\n                                </tbody>\n                            </table>\n                        </div>\n                    </div>\n                </div>\n            </div>\n            <div className='flex justify-center'>\n                <p className='mr-40 text-black'>Төлөвлөгөө боловсруулсан багш:</p>\n                <p className='text-black'>{teacher}</p>\n            </div>\n        </>\n    )\n}\n\nexport default Index","import React, { useEffect } from 'react';\nimport { Form, Input, message, Select, Spin } from 'antd';\nimport IntlMessage from 'components/util-components/IntlMessage';\nimport { useMutation } from '@apollo/client';\nimport { ALL_DAILY_PLANS, CREATE_DAILY_PLAN, UPDATE_DAILY_PLAN } from 'graphql/plan';\nimport BraftEditor from 'braft-editor';\nimport { useParams } from 'react-router-dom';\n\nconst { Option } = Select\n\nfunction DailyPlanForm ({ closeModal, selectedData }) {\n\n    const [form] = Form.useForm();\n\n    const { id } = useParams()\n\n    const [create, { loading: createLoading }] = useMutation(CREATE_DAILY_PLAN, {\n        refetchQueries: [{\n            query: ALL_DAILY_PLANS,\n            variables: { plan: id }\n        }],\n        onCompleted: data => {\n            closeModal();\n            message.success(\"Амжилттай хадгаллаа\")\n        }\n    })\n\n    const [update, { loading: updateLoading }] = useMutation(UPDATE_DAILY_PLAN, {\n        refetchQueries: [{\n            query: ALL_DAILY_PLANS,\n            variables: { plan: id }\n        }],\n        onCompleted: data => {\n            closeModal();\n            message.success(\"Амжилттай хадгаллаа\")\n        }\n    })\n\n    useEffect(() => {\n        if (selectedData.id) {\n            const formData = {\n                action: selectedData.action,\n                isAllDay: selectedData.isAllDay,\n                ... ( selectedData.allDay ?\n                        {\n                            allDay: BraftEditor.createEditorState(selectedData.allDay)\n                        }\n                    :\n                        {\n                            monday: BraftEditor.createEditorState(selectedData.monday),\n                            tuesday: BraftEditor.createEditorState(selectedData.tuesday),\n                            wednesday: BraftEditor.createEditorState(selectedData.wednesday),\n                            thursday: BraftEditor.createEditorState(selectedData.thursday),\n                            friday: BraftEditor.createEditorState(selectedData.friday)\n                        }\n                )\n\t\t\t}\n            form.setFieldsValue(formData);\n        } else {\n            form.resetFields()\n        }\n    }, [selectedData])\n    \n\n    const onFinish = values => {\n        values.plan = id\n        if (values.isAllDay) {\n            values.allDay = values.allDay.toHTML();\n        } else{\n            values.monday = values.monday.toHTML();\n            values.tuesday = values.tuesday.toHTML();\n            values.wednesday = values.wednesday.toHTML();\n            values.thursday = values.thursday.toHTML();\n            values.friday = values.friday.toHTML();\n        }\n        if (selectedData.id) {\n            values.id = selectedData.id\n            update({ variables: values })\n        } else {\n            create({ variables: values })\n        }\n    };\n\n    return (\n        <Spin spinning={createLoading || updateLoading} tip=\"Ачааллаж байна...\">\n            <Form  \n                id=\"dailyPlanForm\"\n                layout={'vertical'}\n                form={form}\n                name=\"dailyPlanForm\" \n                onFinish={onFinish}\n            >\n                <Form.Item name=\"action\" label={'Үйл ажиллагаа'} rules={[\n                    {\n                        required: true,\n                        message: <IntlMessage id=\"form.required\" />\n                    },\n                    {\n                        max: 50,\n                        message: <IntlMessage id=\"form.max\" />\n                    }\n                ]}>\n                    <Input />\n                </Form.Item>\n                <Form.Item name=\"isAllDay\" label={<IntlMessage id=\"isAllDay\" />} rules={[\n                    {\n                        required: true,\n                        message: <IntlMessage id=\"form.required\" />\n                    }\n                ]}>\n                    <Select>\n                        <Option value={true}>Бүх өдөр</Option>\n                        <Option value={false}>Өдөр өдрөөр</Option>\n                    </Select>\n                </Form.Item>\n                <Form.Item\n                    noStyle\n                    shouldUpdate={(prevValues, currentValues) => prevValues.isAllDay !== currentValues.isAllDay}\n                >\n                {({ getFieldValue }) =>\n                    getFieldValue('isAllDay') === true ? (\n                        <Form.Item name=\"allDay\" label={<IntlMessage id=\"allDay\" />} rules={[\n                            {\n                                required: true,\n                                message: <IntlMessage id=\"form.required\" />\n                            },\n                        ]}>\n                            <BraftEditor\n                                className='border rounded-2'\n                                language=\"en\"\n                            />\n                        </Form.Item>\n                    ) : \n                    <>\n                        <Form.Item name=\"monday\" label={<IntlMessage id=\"monday\" />} rules={[\n                            {\n                                required: true,\n                                message: <IntlMessage id=\"form.required\" />\n                            },\n                        ]}>\n                            <BraftEditor\n                                className='border rounded-2'\n                                language=\"en\"\n                            />\n                        </Form.Item>\n                        <Form.Item name=\"tuesday\" label={<IntlMessage id=\"tuesday\" />} rules={[\n                            {\n                                required: true,\n                                message: <IntlMessage id=\"form.required\" />\n                            },\n                        ]}>\n                            <BraftEditor\n                                className='border rounded-2'\n                                language=\"en\"\n                            />\n                        </Form.Item>\n                        <Form.Item name=\"wednesday\" label={<IntlMessage id=\"wednesday\" />} rules={[\n                            {\n                                required: true,\n                                message: <IntlMessage id=\"form.required\" />\n                            },\n                        ]}>\n                            <BraftEditor\n                                className='border rounded-2'\n                                language=\"en\"\n                            />\n                        </Form.Item>\n                        <Form.Item name=\"thursday\" label={<IntlMessage id=\"thursday\" />} rules={[\n                            {\n                                required: true,\n                                message: <IntlMessage id=\"form.required\" />\n                            },\n                        ]}>\n                            <BraftEditor\n                                className='border rounded-2'\n                                language=\"en\"\n                            />\n                        </Form.Item>\n                        <Form.Item name=\"friday\" label={<IntlMessage id=\"friday\" />} rules={[\n                            {\n                                required: true,\n                                message: <IntlMessage id=\"form.required\" />\n                            },\n                        ]}>\n                            <BraftEditor\n                                className='border rounded-2'\n                                language=\"en\"\n                            />\n                        </Form.Item>\n                    </>\n                }\n                </Form.Item>\n            </Form>\n        </Spin>\n    );\n};\n\nexport default DailyPlanForm","import React, { useEffect, useRef, useState } from 'react'\nimport { useMutation } from '@apollo/client';\nimport { useParams } from 'react-router-dom';\nimport { ALL_DAILY_PLANS, APPROVE_DAILY_PLAN, DELETE_DAILY_PLAN } from 'graphql/plan';\nimport { DeleteTwoTone } from '@ant-design/icons';\nimport { Checkbox, message, Modal } from 'antd';\nimport { PlusCircleIcon } from '@heroicons/react/outline';\nimport FormModal from 'components/shared-components/FormModal';\nimport DailyPlanForm from './form';\n\nconst { confirm } = Modal\n\nconst DailyPlanRow = ({ onRowClick, item, permissions }) => {\n\n    const [points, setPoints] = useState({ x: 0, y: 0 });\n    const [show, setShow] = useState(false);\n\n    const contextMenuRef = useRef()\n\n    const { id } = useParams()\n\n    const [deleteDailyPlan] = useMutation(DELETE_DAILY_PLAN, {\n        refetchQueries: [{\n            query: ALL_DAILY_PLANS,\n            variables: { plan: id }\n        }],\n        onCompleted: data => {\n            message.success(\"Амжилттай устлаа\")\n        }\n    })\n\n    const [approveDailyPlan, { loading: approveDailyPlanLoading }] = useMutation(APPROVE_DAILY_PLAN, {\n        refetchQueries: [{\n            query: ALL_DAILY_PLANS,\n            variables: { plan: id }\n        }]\n    })\n\n    useEffect(() => {\n\n        function onClickOutside() {\n            setShow(false)\n        }\n\n        const handleClickOutside = (event) => {\n            if (contextMenuRef.current && !contextMenuRef.current.contains(event.target)) {\n                onClickOutside && onClickOutside();\n            }\n        };\n        document.addEventListener('contextmenu', handleClickOutside, true);\n        document.addEventListener('click', handleClickOutside, true);\n        return () => {\n            document.removeEventListener('contextmenu', handleClickOutside, true);\n            document.addEventListener('click', handleClickOutside, true);\n        };\n    }, []);\n\n    function onDeleteDailyPlan(id) {\n        confirm({\n            title: 'Устгах уу?',\n            okText: 'Устгах',\n            okType: 'danger',\n            cancelText: 'Болих',\n            onOk() {\n                deleteDailyPlan({ variables: { id: id } })\n            },\n        });\n    }\n\n    function onCheckBoxChange(e) {\n        approveDailyPlan({ variables: { dailyPlan: item.id, isApproved: e.target.checked } });\n    }\n\n    return (\n        <>\n            <tr\n                className=\"border-b hover:cursor-pointer break-after-auto break-inside-avoid\"\n                onContextMenuCapture={(e) => {\n                    e.preventDefault();\n                    if (permissions.delete) {\n                        setShow(true);\n                        setPoints({ x: e.pageX, y: e.pageY });\n                    }\n                }}\n                onClick={() => onRowClick(item)}\n            >\n                <td className=\"text-sm text-gray-900 border-r print:break-before-auto\">{item.action}</td>\n                {item.isAllDay ?\n                    <>\n                        <td\n                            className=\"text-sm text-gray-900 border-r print:break-before-auto\"\n                            dangerouslySetInnerHTML={{ __html: item.allDay }}\n                            colSpan={5}\n                        />\n                        <td\n                            className=\"text-sm text-gray-900 border-r print:hidden\"\n                            onClick={e => permissions.approve_plan && (e && e.stopPropagation) && e.stopPropagation()}\n                        >\n                            {permissions.approve_plan ?\n                                <Checkbox\n                                    onChange={e => onCheckBoxChange(e)}\n                                    disabled={approveDailyPlanLoading}\n                                    checked={item.approvedBy ? true : false}\n                                >\n                                    {item.approvedBy ? 'Баталсан' : 'Батлагдаагүй'}\n                                </Checkbox>\n                                :\n                                <span>{item.approvedBy ? 'Баталсан' : 'Батлагдаагүй'}</span>\n                            }\n                        </td>\n                    </>\n                    :\n                    <>\n                        <td\n                            className=\"text-sm text-gray-900 border-r print:break-before-auto\"\n                            dangerouslySetInnerHTML={{ __html: item.monday }}\n                        />\n                        <td\n                            className=\"text-sm text-gray-900 border-r print:break-before-auto\"\n                            dangerouslySetInnerHTML={{ __html: item.tuesday }}\n                        />\n                        <td\n                            className=\"text-sm text-gray-900 border-r print:break-before-auto\"\n                            dangerouslySetInnerHTML={{ __html: item.wednesday }}\n                        />\n                        <td\n                            className=\"text-sm text-gray-900 border-r print:break-before-auto\"\n                            dangerouslySetInnerHTML={{ __html: item.thursday }}\n                        />\n                        <td\n                            className=\"text-sm text-gray-900 border-r print:break-before-auto\"\n                            dangerouslySetInnerHTML={{ __html: item.friday }}\n                        />\n                        <td\n                            className=\"text-sm text-gray-900 border-r print:hidden\"\n                            onClick={e => permissions.approve_plan && (e && e.stopPropagation) && e.stopPropagation()}\n                        >\n                            {permissions.approve_plan ?\n                                <Checkbox\n                                    onChange={e => onCheckBoxChange(e)}\n                                    disabled={approveDailyPlanLoading}\n                                    checked={item.approvedBy ? true : false}\n                                >\n                                    {item.approvedBy ? 'Баталсан' : 'Батлагдаагүй'}\n                                </Checkbox>\n                                :\n                                <span>{item.approvedBy ? 'Баталсан' : 'Батлагдаагүй'}</span>\n                            }\n                        </td>\n                    </>\n                }\n            </tr>\n            {show &&\n                <tr ref={contextMenuRef} className=\"absolute z-10\" style={{\n                    top: points.y,\n                    left: points.x\n                }}>\n                    <td className=\"bg-white w-60 border border-gray-300 rounded-lg flex flex-col text-sm py-4 px-2 text-gray-500\">\n                        <div className=\"flex py-1 px-2 rounded hover:bg-background hover:cursor-pointer\" onClick={() => onDeleteDailyPlan(item.id)}>\n                            <div className=\"w-8\">\n                                <DeleteTwoTone twoToneColor=\"#eb2f96\" key=\"delete\" />\n                            </div>\n                            <div>Устгах</div>\n                        </div>\n                    </td>\n                </tr>\n            }\n        </>\n    )\n}\n\nconst DailyPlan = ({ data = [], permissions }) => {\n\n    const [selectedData, setSelectedData] = useState({})\n\n    const dailyPlanModalRef = useRef()\n\n    function handleCancel() {\n        dailyPlanModalRef.current.handleCancel()\n    }\n\n    function handleOpen() {\n        if (permissions.create) {\n            setSelectedData({})\n            dailyPlanModalRef.current.handleOpen()\n        }\n    }\n\n    function onRowClick(params) {\n        if (permissions.edit) {\n            setSelectedData(params)\n            dailyPlanModalRef.current.handleOpen()\n        }\n    }\n\n    return (\n        <>\n            <FormModal ref={dailyPlanModalRef} formName=\"dailyPlanForm\">\n                <DailyPlanForm\n                    subPlan={data.id}\n                    selectedData={selectedData}\n                    closeModal={handleCancel}\n                />\n            </FormModal>\n            <div className=\"flex flex-col\">\n                <div className=\"sm:-mx-6 lg:-mx-8\">\n                    <div className=\"py-2 inline-block min-w-full print:block sm:px-6 lg:px-8\">\n                        <div className=\"\">\n                            <table className=\"w-full table-fixed border text-center print:break-before-all\">\n                                <thead>\n                                    <tr className=\"border-b\">\n                                        <td className=\"px-6 py-4  text-sm font-bold text-gray-900 border-r\">Үйл ажиллагаа</td>\n                                        <td className=\"text-sm text-gray-900 font-bold px-6 py-4 border-r\">Даваа</td>\n                                        <td className=\"text-sm text-gray-900 font-bold px-6 py-4 border-r\">Мягмар</td>\n                                        <td className=\"text-sm text-gray-900 font-bold px-6 py-4 border-r\">Лхагва</td>\n                                        <td className=\"text-sm text-gray-900 font-bold px-6 py-4 border-r\">Пүрэв</td>\n                                        <td className=\"text-sm text-gray-900 font-bold px-6 py-4 border-r\">Баасан</td>\n                                        <td className=\"text-sm text-gray-900 font-bold px-6 py-4 border-r print:hidden\">Төлөв</td>\n                                    </tr>\n                                </thead>\n                                <tbody>\n                                    {data.map((item, index) => (\n                                        <DailyPlanRow\n                                            onRowClick={onRowClick}\n                                            key={index}\n                                            item={item}\n                                            permissions={permissions}\n                                        />\n                                    ))}\n                                    {permissions.create &&\n                                        <tr className=\"bg-white border-b print:hidden\">\n                                            <td className=\"px-6 py-4  font-bold text-gray-900 border-r\" colSpan={7}>\n                                                <PlusCircleIcon className='h-6 m-auto hover:cursor-pointer' onClick={() => handleOpen()} />\n                                            </td>\n                                        </tr>\n                                    }\n                                </tbody>\n                            </table>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </>\n    )\n}\n\nexport default DailyPlan","import React, { useEffect, useState } from 'react';\nimport { Col, Empty, Form, Input, message, Row, Select, Spin } from 'antd';\nimport IntlMessage from 'components/util-components/IntlMessage';\nimport { useLazyQuery, useMutation } from '@apollo/client';\nimport { ALL_SUB_PLANS, CREATE_SUB_PLAN, UPDATE_SUB_PLAN } from 'graphql/plan';\nimport BraftEditor from 'braft-editor';\nimport { SELECT_SUBJECT } from 'graphql/select';\nimport Loading from 'components/shared-components/Loading';\n\nconst { Option } = Select\n\nfunction SubPlanForm ({ closeModal, selectedData, plan }) {\n\n    const [form] = Form.useForm();\n\n    const [subjects, setSubjects] = useState([]);\n\n    const [create, { loading: createLoading }] = useMutation(CREATE_SUB_PLAN, {\n        refetchQueries: [{\n            query: ALL_SUB_PLANS,\n            variables: { plan: plan }\n        }],\n        onCompleted: data => {\n            closeModal();\n            message.success(\"Амжилттай хадгаллаа\")\n        }\n    })\n\n    const [update, { loading: updateLoading }] = useMutation(UPDATE_SUB_PLAN, {\n        refetchQueries: [{\n            query: ALL_SUB_PLANS,\n            variables: { plan: plan }\n        }],\n        onCompleted: data => {\n            closeModal();\n            message.success(\"Амжилттай хадгаллаа\")\n        }\n    })\n\n    const [fetchSubject, { loading: loadingSubject }] = useLazyQuery(SELECT_SUBJECT, {\n        onCompleted: data => {\n            setSubjects(data.allSubjects);\n        }\n    });\n\n    useEffect(() => {\n        if (selectedData.id) {\n            fetchSubject({ variables: { offset: 0, limit: 99999999, filter: selectedData.subject.subject } });\n            const formData ={\n                subject: selectedData.subject.id,\n                hand: selectedData.hand,\n                jumping: selectedData.jumping,\n                running: selectedData.running,\n                shoot: selectedData.shoot,\n                body: selectedData.body,\n                walk: selectedData.walk,\n                game: selectedData.game,\n                consumables: BraftEditor.createEditorState(selectedData.consumables),\n                teachingMethods: BraftEditor.createEditorState(selectedData.teachingMethods),\n                goal: BraftEditor.createEditorState(selectedData.goal),\n                content: BraftEditor.createEditorState(selectedData.content)\n\t\t\t}\n            form.setFieldsValue(formData);\n        } else {\n            form.resetFields()\n        }\n    }, [selectedData])\n\n    \n    const onSubjectSearch = value => {\n        if (value === '') {\n            setSubjects([]);\n        } else {\n            fetchSubject({ variables: { offset: 0, limit: 99999999, filter: value } });\n        }\n    }\n    \n    const onFinish = values => {\n        values.plan= plan\n        values.consumables = values.consumables.toHTML();\n        values.content = values.content.toHTML();\n        values.goal = values.goal.toHTML();\n        values.teachingMethods = values.teachingMethods.toHTML();\n        if (selectedData.id) {\n            values.id = selectedData.id\n            update({ variables: values })\n        } else {\n            create({ variables: values })\n        }\n    };\n\n    return (\n        <Spin spinning={createLoading || updateLoading} tip=\"Ачааллаж байна...\">\n            <Form  \n                id=\"subPlanForm\"\n                layout={'vertical'}\n                form={form}\n                name=\"subPlanForm\" \n                onFinish={onFinish}\n            >\n                <Row gutter={[24, 24]}>\n                    <Col xs={24} xl={12}>\n                        <Form.Item name=\"subject\" label={<IntlMessage id=\"subject\"/>} rules={[\n                            {\n                                required: true,\n                                message: <IntlMessage id=\"form.required\" />\n                            }\n                        ]}>\n                            <Select\n                                showSearch\n                                filterOption={false}\n                                notFoundContent={\n                                    loadingSubject ? <Loading cover='content' /> \n                                    : <Empty image={Empty.PRESENTED_IMAGE_SIMPLE} />\n                                }\n                                onSearch={onSubjectSearch}\n                            >\n                                { subjects.map((item, index) => (\n                                    <Option value={item.id} key={index} > {item.subject}</Option>\n                                ))}\n                            </Select>\n                        </Form.Item>\n                    </Col>\n                    <Col xs={24} xl={12}>\n                        <Form.Item name=\"hand\" label={<IntlMessage id=\"hand\"/>} rules={[\n                            {\n                                max: 150,\n                                message: <IntlMessage id=\"form.max\" />\n                            }\n                        ]}>\n                            <Input.TextArea rows={1} />\n                        </Form.Item>\n                    </Col>\n                    <Col xs={24} xl={12}>\n                        <Form.Item name=\"jumping\" label={<IntlMessage id=\"jumping\"/>} rules={[\n                            {\n                                max: 150,\n                                message: <IntlMessage id=\"form.max\" />\n                            }\n                        ]}>\n                            <Input.TextArea rows={1} />\n                        </Form.Item>\n                    </Col>\n                    <Col xs={24} xl={12}>\n                        <Form.Item name=\"running\" label={<IntlMessage id=\"running\"/>} rules={[\n                            {\n                                max: 150,\n                                message: <IntlMessage id=\"form.max\" />\n                            }\n                        ]}>\n                            <Input.TextArea rows={1} />\n                        </Form.Item>\n                    </Col>\n                    <Col xs={24} xl={12}>\n                        <Form.Item name=\"shoot\" label={<IntlMessage id=\"shoot\"/>} rules={[\n                            {\n                                max: 150,\n                                message: <IntlMessage id=\"form.max\" />\n                            }\n                        ]}>\n                            <Input.TextArea rows={1} />\n                        </Form.Item>\n                    </Col>\n                    <Col xs={24} xl={12}>\n                        <Form.Item name=\"body\" label={<IntlMessage id=\"body\"/>} rules={[\n                            {\n                                max: 150,\n                                message: <IntlMessage id=\"form.max\" />\n                            }\n                        ]}>\n                            <Input.TextArea rows={1} />\n                        </Form.Item>\n                    </Col>\n                    <Col xs={24} xl={12}>\n                        <Form.Item name=\"walk\" label={<IntlMessage id=\"walk\"/>} rules={[\n                            {\n                                max: 150,\n                                message: <IntlMessage id=\"form.max\" />\n                            }\n                        ]}>\n                            <Input.TextArea rows={1} />\n                        </Form.Item>\n                    </Col>\n                    <Col xs={24} xl={12}>\n                        <Form.Item name=\"game\" label={<IntlMessage id=\"game\"/>} rules={[\n                            {\n                                max: 150,\n                                message: <IntlMessage id=\"form.max\" />\n                            }\n                        ]}>\n                            <Input.TextArea rows={1} />\n                        </Form.Item>\n                    </Col>\n                    <Col xs={24} xl={12}>\n                        <Form.Item name=\"consumables\" label={<IntlMessage id=\"consumables\"/>} rules={[\n                            {\n                                required: true,\n                                message: <IntlMessage id=\"form.required\" />\n                            }\n                        ]}>\n                            <BraftEditor\n                                className='border rounded-2'\n                                language=\"en\"\n                            />\n                        </Form.Item>\n                    </Col>\n                    <Col xs={24} xl={12}>\n                        <Form.Item name=\"content\" label={<IntlMessage id=\"content\"/>} rules={[\n                            {\n                                required: true,\n                                message: <IntlMessage id=\"form.required\" />\n                            }\n                        ]}>\n                            <BraftEditor\n                                className='border rounded-2'\n                                language=\"en\"\n                            />\n                        </Form.Item>\n                    </Col>\n                    <Col xs={24} xl={12}>\n                        <Form.Item name=\"goal\" label={<IntlMessage id=\"goal\"/>} rules={[\n                            {\n                                required: true,\n                                message: <IntlMessage id=\"form.required\" />\n                            }\n                        ]}>\n                            <BraftEditor\n                                className='border rounded-2'\n                                language=\"en\"\n                            />\n                        </Form.Item>\n                    </Col>\n                    <Col xs={24} xl={12}>\n                        <Form.Item name=\"teachingMethods\" label={<IntlMessage id=\"teachingMethods\"/>} rules={[\n                            {\n                                required: true,\n                                message: <IntlMessage id=\"form.required\" />\n                            }\n                        ]}>\n                            <BraftEditor\n                                className='border rounded-2'\n                                language=\"en\"\n                            />\n                        </Form.Item>\n                    </Col>\n                </Row>\n            </Form>\n        </Spin>\n    );\n};\n\nexport default SubPlanForm","import React, { forwardRef, useRef, useState } from 'react'\nimport { useMutation, useQuery } from '@apollo/client'\nimport { Button } from 'antd'\nimport { PrinterOutlined, RollbackOutlined , CheckOutlined, PlusCircleOutlined } from '@ant-design/icons';\nimport FormModal from 'components/shared-components/FormModal'\nimport Loading from 'components/shared-components/Loading'\nimport IntlMessage from 'components/util-components/IntlMessage'\nimport { ALL_SUB_PLANS, APPROVE_PLAN, PLAN_BY_ID, ALL_DAILY_PLANS } from 'graphql/plan'\nimport { Link, useParams } from 'react-router-dom'\nimport { useReactToPrint } from 'react-to-print'\nimport SubPlan from './sub-plan'\nimport { CheckPer } from 'hooks/checkPermission';\nimport moment from 'moment';\nimport DailyPlan from './daily-plan';\nimport SubPlanForm from './sub-plan/form';\n\nconst PrintCard = forwardRef (({ data, permissions, subPlans, dailyPlans, handleSubEdit }, ref) => {\n\n    return (\n        <div className='bg-white rounded-4 p-2' ref={ref} >\n            <div className='flex flex-row justify-end'>\n                <h4 className='text-black font-bold mr-40'>БАТЛАВ: </h4>\n                <h4 className=' text-black font-bold'>{data.planById.approvedBy?.familyName} {data.planById.approvedBy?.name}</h4>\n            </div>\n            <div>\n                <h4 className='text-center text-black uppercase'>\n                    {data.planById.section.school.name} {data.planById.section.classes.classes}-{data.planById.section.section} бүлгийн <br/>\n                    {moment(data.planById.startDate).format(\"YYYY.MM.DD\")}-{moment(data.planById.endDate).format(\"YYYY.MM.DD\")} ХҮРТЭЛХ ҮЙЛ АЖИЛЛАГААНЫ ТӨЛӨВЛӨЛТ\n                </h4>\n            </div>\n            <DailyPlan \n                data={dailyPlans?.allDailyPlans}\n                permissions={permissions}\n            />\n            <div className='flex justify-center'>\n                <p className='mr-40 text-black'>Төлөвлөгөө боловсруулсан багш:</p>\n                <p className='text-black'>{`${data.planById.teacher.familyName} ${data.planById.teacher.name}`}</p>\n            </div>\n            { subPlans?.allSubPlans.map((item, index) => (\n                <SubPlan \n                    onClick={handleSubEdit}\n                    key={index} \n                    data={item} \n                    permissions={permissions}\n                    teacher={`${data.planById.teacher.familyName} ${data.planById.teacher.name}`}\n                />\n            ))}\n        </div>\n    )\n\n});\n\nconst Show = () => {\n\n    const { id } = useParams()\n    \n    const componentRef = useRef();\n    const subPlanModalRef = useRef()\n    \n    const [selectedSubPlan, setSelectedSubPlan] = useState({})\n\n    const { data, loading, error } = useQuery(PLAN_BY_ID, {\n        variables: { id: id }\n    })\n\n    const { data: dailyPlans } = useQuery(ALL_DAILY_PLANS, {\n        variables: { plan: id }\n    })\n\n    const { data: subPlans } = useQuery(ALL_SUB_PLANS, {\n        variables: { plan: id }\n    })\n    \n    const [approvePlan] = useMutation(APPROVE_PLAN, {\n        refetchQueries: [\n            { \n                query: PLAN_BY_ID, \n                variables: { id: id } \n            }, \n            { \n                query: ALL_DAILY_PLANS,\n                variables: { plan: id } \n            }, \n            { \n                query: ALL_SUB_PLANS,\n                variables: { plan: id } \n            },\n            // ... subPlans?.allSubPlans.map(item => {\n            //     return {\n            //         query: ALL_SUB_PLAN_ACTIONS,\n            //         variables: { subPlan: item.id }\n            //     }\n            // })\n        ]\n    })\n\n    const permissions = {\n        create: CheckPer('add_plan'), \n        edit: CheckPer('change_plan'),\n        delete: CheckPer('delete_plan'),\n        approve_plan: CheckPer('approve_plan')\n    }\n\n    const handlePrint = useReactToPrint({\n        content: () => componentRef.current,\n    });\n\n    function handleApporve() {\n        approvePlan({ variables: { plan: id } });\n    }\n    \n    function handleCancel() {\n        subPlanModalRef.current.handleCancel()\n    }\n\n    function handleSubCreate() {\n        if (permissions.create) {\n            setSelectedSubPlan({})\n            subPlanModalRef.current.handleOpen()\n        }\n    }\n\n    function handleSubEdit(params) {\n        if (permissions.edit) {\n            setSelectedSubPlan(params)\n            subPlanModalRef.current.handleOpen()\n        }\n    }\n\n    if (loading) {\n        return <Loading cover='content' />\n    }\n    \n    if (error) {\n        return (\n            <section className=\"bg-white \">\n                <div className=\"py-8 px-4 mx-auto max-w-screen-xl lg:py-16 lg:px-6\">\n                    <div className=\"mx-auto max-w-screen-sm text-center\">\n                        <h1 className=\"mb-4 text-7xl tracking-tight font-extrabold lg:text-9xl text-emind-600 \">404</h1>\n                        <p className=\"mb-4 text-3xl tracking-tight font-bold text-emind-600 md:text-4xl \">Хуудас олдсонгүй.</p>\n                        <p className=\"mb-4 text-lg font-light text-gray-500 \">Уучлаарай, бид энэ хуудсыг олж чадсангүй. </p>\n                        <Link to={'/app/plan'} className=\"inline-flex bg-emind text-white hover:bg-primary-800 focus:ring-4 focus:outline-none focus:ring-primary-300 font-medium rounded-lg text-sm px-5 py-2.5 text-center my-4\">Буцах</Link>\n                    </div>   \n                </div>\n            </section>\n        )\n    }\n\n    return (\n        <>\n            <FormModal ref={subPlanModalRef} formName=\"subPlanForm\">\n                <SubPlanForm \n                    plan={id}\n                    selectedData={selectedSubPlan} \n                    closeModal={handleCancel} \n                />\n            </FormModal>\n            <div className='flex justify-between mb-4'>\n                <div>\n                    <Link to={'/app/plan'}>\n                        <Button type=\"default\" icon={<RollbackOutlined />} > <IntlMessage id=\"back\" /> </Button>\n                    </Link>\n                </div>\n                <div>\n                    { !data.planById.approvedBy && permissions.approve_plan &&\n                        <Button className='mr-4 bg-green-400 border-green-200' onClick={handleApporve} type=\"primary\" icon={<CheckOutlined />} > Батлах </Button>\n                    }\n                    {\n                        permissions.create && <Button  className='mr-4 bg-slate-400 border-slate-200' onClick={handleSubCreate} type=\"primary\" icon={<PlusCircleOutlined />} > Төлөвлөгөө нэмэх </Button>\n                    }\n                    <Button onClick={handlePrint} type=\"primary\" icon={<PrinterOutlined />} > <IntlMessage id=\"print\" /> </Button>\n                </div>\n            </div>\n            <div ref={componentRef}>\n                <PrintCard \n                    data={data} \n                    subPlans={subPlans} \n                    dailyPlans={dailyPlans}\n                    permissions={permissions} \n                    handleSubEdit={handleSubEdit}\n                />\n            </div>\n        </>\n    )\n}\n\nexport default Show"],"names":["FormModal","forwardRef","ref","children","title","footer","formName","useState","isModalVisible","setIsModalVisible","useImperativeHandle","handleOpen","handleCancel","width","visible","onCancel","current","okText","cancelText","okButtonProps","form","key","htmlType","ALL_PLANS","gql","CREATE_PLAN","PLAN_BY_ID","UPDATE_PLAN","DELETE_PLAN","ALL_DAILY_PLANS","CREATE_DAILY_PLAN","UPDATE_DAILY_PLAN","DELETE_DAILY_PLAN","ALL_SUB_PLANS","CREATE_SUB_PLAN","UPDATE_SUB_PLAN","DELETE_SUB_PLAN","ALL_SUB_PLAN_ACTIONS","CREATE_SUB_PLAN_ACTION","UPDATE_SUB_PLAN_ACTION","DELETE_SUB_PLAN_ACTION","APPROVE_PLAN","APPROVE_DAILY_PLAN","APPROVE_SUB_PLAN_ACTION","SELECT_STUDENT","SELECT_TEACHER","SELECT_CLASSES","SELECT_SUBJECT","SELECT_PROGRAM","SECTIONS_BY_PROGRAM","SELECT_SECTION","closeModal","selectedData","subPlan","Form","useMutation","refetchQueries","query","variables","onCompleted","data","message","create","createLoading","loading","update","updateLoading","useEffect","id","formData","action","teacherActivity","BraftEditor","studentActivity","setFieldsValue","resetFields","spinning","tip","layout","name","onFinish","values","toHTML","label","rules","required","IntlMessage","max","className","language","confirm","Modal","SubPlanActionsRow","onActionRowClick","item","onDelete","permissions","x","y","points","setPoints","show","setShow","contextMenuRef","useRef","approveSubPlanAction","approveSubPlanActionLoading","onClickOutside","handleClickOutside","event","contains","target","document","addEventListener","removeEventListener","onContextMenuCapture","e","preventDefault","delete","pageX","pageY","onClick","dangerouslySetInnerHTML","__html","approve_plan","stopPropagation","onChange","subPlanAction","isApproved","checked","onCheckBoxChange","disabled","approvedBy","classNames","style","top","left","DeleteTwoTone","twoToneColor","teacher","useParams","setSelectedData","subPlanActionModalRef","useQuery","actions","refetch","plan","deleteSubPlan","deletePlanAction","okType","onOk","params","edit","subject","content","walk","running","jumping","shoot","game","hand","body","goal","teachingMethods","consumables","onDeleteSubPlan","allSubPlanActions","map","index","colSpan","PlusCircleIcon","Option","Select","isAllDay","allDay","monday","tuesday","wednesday","thursday","friday","value","noStyle","shouldUpdate","prevValues","currentValues","getFieldValue","DailyPlanRow","onRowClick","deleteDailyPlan","approveDailyPlan","approveDailyPlanLoading","dailyPlan","onDeleteDailyPlan","dailyPlanModalRef","subjects","setSubjects","useLazyQuery","allSubjects","fetchSubject","loadingSubject","offset","limit","filter","gutter","xs","xl","showSearch","filterOption","notFoundContent","Loading","cover","image","Empty","onSearch","rows","PrintCard","subPlans","dailyPlans","handleSubEdit","planById","familyName","section","school","classes","moment","startDate","format","endDate","allDailyPlans","allSubPlans","componentRef","subPlanModalRef","selectedSubPlan","setSelectedSubPlan","error","approvePlan","CheckPer","handlePrint","useReactToPrint","to","type","icon","RollbackOutlined","CheckOutlined","PlusCircleOutlined","PrinterOutlined"],"sourceRoot":""}