{"version":3,"file":"static/js/4026.a430c4ab.chunk.js","mappings":"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","sources":["components/shared-components/AsyncTable/index.js","components/shared-components/Flex/index.js","graphql/create.js","graphql/delete.js","views/app-views/subject/form.js","views/app-views/subject/table.js","views/app-views/subject/index.js"],"sourcesContent":["import React, { useState } from 'react';\nimport { Button, Card, Input, Pagination, Table } from 'antd'\nimport { PlusCircleOutlined, SearchOutlined } from '@ant-design/icons';\nimport IntlMessage from 'components/util-components/IntlMessage';\nimport Flex from '../Flex';\n\nconst AsyncTable = ({ fetchData, loading, columns, data, permissions, showModal }) => {\n\n    const [filter, setFilter] = useState('');\n\n    const triggerFetch = (page, pageSize) => {\n        var start = 0;\n        var end = pageSize;\n        if (page !== 1) {\n            start = (page * pageSize) - pageSize\n            end = pageSize * page\n        }\n        fetchData({ variables: { offset: start, limit: end, filter: filter, program: 0 } })\n    }\n\n    const onPageChange = (page, pageSize) => {\n        triggerFetch(page, pageSize);\n    }\n\n    const onSearch = e => {\n        const value = e.currentTarget.value\n        fetchData({ variables: { offset: 0, limit: 10, filter: value, program: 0 } })\n        setFilter(value)\n    }\n\n    return (\n\t\t<Card>\n            <Flex alignItems=\"center\" justifyContent=\"between\" mobileFlex={false}>\n                <Flex className=\"mb-1\" mobileFlex={false}>\n                    <div className=\"mr-md-3 mb-3\">\n                        <Input placeholder={'Хайх'} prefix={<SearchOutlined />} onChange={e => onSearch(e)}/>\n                    </div>\n                </Flex>\n                { permissions.create === true &&\n                    <div className=\"mr-md-3 mb-3\">\n                        <Button onClick={showModal} type=\"primary\" icon={<PlusCircleOutlined />} block> <IntlMessage id=\"add_new\" /></Button>\n                    </div>\n                }\n            </Flex>\n            <div className=\"table-responsive\">\n                <Table \n                    // pagination={false}\n                    size=\"small\"\n                    columns={columns} \n                    dataSource={data}\n                    rowKey='id' \n                    bordered\n                    loading={loading}\n                />\n                {/* <Pagination \n                    className='text-right mt-4' \n                    total={count} \n                    onChange={onPageChange}\n                /> */}\n            </div>\n        </Card>    \n    )\n}\n\nexport default AsyncTable","import React from 'react'\nimport PropTypes from 'prop-types'\n\nconst Flex = props => {\n\tconst { children, className, alignItems, justifyContent, mobileFlex, flexDirection } = props\n\tconst getFlexResponsive = () => mobileFlex ? 'd-flex' : 'd-md-flex'\n\treturn (\n\t\t<div className={`${getFlexResponsive()} ${className} ${flexDirection?('flex-' + flexDirection): ''} ${alignItems?('align-items-' + alignItems):''} ${justifyContent?('justify-content-' + justifyContent):''}` }>\n\t\t\t{children}\n\t\t</div>\n\t)\n}\n\nFlex.propTypes = {\n\tclassName: PropTypes.string,\n\talignItems: PropTypes.string,\n\tflexDirection: PropTypes.string,\n\tjustifyContent: PropTypes.string,\n\tmobileFlex: PropTypes.bool\n}\n\nFlex.defaultProps = {\n\tmobileFlex: true,\n\tflexDirection: 'row',\n\tclassName: ''\n};\n\n\nexport default Flex\n","import { gql } from '@apollo/client';\n\nexport const CREATE_SCHOOL = gql`\n    mutation createSchool($name: String, $nameMgl: String) {\n      createSchool(name: $name, nameMgl: $nameMgl) {\n        school {\n          id\n          name\n          nameMgl\n        }\n      }\n    }\n`;\n\nexport const CREATE_SUB_SCHOOL = gql`\n    mutation createSubSchool($name: String, $nameMgl: String, $school: Int!){\n      createSubSchool(name: $name, nameMgl: $nameMgl, school: $school) {\n        subSchool {\n          id\n          name\n          nameMgl \n          school {\n            id\n          }\n        }\n      }\n    }\n`;\n\nexport const REGISTER = gql`\n    mutation register($email: String!, $username: String!, $isTeacher: Boolean!, $isStudent: Boolean!, $password1: String!, $password2: String!){\n      register(email: $email, username: $username, isTeacher: $isTeacher, isStudent: $isStudent, password1: $password1, password2: $password2) {\n          success\n          errors\n          token\n      } \n    }\n\n`;\n\nexport const CREATE_TEACHER = gql`\n    mutation createTeacher($address: String, $birthCity: Int, $birthDistrict: Int, $birthdate: String, $degree: Int,\n                            $familyName: String, $joinBefore: String, $joinDate: String, $name: String, $phone: String, $phone2: String,\n                            $registerNo: String, $school: Int, $sex: String, $status: Int, $subSchool: Int, $teacherCode: String!,\n                            $username: String!, $password: String!, $email: String!, $access: String!\n                            # $user: Int\n                            ) {\n      createTeacher(address: $address, birthCity: $birthCity, birthDistrict: $birthDistrict, birthdate: $birthdate, degree: $degree,\n                             familyName: $familyName, joinBefore: $joinBefore, joinDate: $joinDate, name: $name, phone: $phone, phone2: $phone2, \n                            registerNo: $registerNo, school: $school, sex: $sex, status: $status, subSchool: $subSchool, \n                            teacherCode: $teacherCode, access: $access,\n                            username: $username, password: $password, email: $email\n                            # user: $user \n                            ) {\n        teacher {\n          id\n        }\n      }\n    }\n`;\n\nexport const CREATE_EMPLOYEE = gql`\n    mutation createEmployee(\n                $address: String\n                $birthCity: Int\n                $birthDistrict: Int\n                $birthdate: String\n                $email: String!\n                $employeeCode: String!\n                $familyName: String\n                $group: Int\n                $name: String\n                $password: String!\n                $phone: String\n                $phone2: String\n                $photo: Upload\n                $registerNo: String\n                $sex: String\n                $status: Int\n                $compartment: Int\n                $username: String!\n              ) {\n      createEmployee(\n                address: $address\n                birthCity: $birthCity\n                birthDistrict: $birthDistrict\n                birthdate: $birthdate\n                email: $email\n                employeeCode: $employeeCode\n                familyName: $familyName\n                group: $group\n                name: $name\n                password: $password\n                phone: $phone\n                phone2: $phone2\n                photo: $photo\n                compartment: $compartment\n                registerNo: $registerNo\n                sex: $sex\n                status: $status\n                username: $username\n          ) {\n          employee {\n          id\n        }\n      }\n    }\n`;\n\nexport const CREATE_STUDENT = gql`\n    mutation createStudent(\n      $activity: Int\n      $address: String\n      $allergies: String\n      $birthCity: Int\n      $birthDistrict: Int\n      $birthdate: String\n      $bloodType: String\n      $bodyIndex: String\n      $classes: Int\n      $classtime: Int\n      $drug: String\n      $etc: String\n      $familyName: String\n      $joinDate: String\n      $joinSchoolyear: String\n      $name: String\n      $nationality: String\n      $phone: String\n      $program: Int\n      $registerNo: String\n      $religion: String\n      $school: Int\n      $section: Int\n      $sex: String\n      $state: String\n      $status: Int\n      $statusExtra: Int\n      $surname: String\n      $underlyingDisease: String\n      $vaccine: String\n    ) {\n      createStudent(\n        activity: $activity\n        address: $address\n        allergies: $allergies\n        birthCity: $birthCity\n        birthDistrict: $birthDistrict\n        birthdate: $birthdate\n        bloodType: $bloodType\n        bodyIndex: $bodyIndex\n        classes: $classes\n        classtime: $classtime\n        drug: $drug\n        email: \"dummy@dummy.com\"\n        etc: $etc\n        familyName: $familyName\n        joinDate: $joinDate\n        joinSchoolyear: $joinSchoolyear\n        name: $name\n        nationality: $nationality\n        phone: $phone\n        program: $program\n        registerNo: $registerNo\n        religion: $religion\n        school: $school\n        section: $section\n        sex: $sex\n        state: $state\n        status: $status\n        statusExtra: $statusExtra\n        surname: $surname\n        underlyingDisease: $underlyingDisease\n        vaccine: $vaccine\n      ) {\n        student {\n          id\n        }\n      }\n    }\n`;\n\nexport const CREATE_SECTION = gql`\n  mutation createSection($classes: Int, $maxStudentNum: Int, $program: Int, $teacher: Int,  $school: Int, $section: String, $subSchool: Int) {\n    createSection(classes: $classes, program: $program, school: $school, section: $section, subSchool: $subSchool, maxStudentNum: $maxStudentNum, teacher: $teacher) {\n      section {\n        section\n      }\n    }\n  }\n`\nexport const CREATE_CLASSES = gql`\n  mutation createClasses($activity: Int, $classes: String,\n                          $program: Int, $school: Int, $status: String, $subSchool: Int) {\n    createClasses(activity: $activity, classes: $classes,\n                  program: $program, school: $school, status: $status, subSchool: $subSchool) {\n      classes {\n        classes\n      }\n    }\n  }\n`\nexport const CREATE_PROGRAM = gql`\n    mutation createProgram($program: String, $programMgl: String,  \n                           $status: String, $maxStudentNum: Int, $school: Int, $subSchool: Int) {\n      createProgram(program: $program, programMgl: $programMgl,  \n                    status: $status, maxStudentNum: $maxStudentNum, school: $school, subSchool: $subSchool) {\n        program {\n          id\n        }\n      }\n    }\n`;\n\nexport const CREATE_SUBJECT = gql`\n  mutation createSubject($credit: String, $subject: String, $content: String, $school: Int, $subSchool: Int) {\n    createSubject(credit: $credit, subject: $subject, school: $school, content: $content, subSchool: $subSchool) {\n      subject {\n        credit\n      }\n    }\n  }\n`\nexport const CREATE_PROGRAM_SUBJECT = gql`\n  mutation createProgramSubject($program: Int, $subject: Int) {\n    createProgramSubject(program: $program, subject: $subject) {\n      programSubjectType {\n        id\n      }\n    }\n  }\n`;\n\nexport const CREATE_ROUTINE_STUDENT = gql`\n  mutation createRoutineStudent ($routine: Int, $studentCode: String, $section: Int) {\n    createRoutineStudent (routine: $routine, studentCode: $studentCode, section: $section) {\n      routineStudent {\n        id\n      }\n    }\n  }\n`\n\nexport const CREATE_PARENT = gql`\n    mutation createParent ($address: String, $familyName: String, $name: String, $phone: String, $profession: String, $student: Int) {\n        createParent (address: $address, familyName: $familyName, name: $name, phone: $phone, profession: $profession, student: $student) {\n            parent {\n                name\n            }\n        }\n    }\n`;\n\nexport const CREATE_EVENT_TYPE = gql`\n    mutation createEventType ($color: String, $name: String) {\n        createEventType (color: $color, name: $name) {\n            eventType {\n                name\n            }\n        }\n    }\n`;\n\nexport const CREATE_EVENT = gql`\n    mutation createEvent ($content: String, $description: String, $endAt: String, $eventType: Int, $startAt: String, $title: String) {\n        createEvent (content: $content, description: $description, endAt: $endAt, eventType: $eventType, startAt: $startAt, title: $title) {\n            event {\n                title\n            }\n        }\n    }\n`;","import { gql } from '@apollo/client'\n\nexport const DELETE_CITY = gql `\n    mutation deleteCity($id: ID!){\n        deleteCity(id: $id){\n            city{\n              name\n              code\n            }\n        }\n    }\n`\n\nexport const DELETE_USER = gql `\n    mutation deleteAccount($username: String) {\n        deleteAccount(username: $username) {\n            account {\n                username\n            }\n        }\n    }\n`\n\nexport const DELETE_TEACHER = gql `\n    mutation deleteTeacher($id: ID!){\n      deleteTeacher(id: $id){\n            teacher{\n              name\n            }\n        }\n    }\n`;\n\nexport const DELETE_EMPLOYEES = gql `\n  mutation deleteEmployee($id: ID){\n    deleteEmployee(id: $id){\n      employee{\n        name\n      }\n    }\n  }\n  `;\n\nexport const DELETE_SUBJECT = gql `\n  mutation deleteSubject ($id: ID) {\n    deleteSubject (id: $id) {\n      subject {\n        credit\n      }\n    }\n  }\n`\n\nexport const DELETE_STUDENT = gql `\n    mutation deleteStudent($id: ID!){\n      deleteStudent(id: $id){\n            student{\n              surname\n            }\n        }\n    }\n`\n\nexport const DELETE_SUB_SCHOOL = gql `\n  mutation deleteSubSchool($id: ID){\n    deleteSubSchool(id: $id){\n      subSchool{\n        name\n      }\n    }\n}\n`\n\nexport const DELETE_SCHOOL = gql `\n  mutation deleteSchool($id: ID!){\n    deleteSchool(id: $id){\n      school{\n        name\n      }\n    }\n}\n`\n\nexport const DELETE_SECTION = gql `\n  mutation deleteSection($id: ID){\n    deleteSection(id: $id){\n      section{\n        section\n      }\n    }\n}\n`\n\nexport const DELETE_CLASS = gql `\n  mutation deleteClasses($id: ID!){\n    deleteClasses(id: $id){\n      classes{\n        classes\n      }\n    }\n}\n`\n\nexport const DELETE_PROGRAM = gql `\n    mutation deleteProgram($id: ID!){\n        deleteProgram(id: $id){\n            program{\n                program\n            }\n        }\n    }\n`;\n\nexport const DELETE_ROUTINE = gql `\n    mutation deleteRoutine ($id: ID) {\n        deleteRoutine (id: $id) {\n            routine {\n                createdAt\n            }\n        }\n    }\n`;\n\nexport const DELETE_PARENT = gql `\n    mutation deleteParent ($id: ID) {\n        deleteParent (id: $id) {\n            parent {\n                name\n            }\n        }\n    }\n`;\n\nexport const DELETE_EVENT_TYPE = gql `\n    mutation deleteEventType ($id: ID) {\n        deleteEventType (id: $id) {\n            eventType {\n                name\n            }\n        }\n    }\n`;\n\nexport const DELETE_EVENT = gql`\n    mutation deleteEvent ($id: ID) {\n        deleteEvent (id: $id) {\n            event {\n                title\n            }\n        }\n    }\n`;\n","import React, { useState, useEffect } from 'react';\nimport { Form, Input, message, Spin, Select } from 'antd';\nimport { useMutation, useQuery } from '@apollo/client';\nimport { ALL_SUB_SCHOOLS, ALL_SCHOOLS, ALL_SUBJECTS } from 'graphql/all'\nimport { CREATE_SUBJECT } from 'graphql/create'\nimport { UPDATE_SUBJECT } from 'graphql/update'\nimport IntlMessage from 'components/util-components/IntlMessage';\n\nconst { Option } = Select;\n\nfunction SubjectForm ({editData, formType, setIsModalVisible, refetch}) {\n\n    const [form] = Form.useForm();\n\n    const [createSubject, { loading: createLoading }] = useMutation(CREATE_SUBJECT, {\n\t\trefetchQueries: [ALL_SUBJECTS,\n\t\t\t'allSubjects'\n\t\t],\n\t\tonCompleted: createData => {\n            message.success('Амжилттай хадгаллаа');\n            refetch();\n            setIsModalVisible(false);\n            form.resetFields();\n\t\t}\n\t});\n\n    const [updateSubject, { loading: updateLoading }] = useMutation(UPDATE_SUBJECT, {\n        onCompleted: data => {\n            message.success('Амжилттай хадгаллаа');\n            refetch();\n            setIsModalVisible(false);\n            form.resetFields();\n        }\n    })\n\n    const { data: schoolData } = useQuery(ALL_SCHOOLS, {\n    });\n\n    const { data: subSchoolData } = useQuery(ALL_SUB_SCHOOLS, {\n    });\n    \n    \n    const [school, setSchool] = useState(\"\");\n\n    function schoolOnChange (value) {\n        setSchool(value);\n        form.setFieldsValue({subSchool: null});\n    }\n    \n    let schoolID = null;\n    \n    let subSchoolOption = null;\n    \n    if (school) {\n        schoolID = school;\n    }\n    \n    if (schoolID) {\n        subSchoolOption = subSchoolData?.allSubSchools.filter(Subschool => Subschool.school.id === schoolID).map(filteredSubSchool => (\n            <Option key={filteredSubSchool.id} value={filteredSubSchool.id}>{filteredSubSchool.name}</Option>\n        ))\n    }\n\n    \n    \n    useEffect(() => {\n        if(formType === \"edit\") {\n            const newData = {\n                subject: editData.subject,\n\t\t\t\t// subjectMgl: editData.subjectMgl,\n                content: editData.content,\n\t\t\t\tschool: editData.school.id,\n\t\t\t\tsubSchool: editData.subSchool.id,\n\t\t\t\t// subjectCode: editData.subjectCode,\n\t\t\t\tcredit: editData.credit,\n\t\t\t\tkey: editData.id, \n                // part: editData.part,\n\t\t\t}\n            form.setFieldsValue(newData);\n            setSchool(form.getFieldValue('school'));\n        } else if(formType === \"create\") {\n            form.resetFields();\n        }\n    }, [editData, form, formType]);\n\n    const onFinish = values => {\n        if (formType === \"edit\") {\n            values.id = editData.id\n            updateSubject({ variables: values });\n        } else {\n            createSubject({ variables: values });\n        }\n    };\n\n    return (\n        <Spin spinning={createLoading || updateLoading} tip=\"Ачааллаж байна...\">\n            <Form  \n                id=\"SubjectForm\"\n                                layout={'vertical'}\n                form={form}\n                name=\"control-hooks\" \n                onFinish={onFinish}\n            >\n                <Form.Item name=\"subject\" label={<IntlMessage id=\"subject\" />} rules={[\n                    { \n                        required: true,\n                        message: <IntlMessage id=\"form.required\" />\n                    }\n                ]}>\n                    <Input />\n                </Form.Item>\n                <Form.Item name=\"content\" label={<IntlMessage id=\"content\" />} rules={[\n                    { \n                        required: true,\n                        message: <IntlMessage id=\"form.required\" />\n                    }\n                ]}>\n                    <Input />\n                </Form.Item>\n                {/* <Form.Item name=\"teacher\" label={<IntlMessage id=\"teacher\" />} rules={[\n                    {\n                        required: true,\n                        message: <IntlMessage id=\"form.required\"/>\n                    }\n                ]}>\n                    <Select\n                        showSearch\n                        filterOption={false}\n                        notFoundContent={\n                        loadingTeacher ? <Loading cover='content' /> \n                        : <Empty image={Empty.PRESENTED_IMAGE_SIMPLE} />\n                        }\n                        onSearch={onTeacherSearch}>\n                        { teachers.map((item, index) => (\n                            <Option value={item.id} key={index} >{item.name} / {item.teacherCode} </Option>\n                        ))}\n                    </Select>\n                </Form.Item> */}\n                <Form.Item name=\"school\" label={<IntlMessage id=\"school\" />} rules={[\n                    { \n                        required: true,\n                        message: <IntlMessage id=\"form.required\" />\n                    }\n                ]}>\n                    <Select\n                        onChange={schoolOnChange}\n                    >\n                        {schoolData?.allSchools.map((school, index) => (  \n                            <Option key={index} value={school.id}>{school.name}</Option>\n                        ))}\n                    </Select>\n                </Form.Item>\n                <Form.Item name=\"subSchool\" label={<IntlMessage id=\"sub-school\" />} rules={[\n                    { \n                        required: true,\n                        message: <IntlMessage id=\"form.required\" />\n                    }\n                ]}>\n                    <Select\n                        placeholder=\"Тэнхим\"\n                    >\n                        {subSchoolOption}\n                    </Select>\n                </Form.Item>\n                <Form.Item name=\"credit\" label={<IntlMessage id=\"credit\" />} rules={[\n                    { \n                        required: true,\n                        message: <IntlMessage id=\"form.required\" />\n                    }\n                ]}>\n                    <Input />\n                </Form.Item>\n            </Form>\n        </Spin>\n    );\n};\n\nexport default SubjectForm","import React, { useState, useEffect } from 'react'\nimport { Modal, message, Button } from 'antd';\nimport { DeleteTwoTone, EditTwoTone } from '@ant-design/icons';\nimport utils from 'utils'\nimport SubjectForm from './form'\nimport { useMutation, useLazyQuery } from '@apollo/client';\nimport { ALL_SUBJECTS } from 'graphql/all';\nimport { DELETE_SUBJECT } from 'graphql/delete';\nimport IntlMessage from 'components/util-components/IntlMessage';\nimport AsyncTable from 'components/shared-components/AsyncTable';\n\n// import { SELECT_TEACHER } from 'graphql/select'\n\nfunction  SubjectTable (props) {\n    \n\tconst [list, setList] = useState([]);\n\n\tconst [fetchData, { loading, refetch }] = useLazyQuery(ALL_SUBJECTS, {\n        fetchPolicy: 'network-only',\n        onCompleted: data => {\n            setList(data.allSubjects);\n        }\n\t});\n\n    useEffect(() => {\n        fetchData({ variables: { offset: 0, limit: 10, filter: \"\" } })\n    }, [fetchData])\n\n\tconst [editData, setEditData] = useState([]);\n\tconst [formType, setFormType] = useState(\"\");\n\n\tconst editRow = row => {\n\t\tsetEditData(row);\n\t\tsetFormType(\"edit\")\n\t\tsetIsModalVisible(true);\n\t};\n\n\tconst { confirm } = Modal;\n\n\tconst [deleteSubSchool] = useMutation(DELETE_SUBJECT, {\n\t\tonCompleted: data => {\n            refetch();\n            message.success('Амжилттай устлаа');\n\t\t}\n\t});\n\t\n\tfunction deleteRow(row) {\n\t\tconfirm({\n            title: 'Устгах уу?',\n            okText: 'Устгах',\n            okType: 'danger',\n            cancelText: 'Болих',\n            onOk() {\n                deleteSubSchool({ variables: { id: row.id } }); \n            },\n\t\t});\n\t}\n\n\tconst tableColumns = [\n\t\t{\n\t\t\ttitle: <IntlMessage id=\"subject\" />,\n\t\t\tkey: 'subject',\n\t\t\tdataIndex: 'subject',\n\t\t\tsorter: (a, b) => utils.antdTableSorter(a, b, 'subject')\n\t\t},\n\t\t{\n\t\t\ttitle: <IntlMessage id=\"teacher\"/>,\n\t\t\tkey: 'teacher',\n\t\t\tdataIndex: ['createUserid', 'teacher', 'name'],\n\t\t\tsorter: (a, b) => utils.antdTableSorter(a, b, 'teacher')\n\t\t},\n\t\t{\n            title: <IntlMessage id=\"content\" />,\n\t\t\tkey: 'content',\n            dataIndex: 'content', \n\t\t\tsorter: (a, b) => utils.antdTableSorter(a, b, 'content')\n\t\t},\n\t\t{\n            title: <IntlMessage id=\"school\" />,\n            dataIndex: ['school', 'name'], \n\t\t\tkey: 'school',\n\t\t\tsorter: (a, b) => utils.antdTableSorter(a, b, 'school')\n\t\t},\n\t\t{\n\t\t\ttitle: <IntlMessage id=\"sub-school\" />,\n            dataIndex: ['subSchool', 'name'], \n\t\t\tkey: 'subSchool',\n\t\t\tsorter: (a, b) => utils.antdTableSorter(a, b, 'subSchool')\n\t\t},\n\t\t{\n\t\t\ttitle: <IntlMessage id=\"credit\" />,\n\t\t\tdataIndex: 'credit',\n\t\t\tkey: 'credit',\n            // render(elm) {\n            //     return (\n            //          <span>{Math.floor(elm)}</span>\n            //     );\n            // },\n\t\t\tsorter: (a, b) => utils.antdTableSorter(a, b, 'credit')\n\t\t},\n\t];\n\tif (props.permissions.edit === true || props.permissions.destroy === true) {\n\t\ttableColumns.push(\n\t\t\t{\n\t\t\t\ttitle: <IntlMessage id=\"main.action\" />,\n\t\t\t\tkey: 'actions',\n\t\t\t\tdataIndex: 'actions',\n\t\t\t\twidth: '15vw',\n\t\t\t\trender: (_, elm) => (\n\t\t\t\t\t<div className=\"text-center\">\n\t\t\t\t\t\t{ props.permissions.edit === true &&\n\t\t\t\t\t\t\t<Button size=\"small\" onClick={() => editRow(elm)} type=\"text\" icon={<EditTwoTone twoToneColor=\"#ffdb00\"/>} > <IntlMessage id=\"edit\" /></Button>\n\t\t\t\t\t\t}\n\t\t\t\t\t\t{ props.permissions.destroy === true &&\n\t\t\t\t\t\t\t<Button size=\"small\" onClick={() => deleteRow(elm)} type=\"text\" icon={<DeleteTwoTone twoToneColor=\"#f42f2f\"/>} > <IntlMessage id=\"delete\" /></Button>\n\t\t\t\t\t\t}\n\t\t\t\t\t</div>\n\t\t\t\t)\n\t\t\t}\n\t\t)\n\t}\n\t\n\tconst [isModalVisible, setIsModalVisible] = useState(false);\n\n    const showModal = () => {\n\t\tsetFormType(\"create\")\n      \tsetIsModalVisible(true);\n    };\n\n    const handleCancel = () => {\n      \tsetIsModalVisible(false);\n    };\n\n\treturn (\n\t\t<>\n            <AsyncTable \n                fetchData={fetchData}\n                loading={loading}\n                columns={tableColumns}\n                data={list}\n                permissions={props.permissions}\n                showModal={showModal}\n           />\n            <Modal \n                forceRender \n                title={editData ? <IntlMessage id=\"edit\" /> : <IntlMessage id=\"add_new\" /> }\n                visible={isModalVisible} \n                okText={<IntlMessage id=\"main.okText\" />}\n                cancelText={<IntlMessage id=\"main.cancelText\" />}\n                onCancel={handleCancel}\n                okButtonProps={{form:'SubjectForm', key: 'submit', htmlType: 'submit'}}\n                >\n                    <SubjectForm\n                        refetch={refetch} \n                        editData={editData} \n                        formType={formType} \n                        setIsModalVisible={setIsModalVisible}\n                    />\n            </Modal>\n\t\t</>\n\t\t\n\t)\n}\n\nexport default SubjectTable\n","import React from \"react\";\nimport SubjectTable from './table';\nimport { CheckPer } from 'hooks/checkPermission';\nimport Loading from \"components/shared-components/Loading\";\n\nconst Index = () => {\n\n    const create = CheckPer('add_subject');\n    const edit = CheckPer('change_subject');\n    const destroy = CheckPer('delete_subject');\n\n    const permissions = {\n        create: create,\n        edit: edit,\n        destroy: destroy\n    }\n\n    if (Object.values(permissions).indexOf('loading') > -1) {\n        return <Loading cover=\"content\" />\n    }\n\n    return (\n        <SubjectTable permissions={permissions} />\n    )\n}\n\nexport default Index;\n"],"names":["fetchData","loading","columns","data","permissions","showModal","useState","setFilter","alignItems","justifyContent","mobileFlex","className","placeholder","prefix","onChange","e","value","currentTarget","variables","offset","limit","filter","program","onSearch","create","onClick","type","icon","block","id","size","dataSource","rowKey","bordered","Flex","props","children","flexDirection","defaultProps","CREATE_SCHOOL","gql","CREATE_SUB_SCHOOL","CREATE_TEACHER","CREATE_EMPLOYEE","CREATE_STUDENT","CREATE_SECTION","CREATE_CLASSES","CREATE_PROGRAM","CREATE_SUBJECT","CREATE_PARENT","CREATE_EVENT_TYPE","CREATE_EVENT","DELETE_TEACHER","DELETE_EMPLOYEES","DELETE_SUBJECT","DELETE_STUDENT","DELETE_SUB_SCHOOL","DELETE_SCHOOL","DELETE_SECTION","DELETE_CLASS","DELETE_PROGRAM","DELETE_PARENT","DELETE_EVENT_TYPE","DELETE_EVENT","Option","Select","editData","formType","setIsModalVisible","refetch","Form","form","useMutation","refetchQueries","ALL_SUBJECTS","onCompleted","createData","message","resetFields","createSubject","createLoading","UPDATE_SUBJECT","updateSubject","updateLoading","schoolData","useQuery","ALL_SCHOOLS","subSchoolData","ALL_SUB_SCHOOLS","school","setSchool","schoolID","subSchoolOption","allSubSchools","Subschool","map","filteredSubSchool","name","useEffect","newData","subject","content","subSchool","credit","key","setFieldsValue","getFieldValue","spinning","tip","layout","onFinish","values","label","IntlMessage","rules","required","allSchools","index","list","setList","useLazyQuery","fetchPolicy","allSubjects","setEditData","setFormType","confirm","Modal","deleteSubSchool","tableColumns","title","dataIndex","sorter","a","b","utils","edit","destroy","push","width","render","_","elm","EditTwoTone","twoToneColor","row","okText","okType","cancelText","onOk","DeleteTwoTone","isModalVisible","AsyncTable","forceRender","visible","onCancel","okButtonProps","htmlType","CheckPer","Object","indexOf","Loading","cover"],"sourceRoot":""}