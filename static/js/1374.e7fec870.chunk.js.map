{"version":3,"file":"static/js/1374.e7fec870.chunk.js","mappings":"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","sources":["components/shared-components/Flex/index.js","graphql/lesson.js","graphql/select.js","components/shared-components/StudentSelect/index.js","views/app-views/online-lesson/students.js"],"sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\n\nconst Flex = props => {\n\tconst { children, className, alignItems, justifyContent, mobileFlex, flexDirection } = props\n\tconst getFlexResponsive = () => mobileFlex ? 'd-flex' : 'd-md-flex'\n\treturn (\n\t\t<div className={`${getFlexResponsive()} ${className} ${flexDirection?('flex-' + flexDirection): ''} ${alignItems?('align-items-' + alignItems):''} ${justifyContent?('justify-content-' + justifyContent):''}` }>\n\t\t\t{children}\n\t\t</div>\n\t)\n}\n\nFlex.propTypes = {\n\tclassName: PropTypes.string,\n\talignItems: PropTypes.string,\n\tflexDirection: PropTypes.string,\n\tjustifyContent: PropTypes.string,\n\tmobileFlex: PropTypes.bool\n}\n\nFlex.defaultProps = {\n\tmobileFlex: true,\n\tflexDirection: 'row',\n\tclassName: ''\n};\n\n\nexport default Flex\n","import { gql } from '@apollo/client';\n\nexport const ALL_ONLINE_TYPE = gql `\n    query allOnlineTypes {\n        allOnlineTypes {\n            id\n            name\n        }\n    }\n\n`;\n\nexport const ALL_ONLINE_FILE = gql `\n    query allOnlineFiles ($folder: Int){\n        allOnlineFiles (folder: $folder){\n            id\n            file\n        }\n    }\n`;\n\nexport const ALL_FOLDERS = gql `\n    query allFolders ($folder: Int){\n        allFolders(folder: $folder){\n            id\n            name\n        }\n    }\n    `\n\nexport const CREATE_ONLINE_FILE = gql `\n    mutation createOnlineFile($file: Upload!, $folder: Int) {\n        createOnlineFile(file: $file, folder: $folder) {\n            onlineFile {\n                id\n                file\n            }\n        }\n    }\n`;\n\nexport const CREATE_ONLINE_FILE_FOLDER = gql `\n    mutation createOnlineFileFolder($name: String, $subFolder: Int){\n        createOnlineFileFolder(name: $name, subFolder: $subFolder){\n            onlineFileFolder{\n                id\n            }\n        }\n    }\n`;\n\nexport const DELETE_ONLINE_FILE = gql `\n    mutation deleteOnlineFile ($id: ID) {\n        deleteOnlineFile (id: $id) {\n            onlineFile {\n                file\n            }\n        }\n    }\n`;\n\nexport const DELETE_ONLINE_FILE_FOLDER = gql`\n    mutation deleteOnlineFileFolder ($id: Int){\n        deleteOnlineFileFolder (id: $id){\n            onlineFileFolder {\n                name\n            }\n        }\n    }\n`\n\nexport const CREATE_ONLINE_LESSON = gql`\n    mutation createOnlineLesson ($description: String, $schoolyear: Int, $status: String) {\n        createOnlineLesson (description: $description, schoolyear: $schoolyear, status: $status) {\n            onlineLesson {\n                id\n            }\n        }\n    }\n`;\n\nexport const UPDATE_ONLINE_LESSON = gql`\n    mutation updateOnlineLesson ($description: String, $id: ID, $schoolyear: Int, $status: String) {\n        updateOnlineLesson (description: $description, id: $id, schoolyear: $schoolyear, status: $status) {\n            onlineLesson {\n                id\n            }\n        }\n    }\n`;\n\nexport const ALL_ONLINE_LESSON = gql`\n    query allOnlineLessons ($offset: Int!, $limit: Int!, $filter: String) {\n        count (appName: \"online_lesson\", modelName: \"Online_lesson\", filter: $filter) {\n            count\n        }\n        allOnlineLessons (offset: $offset, limit: $limit, filter: $filter) {\n            id\n            schoolyear {\n                id\n                schoolyear\n            }\n            description\n            status\n            createUserid {\n                isTeacher\n                teacher {\n                    name\n                }\n            }\n        }\n    }\n`;\n\nexport const LESSON_BY_ID = gql `\n    query onlineLessonById ($id: Int!) {\n        onlineLessonById (id: $id) {\n            id\n            schoolyear {\n                schoolyear\n                id\n            }\n            description\n            status\n        }\n    }\n`;\n\nexport const DELETE_ONLINE_LESSON = gql `\n    mutation deleteOnlineLesson ($id: ID) {\n        deleteOnlineLesson (id: $id) {\n            onlineLesson {\n                status\n            }\n        }\n    }\n`;\n\nexport const ALL_SUB_LESSON_BY_LESSON = gql `\n    query allOnlineSubByLesson ($onlineLesson: Int!) {\n        allOnlineSubByLesson (onlineLesson: $onlineLesson) {\n            id\n            title\n            description\n            createUserid {\n                isTeacher\n                teacher {\n                    name\n                }\n            }\n            onlineType {\n                id\n                name\n            }\n            onlineSubFileSet {\n                onlineFile {\n                    id\n                    file\n                }\n            }\n            status\n        }\n    }\n`;\n\nexport const CREATE_SUB_LESSON = gql`\n    mutation createOnlineSub ($description: String, $onlineLesson: Int, $status: String, $title: String, $onlineType: Int) {\n        createOnlineSub (description: $description, onlineLesson: $onlineLesson, status: $status, title: $title, onlineType: $onlineType) {\n            onlineSub {\n                id\n            }\n        }\n    }\n`;\n\nexport const UPDATE_SUB_LESSON = gql `\n    mutation updateOnlineSub ( $description: String, $id: ID, $onlineLesson: Int, $status: String, $title: String, $onlineType: Int) {\n        updateOnlineSub (description: $description, id: $id, onlineLesson: $onlineLesson, status: $status, title: $title, onlineType: $onlineType) {\n            onlineSub {\n                id\n            }\n        }\n    }\n`;\n\nexport const DELETE_SUB_LESSON = gql `\n    mutation deleteOnlineSub ($id: ID) {\n        deleteOnlineSub (id: $id) {\n            onlineSub {\n                title\n            }\n        }\n    }\n`;\n\nexport const SUB_BY_ID = gql `\n    query onlineSubById ($id: Int!) {\n        onlineSubById (id: $id) {\n            title\n            description\n            onlineSubFileSet {\n                onlineFile {\n                    id\n                    file\n                }\n            }\n            onlineType {\n                id\n                name\n            }\n            onlineAttendanceSet {\n                student {\n                    id\n                    studentCode\n                    name\n                    familyName\n                }\n            }\n            status\n            createdAt\n        }\n    } \n`;\n\nexport const CREATE_ONLINE_STUDENT = gql `\n    mutation createOnlineStudent ($onlineLesson: Int, $studentCode: String, $section: Int) {\n        createOnlineStudent (onlineLesson: $onlineLesson, studentCode: $studentCode, section: $section) {\n            onlineStudent {\n                id\n            }\n        }\n    }\n`;\n\nexport const DELETE_ONLINE_STUDENT = gql `\n    mutation deleteOnlineStudent ($id: ID) {\n        deleteOnlineStudent (id: $id) {\n            onlineStudent {\n                student {\n                    name\n                }\n            }\n        }\n    }\n`;\n\nexport const ALL_ONLINE_STUDENT_BY_LESSON = gql `\n    query allOnlineStudentByLesson ($onlineLesson: Int!) {\n        allOnlineStudentByLesson (onlineLesson: $onlineLesson) {\n            id\n            student {\n                id\n                familyName\n                name\n                studentCode\n            }\n        }\n    }\n`;\n\nexport const ALL_ONLINE_SUB_FILES = gql`\n    query allOnlineSubFiles ($onlineSub: Int) {\n        allOnlineSubFiles (onlineSub: $onlineSub) {\n            id\n            onlineFile {\n                id\n                file\n            }\n        }\n    }\n`\n\nexport const CREATE_ONLINE_SUB_FILE = gql`\n    mutation createOnlineSubFile ($onlineFile: Int, $onlineSub: Int) {\n        createOnlineSubFile (onlineFile: $onlineFile, onlineSub: $onlineSub) {\n            onlineSubFile {\n                id\n            }\n        }\n    }\n`\n\nexport const DELETE_ONLINE_SUB_FILE = gql`\n    mutation deleteOnlineSubFile ($id: Int) {\n        deleteOnlineSubFile (id: $id) {\n            onlineSubFile {\n                id\n            }\n        }\n    }\n`","import { gql } from '@apollo/client';\n\nexport const SELECT_STUDENT = gql`\n    query allStudents ($filter: String) {\n        allStudents (filter: $filter) {\n            id\n            familyName\n            name\n            studentCode\n        }\n\t}\n`;\n\nexport const SELECT_TEACHER = gql`\n    query allTeachers ($filter: String) {\n        allTeachers (filter: $filter) {\n            id\n            familyName\n            name\n            teacherCode\n        }\n    }\n`;\n\n// export const SELECT_SECTION_TEACHER = gql `\n//     query allAssistantTeachers ($filter: String) {\n//         allAssistantTeachers (filter: $filter) {\n//             id\n//             familyName\n//             name \n//             teacherCode\n//         }\n//     }\n// `\n\nexport const SELECT_CLASSES = gql`\n    query allClassess ($filter: String, $program: Int) {\n        allClassess (filter: $filter, program: $program) {\n            id\n            classes\n        }\n\t}\n`;\n\nexport const SELECT_SUBJECT = gql `\n    query allSubjects ($offset: Int!, $limit: Int!, $filter: String) {\n        count (appName: \"subject\", modelName: \"Subject\", filter: $filter) {\n            count\n        }\n        allSubjects (offset: $offset, limit: $limit, filter: $filter) {\n            id\n            subject \n            content\n        }\n    }\n`;\n\nexport const SELECT_PROGRAM = gql`\n    query selectProgram {\n        allPrograms {\n            id\n            program\n        }\n    }\n`;\n\nexport const SECTIONS_BY_PROGRAM = gql`\n    query sectionsByProgram ($program: Int!) {\n        sectionsByProgram (program: $program) {\n            id\n            section \n            classes {\n                classes\n            }\n        }\n    }\n`;\n\nexport const SELECT_SECTION = gql `\n    query sectionsByClasses ($classes: Int!){\n        sectionsByClasses (classes: $classes) {\n            id \n            section\n        }\n    }\n`","import React, { useState } from 'react';\nimport { useLazyQuery, useQuery } from '@apollo/client';\nimport { Button, Card, Col, Empty, Form, Row, Select, Skeleton } from 'antd'\nimport IntlMessage from 'components/util-components/IntlMessage';\nimport { SECTIONS_BY_PROGRAM, SELECT_PROGRAM, SELECT_STUDENT } from 'graphql/select';\nimport Loading from '../Loading';\n\nconst { Option } = Select;\n\nconst StudentSelect = ({ submitData, mutationData, loading }) => {\n\n    const [formSection] = Form.useForm();\n    const [formStudent] = Form.useForm();\n\n    const [programs, setPrograms] = useState([]);\n    const [sections, setSections] = useState([]);\n    const [students, setStudents] = useState([]);\n\n    const { loading: programLoading } = useQuery(SELECT_PROGRAM, {\n        onCompleted: data => {\n            setPrograms(data.allPrograms);\n        }\n    })\n\n    const [fetchSection, { loading: sectionLoading}] = useLazyQuery(SECTIONS_BY_PROGRAM, {\n        onCompleted: data => {\n            setSections(data.sectionsByProgram);\n        }\n    })\n\n    const [fetchStudent, { loading: studentLoading }] = useLazyQuery(SELECT_STUDENT, {\n        onCompleted: data => {\n            setStudents(data.allStudents)\n        }\n    })\n\n    const onFinish = (values) => {\n        if (!values.hasOwnProperty(\"studentCode\")) {\n            values.studentCode = \"\"\n        } else {\n            values.section = 0\n        }\n        const variables = Object.assign(values, mutationData)\n        submitData({ variables: variables });\n    }\n\n    const onProgramSelect = (program) => {\n        formSection.setFieldsValue({\n            section: \"\",\n        });\n        fetchSection({ variables: { program: program } })\n    }\n\n    const onStudentSearch = (value) => {\n        if (value === '') {\n            setStudents([]);\n        } else {\n            fetchStudent({ variables: { offset: 0, limit: 99999999, filter: value } });\n        }\n    }\n\n    return (\n        <Skeleton active loading={programLoading} >\n            <Row gutter={16}>\n                <Col xs={24} xl={12}>\n                    <Card \n                        className='mt-4'\n                        title={<IntlMessage id=\"by-section\" />}\n                    >\n                        <Form  \n                            id=\"section\"\n                            layout={'vertical'}\n                            form={formSection}\n                            name=\"control-hooks\" \n                            onFinish={onFinish}\n                        >\n                            <Form.Item \n                                name=\"program\" \n                                label={<IntlMessage id=\"program\" />} \n                                rules={[\n                                    { \n                                        required: true,\n                                         message: <IntlMessage id=\"form.required\" /> \n                                    }\n                                ]}\n                            >\n                                <Select\n                                    onSelect={onProgramSelect}\n                                    allowClear\n                                    showSearch\n                                    optionFilterProp=\"children\"\n                                    filterOption={(input, option) =>\n                                        option.children.toString().toLowerCase().indexOf(input.toLowerCase()) >= 0\n                                    }\n                                >\n                                    { programs.map((program, index) => (\n                                        <Option value={program.id} key={index}>{program.program} / {program.programNumeric}</Option>\n                                    ))}\n                                </Select>\n                            </Form.Item>\n                            <Form.Item \n                                name=\"section\" \n                                label={<IntlMessage id=\"section\" />} \n                                rules={[\n                                    { \n                                        required: true,\n                                         message: <IntlMessage id=\"form.required\" /> \n                                    }\n                                ]}\n                            >\n                                <Select\n                                    allowClear\n                                    notFoundContent={\n                                        sectionLoading ? <Loading cover='content' /> \n                                        : <Empty image={Empty.PRESENTED_IMAGE_SIMPLE} />\n                                    }\n                                >\n                                    { sections.map((section, index) => (\n                                        <Option value={section.id} key={index}>{section.classes.classes} / {section.section}</Option>\n                                    ))}\n                                </Select>\n                            </Form.Item>\n                            <Form.Item className='text-right'>\n                                <Button className=\"mr-2\" type=\"primary\" htmlType=\"submit\" loading={loading}>\n                                    <IntlMessage id=\"main.okText\" />\n                                </Button>\n                            </Form.Item>\n                        </Form>\n                    </Card>\n                </Col>\n                <Col xs={24} xl={12}>\n                    <Card \n                        className='mt-4'\n                        title={<IntlMessage id=\"by-student-code\" />}\n                    >\n                        <Form  \n                            id=\"student\"\n                            layout={'vertical'}\n                            form={formStudent}\n                            name=\"control-hooks\" \n                            onFinish={onFinish}\n                        >\n                            <Form.Item \n                                name=\"studentCode\" \n                                label={<IntlMessage id=\"studentCode\" />} \n                                rules={[\n                                    { \n                                        required: true,\n                                        message: <IntlMessage id=\"form.required\" /> \n                                    }\n                                ]}\n                            >\n                                <Select\n                                    showSearch\n                                    filterOption={false}\n                                    notFoundContent={\n                                        studentLoading ? <Loading cover='content' /> \n                                        : <Empty image={Empty.PRESENTED_IMAGE_SIMPLE} />\n                                    }\n                                    onSearch={onStudentSearch}\n                                >\n                                    { students.map((student, index) => (\n                                        <Option value={student.studentCode} key={index}> {student.familyName} {student.name} / {student.studentCode}</Option>\n                                    ))}\n                                </Select>\n                            </Form.Item>\n                            <Form.Item className='text-right'>\n                                <Button className=\"mr-2\" type=\"primary\" htmlType=\"submit\" loading={loading}>\n                                    <IntlMessage id=\"main.okText\" />\n                                </Button>\n                            </Form.Item>\n                        </Form>\n                    </Card>\n                </Col>\n            </Row>\n        </Skeleton>\n    )\n}\n\nexport default StudentSelect","import React from 'react';\nimport { Card, Table, Button, message, Modal, Empty } from 'antd';\nimport { DeleteTwoTone, RollbackOutlined } from '@ant-design/icons'\nimport { useQuery, useMutation } from '@apollo/client';\nimport Loading from 'components/shared-components/Loading';\nimport { CREATE_ONLINE_STUDENT, ALL_ONLINE_STUDENT_BY_LESSON, DELETE_ONLINE_STUDENT } from 'graphql/lesson';\nimport Flex from 'components/shared-components/Flex';\nimport { useHistory, useParams } from 'react-router-dom';\nimport IntlMessage from 'components/util-components/IntlMessage';\nimport StudentSelect from 'components/shared-components/StudentSelect';\n\nconst { confirm } = Modal;\n\nconst Students = (props) => {\n\n    const history = useHistory();\n    const { lesson } = useParams();\n\n    const { data, loading, refetch } = useQuery(ALL_ONLINE_STUDENT_BY_LESSON, {\n        variables: { onlineLesson: lesson }\n    });\n\n    const [create, { loading: createLoading }] = useMutation(CREATE_ONLINE_STUDENT, {\n        onCompleted: data => {\n            refetch();\n            message.success('Амжилттай хадгаллаа!');\n        }\n    });\n    const [destroy, { loading: destroyLoading }] = useMutation(DELETE_ONLINE_STUDENT, {\n        onCompleted: data => {\n            refetch();\n            message.success('Амжилттай устлаа!');\n        }\n    });\n\n    const handleDestroy = (value) => {\n        confirm({\n            title: 'Устгах уу?',\n            okText: 'Устгах',\n            okType: 'danger',\n            cancelText: 'Болих',\n            onOk() {\n                destroy({ variables: { id: value } }); \n            },\n          });\n    }\n\n    const participant_colums = [\n        {\n            title: <IntlMessage id=\"studentCode\" />,\n            dataIndex: ['student', 'studentCode'],\n            key: 'studentCode',\n        },\n        {\n            title: <IntlMessage id=\"familyName\" />,\n            dataIndex: ['student', 'familyName'],\n            key: 'familyName',\n        },\n        {\n            title: <IntlMessage id=\"name\" />,\n            dataIndex: ['student', 'name'],\n            key: 'name',\n        },\n        {\n            title: <IntlMessage id=\"main.action\" />,\n            dataIndex: 'id',\n            key: 'id',\n            width: '30px',\n            render: (_, elm) => (\n                <div className=\"text-center\">\n                    <Button loading={destroyLoading} size=\"small\" onClick={() => handleDestroy(elm.id)} type=\"text\" icon={<DeleteTwoTone twoToneColor=\"#f42f2f\"/>} > <IntlMessage id=\"delete\" /></Button>\n                </div>\n            )\n        },\n    ]\n\n    if (loading) {\n        return (\n            <Loading cover=\"content\" />\n        )\n    }\n\n    return (\n        <div>\n            <Flex alignItems=\"center\" justifyContent=\"between\" mobileFlex={false}>\n                <Flex mobileFlex={false}>\n                    <div className='text-right' >\n                        <Button onClick={() => history.goBack()} type=\"default\" icon={<RollbackOutlined />} block> {<IntlMessage id=\"back\" />}</Button>\n                    </div>\n                </Flex>\n            </Flex>\n            <StudentSelect \n                submitData={create}\n                loading={createLoading}\n                mutationData={{ onlineLesson: lesson }}\n            />\n            <Card \n                className='mt-4'\n                title={<IntlMessage id=\"student\" />}\n            >\n                <Table\n                    className='mt-2'\n                    columns={participant_colums} \n                    rowKey='id'\n                    bordered\n                    pagination={false}\n                    dataSource={data.allOnlineStudentByLesson} \n                />\n            </Card>\n        </div>\n    )\n}\n\nexport default Students"],"names":["Flex","props","children","className","alignItems","justifyContent","mobileFlex","flexDirection","defaultProps","ALL_ONLINE_TYPE","gql","ALL_ONLINE_FILE","ALL_FOLDERS","CREATE_ONLINE_FILE","CREATE_ONLINE_FILE_FOLDER","DELETE_ONLINE_FILE","DELETE_ONLINE_FILE_FOLDER","CREATE_ONLINE_LESSON","UPDATE_ONLINE_LESSON","ALL_ONLINE_LESSON","LESSON_BY_ID","DELETE_ONLINE_LESSON","ALL_SUB_LESSON_BY_LESSON","CREATE_SUB_LESSON","UPDATE_SUB_LESSON","DELETE_SUB_LESSON","SUB_BY_ID","CREATE_ONLINE_STUDENT","DELETE_ONLINE_STUDENT","ALL_ONLINE_STUDENT_BY_LESSON","CREATE_ONLINE_SUB_FILE","SELECT_STUDENT","SELECT_TEACHER","SELECT_CLASSES","SELECT_SUBJECT","SELECT_PROGRAM","SECTIONS_BY_PROGRAM","SELECT_SECTION","Option","Select","submitData","mutationData","loading","Form","formSection","formStudent","useState","programs","setPrograms","sections","setSections","students","setStudents","programLoading","useQuery","onCompleted","data","allPrograms","useLazyQuery","sectionsByProgram","fetchSection","sectionLoading","allStudents","fetchStudent","studentLoading","onFinish","values","hasOwnProperty","section","studentCode","variables","Object","assign","active","gutter","xs","xl","title","IntlMessage","id","layout","form","name","label","rules","required","message","onSelect","program","setFieldsValue","allowClear","showSearch","optionFilterProp","filterOption","input","option","toString","toLowerCase","indexOf","map","index","value","programNumeric","notFoundContent","Loading","cover","image","Empty","classes","type","htmlType","onSearch","offset","limit","filter","student","familyName","confirm","Modal","history","useHistory","lesson","useParams","onlineLesson","refetch","useMutation","create","createLoading","destroy","destroyLoading","participant_colums","dataIndex","key","width","render","_","elm","size","onClick","okText","okType","cancelText","onOk","icon","DeleteTwoTone","twoToneColor","goBack","RollbackOutlined","block","columns","rowKey","bordered","pagination","dataSource","allOnlineStudentByLesson"],"sourceRoot":""}