{"version":3,"file":"static/js/4073.4de63501.chunk.js","mappings":"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","sources":["components/shared-components/Flex/index.js","graphql/core.js","graphql/select.js","views/app-views/transfer-student/form.js","views/app-views/transfer-student/table.js","views/app-views/transfer-student/index.js"],"sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\n\nconst Flex = props => {\n\tconst { children, className, alignItems, justifyContent, mobileFlex, flexDirection } = props\n\tconst getFlexResponsive = () => mobileFlex ? 'd-flex' : 'd-md-flex'\n\treturn (\n\t\t<div className={`${getFlexResponsive()} ${className} ${flexDirection?('flex-' + flexDirection): ''} ${alignItems?('align-items-' + alignItems):''} ${justifyContent?('justify-content-' + justifyContent):''}` }>\n\t\t\t{children}\n\t\t</div>\n\t)\n}\n\nFlex.propTypes = {\n\tclassName: PropTypes.string,\n\talignItems: PropTypes.string,\n\tflexDirection: PropTypes.string,\n\tjustifyContent: PropTypes.string,\n\tmobileFlex: PropTypes.bool\n}\n\nFlex.defaultProps = {\n\tmobileFlex: true,\n\tflexDirection: 'row',\n\tclassName: ''\n};\n\n\nexport default Flex\n","import { gql } from \"@apollo/client\";\n\nexport const ALL_DEGREES = gql`\n  \tquery allDegrees {\n        allDegrees {\n            id\n            name\n        }\n\t}\n`;\n\nexport const CREATE_DEGREE = gql `\n    mutation createDegree($name: String) {\n      createDegree(name: $name) {\n        degree {\n          id\n          name\n        }\n      }\n    }\n`;\n\nexport const UPDATE_DEGREE  = gql `\n    mutation updateDegree ($id: ID, $name: String) {\n        updateDegree (id: $id, name: $name) {\n            degree {\n                id\n                name\n            }\n        }\n    }\n`;\n\nexport const DELETE_DEGREE = gql `\n    mutation deleteDegree($id: ID!){\n        deleteDegree(id: $id){\n            degree{\n                name\n            }\n        }\n    }\n`;\n\nexport const ALL_ACTIVITY = gql`\n  \tquery allActivitys {\n        allActivitys {\n            id\n            name\n        }\n\t}\n`;\n\nexport const CREATE_ACTIVITY = gql `\n    mutation createActivity($name: String) {\n      createActivity(name: $name) {\n        activity {\n          id\n          name\n        }\n      }\n    }\n`;\n\nexport const UPDATE_ACTIVITY  = gql `\n    mutation updateActivity ($id: ID, $name: String) {\n        updateActivity (id: $id, name: $name) {\n            activity {\n                name\n            }\n        }\n    }\n`;\n\nexport const DELETE_ACTIVITY = gql `\n    mutation deleteActivity($id: ID!){\n        deleteActivity(id: $id){\n            activity{\n                name\n            }\n        }\n    }\n`;\n\nexport const ALL_STUDENT_STATUS = gql `\n    query allStudentStatuss {\n        allStudentStatuss {\n            id\n            name\n        }\n    }\n`;\n\nexport const CREATE_STUDENT_STATUS = gql `\n    mutation createStudentStatus($name: String) {\n        createStudentStatus(name: $name) {\n            studentStatus {\n                id\n                name\n            }\n        }\n    }\n`;\n\nexport const UPDATE_STUDENT_STATUS = gql `\n    mutation updateStudentStatus ($id: ID, $name: String) {\n        updateStudentStatus (id: $id, name: $name) {\n            studentStatus {\n                id\n                name\n            }\n        }\n    }\n`;\n\nexport const DELETE_STUDENET_STATUS = gql `\n    mutation deleteStudentStatus ($id: ID) {\n        deleteStudentStatus (id: $id) {\n            studentStatus {\n                name\n            }\n        }\n    }\n`;\n\nexport const ALL_STUDENT_STATUS_EXTRA = gql `\n    query allStudentStatusExtras {\n        allStudentStatusExtras {\n            id\n            name\n        }\n    }\n`;\n\nexport const CREATE_STUDENT_STATUS_EXTRA = gql `\n    mutation createStudentStatusExtra($name: String) {\n        createStudentStatusExtra(name: $name) {\n            studentStatusExtra {\n                id\n                name\n            }\n        }\n    }\n`;\n\nexport const UPDATE_STUDENT_STATUS_EXTRA = gql `\n    mutation updateStudentStatusExtra ($id: ID, $name: String) {\n        updateStudentStatusExtra (id: $id, name: $name) {\n            studentStatusExtra {\n                id\n                name\n            }\n        }\n    }\n`;\n\nexport const DELETE_STUDENET_STATUS_EXTRA = gql `\n    mutation deleteStudentStatusExtra ($id: ID) {\n        deleteStudentStatusExtra (id: $id) {\n            studentStatusExtra {\n                name\n            }\n        }\n    }\n`;\n\n\nexport const ALL_TEACHER_STATUS = gql `\n    query allTeacherStatuss {\n        allTeacherStatuss {\n            id\n            name\n        }\n    }\n`;\n\nexport const CREATE_TEACHER_STATUS = gql `\n    mutation createTeacherStatus($name: String) {\n        createTeacherStatus(name: $name) {\n            teacherStatus {\n                id\n                name\n            }\n        }\n    }\n`;\n\nexport const UPDATE_TEACHER_STATUS = gql `\n    mutation updateTeacherStatus ($id: ID, $name: String) {\n        updateTeacherStatus (id: $id, name: $name) {\n            teacherStatus {\n                id\n                name\n            }\n        }\n    }\n`;\n\nexport const DELETE_STEACHER_STATUS = gql `\n    mutation deleteTeacherStatus ($id: ID) {\n        deleteTeacherStatus (id: $id) {\n            teacherStatus {\n                name\n            }\n        }\n    }\n`;\n\nexport const ALL_CLASSTIME = gql `\n    query allClasstimes {\n        allClasstimes {\n            id\n            name\n        }\n    }\n`;\n\nexport const CREATE_CLASSTIME = gql `\n    mutation createClasstime($name: String) {\n        createClasstime(name: $name) {\n            classtime {\n                id\n                name\n            }\n        }\n    }\n`;\n\nexport const UPDATE_CLASSTIME = gql `\n    mutation updateClasstime ($id: ID, $name: String) {\n        updateClasstime (id: $id, name: $name) {\n            classtime {\n                id\n                name\n            }\n        }\n    }\n`;\n\nexport const DELETE_SCLASSTIME = gql `\n    mutation deleteClasstime ($id: ID) {\n        deleteClasstime (id: $id) {\n            classtime {\n                name\n            }\n        }\n    }\n`;\n\nexport const CREATE_ROUTINE = gql `\n    mutation createRoutine ($classes: Int, $endDate: Date, $program: Int, $room: String, $schoolyear: Int, $section: Int, $startDate: Date, \n                            $subject: Int, $teacher: Int, $time: String, $type: String, $weekly: Int) {\n        createRoutine (classes: $classes, endDate: $endDate, program: $program, room: $room, schoolyear: $schoolyear, section: $section, \n                        startDate: $startDate, subject: $subject, teacher: $teacher, time: $time, type: $type, weekly: $weekly) {\n            routine {\n                id\n            }\n        }\n    }\n`;\n\nexport const ALL_MENUS = gql `\n    query allMenus{\n        allMenus {\n            priority\n            key\n            path\n            title\n            icon\n            breadcrumb\n            subMenu\n            menuSet {\n                priority\n                key\n                path\n                title\n                icon\n                breadcrumb\n                subMenu\n            }\n        }\n    }\n`; \n\nexport const UPDATE_MENU = gql `\n    mutation updateMenu($breadcrumb: Boolean, $icon: String, $id: ID, $priority: Int, $status: String, $submenu: Int) {\n        updateMenu (breadcrumb: $breadcrumb, icon: $icon, id: $id, priority: $priority, status: $status, submenu: $submenu) {\n            menu {\n                id\n            }\n        }\n    }\n`;\n\nexport const ALL_SCHOOLYEAR = gql `\n    query allSchoolyears {\n        allSchoolyears {\n            id\n            schoolyear\n            startDate\n            endDate\n            isCurrent\n        }\n    }\n`;\n\nexport const CREATE_SCHOOLYEAR = gql `\n    mutation createSchoolyear ($endDate: String, $schoolyear: String, $startDate: String, $isCurrent: Boolean) {\n        createSchoolyear (endDate: $endDate, schoolyear: $schoolyear, startDate: $startDate, isCurrent: $isCurrent) {\n            schoolyear {\n                schoolyear\n            }\n        }\n    }\n`;\n\nexport const UPDATE_SCHOOLYEAR = gql `\n    mutation updateSchoolyear ($endDate: String, $id: ID, $schoolyear: String, $startDate: String, $isCurrent: Boolean) {\n        updateSchoolyear (endDate: $endDate, id: $id, schoolyear: $schoolyear, startDate: $startDate, isCurrent: $isCurrent) {\n            schoolyear {\n                schoolyear\n            }\n        }\n    }\n`;\n\nexport const DELETE_SCHOOLYEAR = gql `\n    mutation deleteSchoolyear ($id: ID) {\n        deleteSchoolyear (id: $id) {\n            schoolyear {\n                schoolyear\n            }\n        }\n    }\n`;","import { gql } from '@apollo/client';\n\nexport const SELECT_STUDENT = gql`\n    query allStudents ($filter: String) {\n        allStudents (filter: $filter) {\n            id\n            familyName\n            name\n            studentCode\n        }\n\t}\n`;\n\nexport const SELECT_TEACHER = gql`\n    query allTeachers ($filter: String) {\n        allTeachers (filter: $filter) {\n            id\n            familyName\n            name\n            teacherCode\n        }\n    }\n`;\n\n// export const SELECT_SECTION_TEACHER = gql `\n//     query allAssistantTeachers ($filter: String) {\n//         allAssistantTeachers (filter: $filter) {\n//             id\n//             familyName\n//             name \n//             teacherCode\n//         }\n//     }\n// `\n\nexport const SELECT_CLASSES = gql`\n    query allClassess ($filter: String, $program: Int) {\n        allClassess (filter: $filter, program: $program) {\n            id\n            classes\n        }\n\t}\n`;\n\nexport const SELECT_SUBJECT = gql `\n    query allSubjects ($offset: Int!, $limit: Int!, $filter: String) {\n        count (appName: \"subject\", modelName: \"Subject\", filter: $filter) {\n            count\n        }\n        allSubjects (offset: $offset, limit: $limit, filter: $filter) {\n            id\n            subject \n            content\n        }\n    }\n`;\n\nexport const SELECT_PROGRAM = gql`\n    query selectProgram {\n        allPrograms {\n            id\n            program\n        }\n    }\n`;\n\nexport const SECTIONS_BY_PROGRAM = gql`\n    query sectionsByProgram ($program: Int!) {\n        sectionsByProgram (program: $program) {\n            id\n            section \n            classes {\n                classes\n            }\n        }\n    }\n`;\n\nexport const SELECT_SECTION = gql `\n    query sectionsByClasses ($classes: Int!){\n        sectionsByClasses (classes: $classes) {\n            id \n            section\n        }\n    }\n`","import React from 'react';\nimport { Button, Col, DatePicker, Form, Input, message, Row, Select, Spin } from 'antd';\nimport IntlMessage from 'components/util-components/IntlMessage';\nimport { ALL_CLASSTIME, ALL_SCHOOLS, ALL_PROGRAMS, ALL_STUDENTS, TRANSFER_BY_STUDENT } from 'graphql/all';\nimport { TRANSFER_STUDENT } from 'graphql/update';\nimport { SECTION_BY_CLASSES } from 'graphql/all';\nimport { ALL_STUDENT_STATUS, ALL_STUDENT_STATUS_EXTRA, ALL_ACTIVITY } from 'graphql/core';\nimport { useLazyQuery, useMutation, useQuery } from '@apollo/client';\nimport { SELECT_CLASSES } from 'graphql/select';\n\nconst { Option } = Select;\nconst { TextArea } = Input;\n\nconst TransferForm = ({student}) => {\n\n    const [form] = Form.useForm();\n\n    const { data: schoolData, loading: schoolLoading } = useQuery(ALL_SCHOOLS);\n    const { data: programData, loading: programLoading } = useQuery(ALL_PROGRAMS);\n    const { data: classtimeData, loading: classtimeLoading } = useQuery(ALL_CLASSTIME);\n    const { data: statusData, loading: statusLoading } = useQuery(ALL_STUDENT_STATUS);\n    const { data: activityData, loading: activityLoading } = useQuery(ALL_ACTIVITY);\n    const { data: statusExtraData, loading: statusExtraLoading } = useQuery(ALL_STUDENT_STATUS_EXTRA);\n    const [fetchClasses, { data: classesData, loading: classesLoading }] = useLazyQuery(SELECT_CLASSES);\n    const [fetchSections, { data: sectionsData, sectionsLoading }] = useLazyQuery(SECTION_BY_CLASSES);\n\n    const [update, { loading: updateLoading }] = useMutation(TRANSFER_STUDENT, {\n        refetchQueries: [\n            {\n                query: ALL_STUDENTS\n            },\n            {\n                query: TRANSFER_BY_STUDENT,\n                variables: { student:  student.id }\n            }\n        ],\n\t\tonCompleted: data => {\n            message.success('Амжилттай хадгаллаа');\n            form.resetFields();\n\t\t}\n    })\n\n    const onFinish = values => {\n        values.student = student.id\n        update({ variables: values })\n    };\n\n    return (\n        <Spin \n            spinning={\n                schoolLoading || \n                programLoading || \n                classtimeLoading || \n                classesLoading || \n                sectionsLoading || \n                statusLoading || \n                statusExtraLoading ||\n                activityLoading ||\n                updateLoading\n            } \n            tip=\"Ачааллаж байна...\"\n        >\n            <Form  \n                id=\"TransferForm\"\n                layout={'vertical'}\n                form={form}\n                name=\"transfer\" \n                onFinish={onFinish}\n            >\n                <Row gutter={24}>\n                    <Col span={24}>\n                        <Form.Item name=\"school\" label={<IntlMessage id=\"school\" />} rules={[\n                            {\n                                required: true,\n                                message: <IntlMessage id=\"form.required\" />\n                            },\n                        ]}>\n                            <Select>\n                                { schoolData?.allSchools.map((school, index) => (\n                                    <Option value={school.id} key={index} >{school.name}</Option>\n                                ))}\n                            </Select>\n                        </Form.Item>\n                        <Form.Item name=\"program\" label={<IntlMessage id=\"program\" />} rules={[\n                            {\n                                required: true,\n                                message: <IntlMessage id=\"form.required\" />\n                            },\n                        ]}>\n                            <Select\n                                onChange={(e) => fetchClasses({ variables: { program: e, offset: 0, limit: 0, filter: '', } })}\n                            >\n                                { programData?.allPrograms.map((program, index) => (\n                                    <Option value={program.id} key={index} >{program.program}</Option>\n                                ))}\n                            </Select>\n                        </Form.Item>\n                        <Form.Item name=\"classes\" label={<IntlMessage id=\"classes\" />} rules={[\n                            {\n                                required: true,\n                                message: <IntlMessage id=\"form.required\" />\n                            },\n                        ]}>\n                            <Select\n                                onChange={(e) => fetchSections({ variables: { classes: e } })}\n                            >\n                                { classesData?.allClassess.map((classes, index) => (\n                                    <Option key={index} value={classes.id} >{classes.classes}</Option>\n                                ))}\n                                <Option>aa</Option>\n                            </Select>\n                        </Form.Item>\n                        <Form.Item name=\"section\" label={<IntlMessage id=\"section\" />} rules={[\n                            {\n                                required: true,\n                                message: <IntlMessage id=\"form.required\" />\n                            },\n                        ]}>\n                            <Select>\n                                { sectionsData?.sectionsByClasses.map((section, index) => (\n                                    <Option key={index} value={section.id} >{section.section}</Option>\n                                ))}\n                            </Select>\n                        </Form.Item>\n                        <Form.Item name=\"classtime\" label={<IntlMessage id=\"classtime\" />} rules={[\n                            {\n                                required: true,\n                                message: <IntlMessage id=\"form.required\" />\n                            },\n                        ]}>\n                            <Select>\n                                { classtimeData?.allClasstimes.map((classtime, index) => (\n                                    <Option value={classtime.id} key={index} >{classtime.name}</Option>\n                                ))}\n                            </Select>\n                        </Form.Item>\n                        <Form.Item name=\"activity\" label={<IntlMessage id=\"activity\" />} rules={[\n                            {\n                                required: true,\n                                message: <IntlMessage id=\"form.required\" />\n                            },\n                        ]}>\n                            <Select>\n                                { activityData?.allActivitys.map((activity, index) => (\n                                    <Option value={activity.id} key={index} >{activity.name}</Option>\n                                ))}\n                            </Select>\n                        </Form.Item>\n                        <Form.Item name=\"docNum\" label={<IntlMessage id=\"docNum\" />} rules={[\n                            {\n                                required: true,\n                                message: <IntlMessage id=\"form.required\" />\n                            },\n                        ]}>\n                            <Input />\n                        </Form.Item>\n                        <Form.Item name=\"docDate\" label={<IntlMessage id=\"docDate\" />} rules={[\n                            {\n                                required: true,\n                                message: <IntlMessage id=\"form.required\" />\n                            },\n                        ]}>\n                            <DatePicker style={{ width: \"100%\" }} />\n                        </Form.Item>\n                        <Form.Item name=\"description\" label={<IntlMessage id=\"description\" />} rules={[\n                            {\n                                required: true,\n                                message: <IntlMessage id=\"form.required\" />\n                            },\n                        ]}>\n                            <TextArea rows={4} />\n                        </Form.Item>\n                        <Form.Item name=\"status\" label={<IntlMessage id=\"status\" />} rules={[\n                            {\n                                required: true,\n                                message: <IntlMessage id=\"form.required\" />\n                            },\n                        ]}>\n                            <Select>\n                                { statusData?.allStudentStatuss.map((status, index) => (\n                                    <Option value={status.id} key={index} >{status.name}</Option>\n                                ))}\n                            </Select>\n                        </Form.Item>\n                        <Form.Item name=\"statusExtra\" label={<IntlMessage id=\"student-status-extra\" />} rules={[\n                            {\n                                required: true,\n                                message: <IntlMessage id=\"form.required\" />\n                            },\n                        ]}>\n                            <Select>\n                                { statusExtraData?.allStudentStatusExtras.map((statusExtra, index) => (\n                                    <Option value={statusExtra.id} key={index} >{statusExtra.name}</Option>\n                                ))}\n                            </Select>\n                        </Form.Item>\n                    </Col>\n                </Row>\n                <Row>\n                    <Col span={24} style={{ textAlign: 'right' }}>\n                        <Button type=\"primary\" htmlType=\"submit\">\n                            <IntlMessage id=\"main.okText\" />\n                        </Button>\n                    </Col>\n                </Row>\n            </Form>\n        </Spin>\n    );\n};\n\nexport default TransferForm","import React, { useState } from 'react'\nimport { Card, Table, Input, Descriptions, Row, Col, Image, Space, Button } from 'antd';\nimport { SearchOutlined, RollbackOutlined } from '@ant-design/icons';\nimport Flex from 'components/shared-components/Flex'\nimport utils from 'utils'\nimport TransferForm from './form';\nimport IntlMessage from \"components/util-components/IntlMessage\";\nimport { BASE_SERVER_URL } from 'configs/AppConfig';\nimport { useHistory } from 'react-router-dom';\nimport moment from 'moment';\n\nfunction  AllSchoolTable ({ data, student }) {\n    \n\tconst [list, setList] = useState(data)\n    \n    const history = useHistory();\n\n\tconst tableColumns = [\n\t\t{\n\t\t\tkey: 'school',\n\t\t\ttitle: <IntlMessage id=\"school\" />,\n\t\t\tdataIndex: ['school', 'name'],\n\t\t\tsorter: (a, b) => utils.antdTableSorter(a, b, 'school')\n\t\t},\n\t\t{\n\t\t\tkey: 'program',\n\t\t\ttitle: <IntlMessage id=\"program\" />,\n\t\t\tdataIndex: ['program', 'program'],\n\t\t\tsorter: (a, b) => utils.antdTableSorter(a, b, 'program')\n\t\t},\n\t\t{\n\t\t\tkey: 'description',\n            title: <IntlMessage id=\"description\" />,\n            dataIndex: 'description', \n\t\t\tsorter: (a, b) => utils.antdTableSorter(a, b, 'description')\n\t\t},\n        {\n\t\t\tkey: 'docDate',\n            title: <IntlMessage id=\"docDate\" />,\n            dataIndex: 'docDate', \n\t\t\tsorter: (a, b) => utils.antdTableSorter(a, b, 'docDate'),\n            render: text => <span>{moment(text).format('YYYY-MM-DD')}</span>\n        },\n\t\t{\n\t\t\tkey: 'status',\n\t\t\ttitle: <IntlMessage id=\"status\" />,\n\t\t\tdataIndex: ['status', 'name'],\n\t\t\tsorter: (a, b) => utils.antdTableSorter(a, b, 'status')\n\t\t},\n\t];\n\n\tconst onSearch = e => {\n\t\tconst value = e.currentTarget.value\n\t\tconst searchArray = e.currentTarget.value? list : data\n\t\tconst datas = utils.wildCardSearch(searchArray, value)\n\t\tsetList(datas)\n\t}\n\n\treturn (\n\t\t<>\n            <Flex alignItems=\"center\" justifyContent=\"between\" mobileFlex={false}>\n                <Flex mobileFlex={false}>\n                    <div className='text-right' >\n                        <Button onClick={() => history.goBack()} type=\"default\" icon={<RollbackOutlined />} block> <IntlMessage id=\"back\" /></Button>\n                    </div>\n                </Flex>\n            </Flex>\n            <Row gutter={[16, 16]} className='mt-4'>\n                <Col xs={24} sm={24} md={24} lg={12} xl={12} >\n                    <Card\n                        title={<IntlMessage id=\"transfer-student\" />}\n                    >\n                        <TransferForm student={student} />\n                    </Card>\n                </Col>\n                <Col xs={24} sm={24} md={24} lg={12} xl={12} >\n                    <Card\n                        title={<IntlMessage id=\"student-information\" />}\n                    >\n                        <Row>\n                            <Col xs={24} sm={6} md={6} lg={6} xl={6}>\n                                <Space direction=\"horizontal\" style={{width: '100%', justifyContent: 'center'}}>\n                                    <Image preview={false} alt={student.photo} src={BASE_SERVER_URL+student.photo} />\n                                </Space>\n                            </Col>\n                            <Col xs={24} sm={18} md={18} lg={18} xl={18}>\n                                <Descriptions layout=\"vertical\" bordered >\n                                    <Descriptions.Item label={<IntlMessage id=\"familyName\" />}>\n                                        {student.familyName}\n                                    </Descriptions.Item>\n                                    <Descriptions.Item label={<IntlMessage id=\"name\" />}>\n                                        {student.name}\n                                    </Descriptions.Item>\n                                    <Descriptions.Item label={<IntlMessage id=\"studentCode\" />}>\n                                        {student.studentCode}\n                                    </Descriptions.Item>\n                                </Descriptions>\n                            </Col>\n                        </Row>\n                    </Card>\n                    <Card    \n                        title={<IntlMessage id=\"transfer-history\" />}\n                    >\n                        <Flex alignItems=\"center\" justifyContent=\"between\" mobileFlex={false}>\n                            <Flex className=\"mb-1\" mobileFlex={false}>\n                                <div className=\"mr-md-3 mb-3\">\n                                    <Input placeholder={'Хайх'} prefix={<SearchOutlined />} onChange={e => onSearch(e)}/>\n                                </div>\n                            </Flex>\n                        </Flex>\n                        <div className=\"table-responsive\">\n                            <Table \n                                columns={tableColumns} \n                                pagination={false}\n                                size=\"small\"\n                                dataSource={list}\n                                rowKey='id'  \n                                bordered\n                            />\n                        </div>\n                    </Card>\n                </Col>\n            </Row>\n\t\t</>\n\t\t\n\t)\n}\n\nexport default AllSchoolTable\n","import React from \"react\";\nimport AllSchoolTable from './table';\nimport Loading from \"components/shared-components/Loading\";\nimport { useQuery } from \"@apollo/client\";\nimport { TRANSFER_BY_STUDENT } from \"graphql/all\";\n\nconst Index = (props) => {\n\n    const { data, error, loading } = useQuery(TRANSFER_BY_STUDENT, {\n        variables: { student: props.location.state?.student.id },\n    })\n\n    if (error) {\n        return null\n    }\n\n    if (loading) {\n        return (<Loading cover=\"content\" />)\n    }\n\n    return (\n        <AllSchoolTable title={props.title} student={props.location.state.student} data={data.transfersByStudent} />\n    )\n}\n\nexport default Index;\n"],"names":["Flex","props","children","className","alignItems","justifyContent","mobileFlex","flexDirection","defaultProps","ALL_DEGREES","gql","CREATE_DEGREE","UPDATE_DEGREE","DELETE_DEGREE","ALL_ACTIVITY","CREATE_ACTIVITY","UPDATE_ACTIVITY","DELETE_ACTIVITY","ALL_STUDENT_STATUS","CREATE_STUDENT_STATUS","UPDATE_STUDENT_STATUS","DELETE_STUDENET_STATUS","ALL_STUDENT_STATUS_EXTRA","CREATE_STUDENT_STATUS_EXTRA","UPDATE_STUDENT_STATUS_EXTRA","DELETE_STUDENET_STATUS_EXTRA","ALL_TEACHER_STATUS","CREATE_TEACHER_STATUS","UPDATE_TEACHER_STATUS","DELETE_STEACHER_STATUS","ALL_CLASSTIME","CREATE_CLASSTIME","UPDATE_CLASSTIME","DELETE_SCLASSTIME","ALL_SCHOOLYEAR","CREATE_SCHOOLYEAR","UPDATE_SCHOOLYEAR","DELETE_SCHOOLYEAR","SELECT_STUDENT","SELECT_TEACHER","SELECT_CLASSES","SELECT_SUBJECT","SELECT_PROGRAM","SECTIONS_BY_PROGRAM","SELECT_SECTION","Option","Select","TextArea","Input","student","Form","form","useQuery","ALL_SCHOOLS","schoolData","data","schoolLoading","loading","ALL_PROGRAMS","programData","programLoading","classtimeData","classtimeLoading","statusData","statusLoading","activityData","activityLoading","statusExtraData","statusExtraLoading","useLazyQuery","fetchClasses","classesData","classesLoading","SECTION_BY_CLASSES","fetchSections","sectionsData","sectionsLoading","useMutation","TRANSFER_STUDENT","refetchQueries","query","ALL_STUDENTS","TRANSFER_BY_STUDENT","variables","id","onCompleted","message","resetFields","update","updateLoading","spinning","tip","layout","name","onFinish","values","gutter","span","label","IntlMessage","rules","required","allSchools","map","school","index","value","onChange","e","program","offset","limit","filter","allPrograms","classes","allClassess","sectionsByClasses","section","allClasstimes","classtime","allActivitys","activity","style","width","rows","allStudentStatuss","status","allStudentStatusExtras","statusExtra","textAlign","type","htmlType","useState","list","setList","history","useHistory","tableColumns","key","title","dataIndex","sorter","a","b","utils","render","text","moment","format","onClick","goBack","icon","RollbackOutlined","block","xs","sm","md","lg","xl","direction","preview","alt","photo","src","BASE_SERVER_URL","bordered","familyName","studentCode","placeholder","prefix","SearchOutlined","currentTarget","searchArray","datas","onSearch","columns","pagination","size","dataSource","rowKey","location","state","error","Loading","cover","transfersByStudent"],"sourceRoot":""}