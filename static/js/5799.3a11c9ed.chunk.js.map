{"version":3,"file":"static/js/5799.3a11c9ed.chunk.js","mappings":"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","sources":["graphql/report.js","graphql/select.js","views/app-views/report/consolidated-report/index.js","views/app-views/student/form.js"],"sourcesContent":["import { gql } from \"@apollo/client\";\n\nexport const STUDENT_REPORT = gql `\n    query studentReport ($studentCode: String) {\n        studentReport (studentCode: $studentCode) {\n            school\n            textTop\n            textMid\n            textBottom\n            studentPhoto\n            studentCode\n        }\n    }\n`;\n\nexport const STUDENT_REPORT_SECTION = gql `\n    query studentReportSection ($section: Int) {\n        studentReportSection (section: $section) {\n            school\n            textTop\n            textMid\n            textBottom\n            studentPhoto\n            studentCode\n        }\n    }\n`;\n\nexport const ALL_SECTIONS = gql `\n    query allSections {\n        allSections {\n            id\n            section\n        }\n    }\n`;\n\n\nexport const STUDENT_SCHOOL_YEAR = gql `\n    query studentSchoolyear ($student: Int) {\n        studentSchoolyear (student: $student) {\n            id\n            schoolyear\n            season\n            semesterCode\n            startDate\n            endDate\n        }\n    }\n`;\n\n\nexport const ALL_STUDENTS_REPORT = gql`\n    query allStudentsReport {\n        allStudentsReport {\n            id\n            user {\n                id\n                username\n                email\n            }\n            studentCode\n            surname\n            familyName\n            name\n            religion\n            registerNo\n            nationality\n            state\n            photo\n            phone\n            address\n            activity {\n                id\n                name\n            }\n            joinDate\n            sex\n            birthdate\n            classtime {\n                id\n                name\n            }\n            birthCity {\n                id\n                name\n            }\n            birthDistrict {\n                id\n                name\n            }\n            status {\n                id\n                name\n            }\n            statusExtra {\n                id\n                name\n            }\n            school {\n                id\n                name\n            }\n            classes {\n                id\n                classes\n            }\n            section {\n                id\n                section\n            }\n            program {\n                id\n                program\n            }\n            joinSchoolyear {\n                id\n                schoolyear\n            }\n        }\n    }\n`;","import { gql } from '@apollo/client';\n\nexport const SELECT_STUDENT = gql`\n    query allStudents ($filter: String) {\n        allStudents (filter: $filter) {\n            id\n            familyName\n            name\n            studentCode\n        }\n\t}\n`;\n\nexport const SELECT_TEACHER = gql`\n    query allTeachers ($filter: String) {\n        allTeachers (filter: $filter) {\n            id\n            familyName\n            name\n            teacherCode\n        }\n    }\n`;\n\n// export const SELECT_SECTION_TEACHER = gql `\n//     query allAssistantTeachers ($filter: String) {\n//         allAssistantTeachers (filter: $filter) {\n//             id\n//             familyName\n//             name \n//             teacherCode\n//         }\n//     }\n// `\n\nexport const SELECT_CLASSES = gql`\n    query allClassess ($filter: String, $program: Int) {\n        allClassess (filter: $filter, program: $program) {\n            id\n            classes\n        }\n\t}\n`;\n\nexport const SELECT_SUBJECT = gql `\n    query allSubjects ($offset: Int!, $limit: Int!, $filter: String) {\n        count (appName: \"subject\", modelName: \"Subject\", filter: $filter) {\n            count\n        }\n        allSubjects (offset: $offset, limit: $limit, filter: $filter) {\n            id\n            subject \n            content\n        }\n    }\n`;\n\nexport const SELECT_PROGRAM = gql`\n    query selectProgram {\n        allPrograms {\n            id\n            program\n        }\n    }\n`;\n\nexport const SECTIONS_BY_PROGRAM = gql`\n    query sectionsByProgram ($program: Int!) {\n        sectionsByProgram (program: $program) {\n            id\n            section \n            classes {\n                classes\n            }\n        }\n    }\n`;\n\nexport const SELECT_SECTION = gql `\n    query sectionsByClasses ($classes: Int!){\n        sectionsByClasses (classes: $classes) {\n            id \n            section\n        }\n    }\n`","import React, { Fragment, useRef, useState } from 'react'\nimport { Button, Checkbox, Input, message, Modal, Space, Table } from 'antd';\nimport { SearchOutlined } from '@ant-design/icons';\nimport { DeleteTwoTone, EditTwoTone } from '@ant-design/icons';\nimport { Excel } from 'antd-table-saveas-excel';\nimport { useMutation, useQuery } from '@apollo/client';\nimport { ALL_STUDENTS_REPORT } from 'graphql/report';\nimport IntlMessage from 'components/util-components/IntlMessage';\nimport { classNames } from 'utils';\nimport { Menu, Transition } from '@headlessui/react';\nimport { DownloadIcon, FilterIcon } from '@heroicons/react/outline';\nimport { CheckPer } from 'hooks/checkPermission';\nimport ChangePassword from 'components/shared-components/ChangePassword';\nimport StudentForm from 'views/app-views/student/form';\nimport FormModal from 'components/shared-components/FormModal';\nimport { DELETE_STUDENT } from 'graphql/delete';\n\nconst { confirm } = Modal\n\nconst Index = () => {\n\n    const [excelData, setExelData] = useState([])\n    const [searchedColumn, setSearchedColumn] = useState({});\n    const [editData, setEditData] = useState({});\n    const modalRef = useRef();\n\n    const { data, loading, refetch } = useQuery(ALL_STUDENTS_REPORT, {\n        onCompleted: res => {\n            setExelData(res.allStudentsReport)\n        }\n    })\n    \n\tconst [deleteStudent] = useMutation(DELETE_STUDENT, {\n\t\tonCompleted: data => {\n            refetch();\n            message.success('Амжилттай устлаа');\n\t\t}\n\t});\n\n    function handleSearch(selectedKeys, confirm, dataIndex, dataIndex2) {\n        confirm();\n        setSearchedColumn(prevData => ({\n            ...prevData,\n            [dataIndex+dataIndex2]: selectedKeys[0]\n        }))\n    }\n    \n    function handleReset(clearFilters, dataIndex, dataIndex2) {\n        clearFilters();\n        setSearchedColumn(current => {\n            const copy = {...current};\n            delete copy[dataIndex+dataIndex2];\n            return copy;\n        });\n    }\n\n    function getColumnSearchProps(dataIndex, dataIndex2) {\n\n        return ({\n            filterDropdown: ({ setSelectedKeys, selectedKeys, confirm, clearFilters }) => (\n                <div className='p-2'>\n                    <Input\n                        placeholder={'Хайх'}\n                        value={selectedKeys[0]}\n                        onChange={e => setSelectedKeys(e.target.value ? [e.target.value] : [])}\n                        onPressEnter={() => handleSearch(selectedKeys, confirm, dataIndex, dataIndex2)}\n                        style={{ marginBottom: 8, display: 'block' }}\n                    />\n                    <Space>\n                        <Button\n                            type=\"primary\"\n                            onClick={() => handleSearch(selectedKeys, confirm, dataIndex, dataIndex2)}\n                            icon={<SearchOutlined />}\n                            size=\"small\"\n                            style={{ width: 90 }}\n                        > Хайх </Button>\n                        <Button onClick={() => handleReset(clearFilters, dataIndex, dataIndex2)} size=\"small\" style={{ width: 90 }}> Арилгах </Button>\n                    </Space>\n                </div>\n            ),\n            filterIcon: filtered => (\n                <SearchOutlined \n                    className={classNames(\n                        filtered ? `text-[#F8B6A8]` : ''\n                    )}\n                />\n            ),\n            onFilter: (value, record) => (\n                dataIndex2 ? record[dataIndex][dataIndex2].toString().toLowerCase().includes(value.toLowerCase())\n                : record[dataIndex].toString().toLowerCase().includes(value.toLowerCase())\n            ),\n            render: text => (\n                text\n                // searchedColumn[dataIndex+dataIndex2] ? (\n                //     <Highlighter\n                //         highlightStyle={{ backgroundColor: '#69ffc0', padding: 0 }}\n                //         searchWords={[searchedColumn[dataIndex+dataIndex2]]}\n                //         autoEscape\n                //         textToHighlight={text ? text.toString() : ''}\n                //     />\n                // ) : (\n                //     text\n                // )\n            ),\n        })\n    };\n\n    const [columns, setColumns] = useState([\n        {\n            title: \"Эцэг /эх/-ийн нэр \",\n            dataIndex: 'familyName',\n            key: 'familyName',\n            width: 150,\n            visible: true,\n            ...getColumnSearchProps('familyName'),\n        },\n        {\n            title: \"Нэр\",\n            dataIndex: 'name',\n            key: 'name',\n            width: 150,\n            visible: true,\n            ...getColumnSearchProps('name'),\n        },\n        {\n            title: \"Иргэншил\",\n            dataIndex: 'nationality',\n            key: 'nationality',\n            width: 150,\n            visible: true,\n            ...getColumnSearchProps('nationality'),\n        },\n        {\n            title: \"Үндэс угсаа\",\n            dataIndex: 'religion',\n            key: 'religion',\n            width: 150,\n            visible: true,\n            ...getColumnSearchProps('religion'),\n        },\n        {\n            title: \"Суралцагчийн код\",\n            dataIndex: 'studentCode',\n            key: 'studentCode',\n            width: 150,\n            visible: true,\n            ...getColumnSearchProps('studentCode'),\n        },\n        {\n            title: \"Салбар сургууль\",\n            dataIndex: ['school', 'name'],\n            key: 'school',\n            width: 200,\n            visible: true,\n            ...getColumnSearchProps('school', 'name'),\n        },\n        {\n            title: \"Хөтөлбөр\",\n            dataIndex: ['program', 'program'],\n            key: 'program',\n            width: 100,\n            visible: true,\n            ...getColumnSearchProps('program', 'program'),\n        },\n        {\n            title: \"Анги дамжаа\",\n            dataIndex: ['classes', 'classes'],\n            key: 'classes',\n            width: 100,\n            visible: true,\n            ...getColumnSearchProps('classes', 'classes'),\n        },\n        {\n            title: \"Бүлэг\",\n            dataIndex: ['section', 'section'],\n            key: 'section',\n            width: 100,\n            visible: true,\n            ...getColumnSearchProps('section', 'section'),\n        },\n        {\n            title: \"Төрсөн огноо\",\n            dataIndex: 'birthdate',\n            key: 'birthdate',\n            width: 150,\n            visible: true,\n            ...getColumnSearchProps('birthdate'),\n        },\n        {\n            title: \"Төрсөн аймаг /хот/\",\n            dataIndex: ['birthCity', 'name'],\n            key: 'birthCity',\n            width: 150,\n            visible: true,\n            ...getColumnSearchProps('birthCity', 'name'),\n        },\n        {\n            title: \"Төрсөн сум /дүүрэг/\",\n            dataIndex: ['birthDistrict', 'name'],\n            key: 'birthDistrict',\n            width: 150,\n            visible: true,\n            ...getColumnSearchProps('birthDistrict', 'name'),\n        },\n        {\n            title: \"И-мэйл\",\n            dataIndex: ['user', 'email'],\n            key: 'email',\n            width: 100,\n            visible: true,\n            ...getColumnSearchProps('user', 'email'),\n        },\n        {\n            title: \"Утас\",\n            dataIndex: 'phone',\n            key: 'phone',\n            width: 100,\n            visible: true,\n            ...getColumnSearchProps('phone'),\n        },\n        {\n            title: \"Сургуульд элссэн огноо\",\n            dataIndex: ['joinSchoolyear', 'schoolyear'],\n            key: 'email',\n            width: 150,\n            visible: true,\n            ...getColumnSearchProps('joinSchoolyear', 'joinSchoolyear'),\n        },\n        {\n            title: \"Суралцагчийн төлөв\",\n            dataIndex: ['status', 'name'],\n            key: 'status',\n            width: 150,\n            visible: true,\n            ...getColumnSearchProps('status', 'name'),\n        },\n        {\n            title: \"Суралцагчийн нэмэлт төлөв\",\n            dataIndex: ['statusExtra', 'name'],\n            key: 'status',\n            width: 150,\n            visible: true,\n            ...getColumnSearchProps('statusExtra', 'name'),\n        },\n    ])\n\n\tfunction deleteRow(row) {\n\t\tconfirm({\n            title: \"Устгах уу?\",\n            okText: \"Устгах\",\n            okType: 'danger',\n            cancelText: \"Болих\",\n            onOk() {\n                deleteStudent({ variables: { id: row.id } }); \n            },\n\t\t});\n\t}\n\n    function onCheckBoxClick(e, dataIndex) {\n        const temporaryarray = columns.slice();\n        temporaryarray[dataIndex]['visible'] = e.target.checked\n        setColumns(temporaryarray)\n    }\n\n    function handleOpen(params) {\n        setEditData(params);\n        modalRef.current.handleOpen()\n    }\n    \n    function handleCancel() {\n        modalRef.current.handleCancel()\n    }\n\n    const permissions = {\n        edit: CheckPer('change_student'),\n        destroy: CheckPer('delete_student'),\n        password: CheckPer('change_user_password')\n    }\n\n    return (\n        <div className='bg-white p-2'>\n            <FormModal ref={modalRef} formName=\"StudentForm\">\n                <StudentForm\n                    refetch={refetch}\n                    formType={'edit'} \n                    editData={editData} \n                    setIsModalVisible={handleCancel}\n                />\n            </FormModal>\n            <div className='flex justify-end'>\n                <button\n                    className='px-4 py-2 hover:bg-gray-50'\n                    onClick={() => {\n                        const excel = new Excel();\n                        excel\n                        .addSheet('Суралцагч')\n                        .addColumns(columns.filter(col => col.visible))\n                        .addDataSource(excelData)\n                        .saveAs('Суралцагч.xlsx');\n                    }}\n                >\n                    <DownloadIcon className=\"h-5 w-5 text-emind\" aria-hidden=\"true\" />\n                </button>\n                <Menu as=\"div\" className=\"relative inline-block text-left\">\n                    <div>\n                        <Menu.Button className=\"inline-flex w-full justify-center rounded-md px-4 py-2 text-sm font-medium text-gray-700 hover:bg-gray-50\">\n                            <FilterIcon className=\"h-5 w-5 text-emind\" aria-hidden=\"true\" />\n                        </Menu.Button>\n                    </div>\n                    <Transition\n                        as={Fragment}\n                        enter=\"transition ease-out duration-100\"\n                        enterFrom=\"transform opacity-0 scale-95\"\n                        enterTo=\"transform opacity-100 scale-100\"\n                        leave=\"transition ease-in duration-75\"\n                        leaveFrom=\"transform opacity-100 scale-100\"\n                        leaveTo=\"transform opacity-0 scale-95\"\n                    >\n                        <Menu.Items className=\"absolute right-0 z-10 mt-2 w-56 origin-top-right rounded-md bg-white shadow-lg ring-1 ring-black ring-opacity-5 focus:outline-none\">\n                        <div className=\"flex flex-col p-1\">\n                            { columns.map((item, index) => (\n                                <Checkbox \n                                    key={index}\n                                    onChange={e => onCheckBoxClick(e, index)}\n                                    checked={item.visible} \n                                    className='ml-1' \n                                    value={item.dataIndex} \n                                >\n                                    {item.title}\n                                </Checkbox>\n                            ))}\n                        </div>\n                        </Menu.Items>\n                    </Transition>\n                </Menu>\n            </div>\n            <Table\n                className='mt-4'\n                loading={loading}\n                columns={[...columns.filter(col => col.visible), ...[\n                    {\n                        key: 'actions',\n                        title: <IntlMessage id=\"main.action\" />,\n                        width: '15vw',\n                        dataIndex: 'actions',\n                        render: (_, elm) => (\n                            <div className=\"text-center\">\n                                { permissions.password &&\n                                    <ChangePassword user={elm.user.id} />\n                                }\n                                {/* <Button size=\"small\" onClick={() => history.push({pathname: '/app/student/transfer-student', state: {student: elm}})} type=\"text\" icon={<SwapOutlined />} > <IntlMessage id=\"transfer-student\" /></Button> */}\n                                { permissions.edit === true &&\n                                    <Button size=\"small\" onClick={() => handleOpen(elm)} type=\"text\" icon={<EditTwoTone twoToneColor=\"#ffdb00\"/>} > <IntlMessage id=\"edit\" /></Button>\n                                }\n                                { permissions.destroy === true &&\n                                    <Button size=\"small\" onClick={() => deleteRow(elm)} type=\"text\" icon={<DeleteTwoTone twoToneColor=\"#f42f2f\"/>} > <IntlMessage id=\"delete\" /></Button>\n                                }\n                            </div>\n                        )\n                    }\n                ]]}\n                dataSource={data?.allStudentsReport}\n                rowKey=\"id\"\n                bordered\n                size=\"small\"\n                onChange={\n                    (pagination, filters, sorter, extra) => {\n                        setExelData(extra.currentDataSource)\n                    } \n               } \n                pagination={{\n                    defaultPageSize: 20\n                }}\n                scroll={{ x: 2000, y: 500 }}\n            />\n            \n        </div>\n    )\n}\nexport default Index;","import React, { useState, useEffect } from 'react';\nimport { Form, Input, message, Spin, Row, Col, Select, DatePicker } from 'antd';\nimport { useMutation, useQuery, useLazyQuery } from '@apollo/client';\nimport {\n    ALL_PROGRAMS, ALL_CITYS, ALL_DISTRICTS, ALL_SCHOOLS,\n    ALL_CLASSTIME, ALL_SCHOOL_YEAR\n} from 'graphql/all';\nimport { ALL_ACTIVITY, ALL_STUDENT_STATUS, ALL_STUDENT_STATUS_EXTRA } from 'graphql/core'\nimport { CREATE_STUDENT } from 'graphql/create'\nimport { UPDATE_STUDENT } from 'graphql/update'\nimport moment from 'moment';\nimport IntlMessage from 'components/util-components/IntlMessage';\n// import { ImageSvg } from 'assets/svg/icon';\n// import CustomIcon from 'components/util-components/CustomIcon';\n// import { BASE_SERVER_URL } from 'configs/AppConfig';\nimport { SELECT_CLASSES, SELECT_SECTION } from 'graphql/select';\n\n// const { Dragger } = Upload;\n\nfunction StudentForm({ editData, formType, setIsModalVisible, refetch }) {\n\n    const { Option } = Select;\n    const [form] = Form.useForm();\n    const { TextArea } = Input;\n\n    // const [selectedImage, setSelectedImage] = useState();\n\n    const dateFormat = \"YYYY-MM-DD\";\n\n    const [createStudent, { loading: studentLoading }] = useMutation(CREATE_STUDENT, {\n        onCompleted: data => {\n            refetch();\n            message.success('Амжилттай хадгаллаа');\n            form.resetFields();\n            setIsModalVisible(false);\n        }\n    });\n\n    // const imageProps = {\n    //     accept: '.jpg',\n    //     name: 'file',\n    //     multiple: false,\n    //     listType: \"picture-card\",\n    //     showUploadList: false,\n    //     beforeUpload: file => {\n    //         return false\n    //     }\n    // };\n\n    // const onImageChange = (file) => {\n    //     if (file) {\n    //         setSelectedImage(file.file)\n    //     }\n    // }\n\n    // const normFile = (e) => {\n    //     if (Array.isArray(e)) {\n    //         return e;\n    //     }\n    //     return e && e.fileList;\n    // };\n\n    const [updateStudent, { loading: editLoading }] = useMutation(UPDATE_STUDENT, {\n        onCompleted: data => {\n            refetch();\n            message.success('Амжилттай хадгаллаа');\n            setIsModalVisible(false);\n        }\n    })\n\n    // start useQuery\n    const { data: activityData } = useQuery(ALL_ACTIVITY);\n    const [allClassess, { data: classessData }] = useLazyQuery(SELECT_CLASSES);\n    const { data: programData } = useQuery(ALL_PROGRAMS);\n    const { data: citysData } = useQuery(ALL_CITYS);\n    const { data: districtsData } = useQuery(ALL_DISTRICTS);\n    const { data: schoolsData } = useQuery(ALL_SCHOOLS);\n    const { data: statusData } = useQuery(ALL_STUDENT_STATUS);\n    const { data: extraStatusData } = useQuery(ALL_STUDENT_STATUS_EXTRA);\n    const { data: classtimeData } = useQuery(ALL_CLASSTIME);\n    const [fetchSection, { data: sectionData }] = useLazyQuery(SELECT_SECTION);\n    const { data: schoolYearData } = useQuery(ALL_SCHOOL_YEAR);\n\n    // end useQuery\n\n    useEffect(() => {\n        if (formType === \"edit\") {\n            const newData = {\n                email: editData.user.email,\n                surname: editData.surname,\n                familyName: editData.familyName,\n                // familyNameMgl: editData.familyNameMgl,\n                name: editData.name,\n                // nameMgl: editData.nameMgl,\n                religion: editData.religion,\n                registerNo: editData.registerNo,\n                nationality: editData.nationality,\n                state: editData.state,\n                phone: editData.phone,\n                // phone2: editData.phone2,\n                address: editData.address,\n                citizen: editData.citizen,\n                // degree: editData.degree.id,\n                activity: editData.activity.id,\n                // joinBefore: editData.joinBefore,\n                sex: editData.sex,\n                classtime: editData.classtime.id,\n                birthCity: editData.birthCity.id,\n                birthDistrict: editData.birthDistrict.id,\n                status: editData.status.id,\n                statusExtra: editData.statusExtra.id,\n                school: editData.school.id,\n                classes: editData.classes.id,\n                section: editData.section.id,\n                program: editData.program.id,\n                joinSchoolyear: editData.joinSchoolyear.id,\n                joinDate: moment(editData.joinDate),\n                birthdate: moment(editData.birthdate),\n                bodyIndex: editData.bodyIndex,\n                vaccine: editData.vaccine,\n                drug: editData.drug,\n                allergies: editData.allergies,\n                underlyingDisease: editData.underlyingDisease,\n                bloodType: editData.bloodType,\n                etc: editData.etc\n            }\n            setDistrict(newData.birthCity)\n            allClassess({ variables: { program: newData.program, offset: 1, limit: 1, filter: '' } });\n            setClasses(newData.program);\n            setJoinDay(moment(newData.joinDate).format(\"YYYY-MM-DD\"))\n            setBDay(moment(newData.birthdate).format(\"YYYY-MM-DD\"))\n            form.setFieldsValue(newData);\n        } else if (formType === \"create\") {\n            // form.resetFields();\n        }\n    }, [allClassess, form, editData, formType])\n\n    // Change BirthDistrict\n\n    const [district, setDistrict] = useState(\"\");\n\n    const onBirthCityChange = (value) => {\n        setDistrict(value);\n    };\n\n    let districtType = null;\n\n    let districtsOption = null;\n\n    if (district) {\n        districtType = district;\n    }\n\n    if (districtType) {\n        districtsOption = districtsData?.allDistricts.filter(District => District.cityID.id === districtType).map(filteredDistrict => (\n            <Option key={filteredDistrict.id} value={filteredDistrict.id}>{filteredDistrict.name}</Option>\n        ))\n    }\n\n    // end change BirthDistrict\n\n    // Change BirthDistrict\n\n\n    const [classes, setClasses] = useState(\"\");\n\n    const programOnChange = (value) => {\n        allClassess({ variables: { program: value, offset: 1, limit: 1, filter: '' } });\n        setClasses(value);\n    }\n\n    let programType = null;\n\n    let classesOption = null;\n\n    if (classes) {\n        programType = classes;\n    }\n\n    if (programType) {\n        classesOption = classessData?.allClassess.map(filteredClass => (\n            <Option key={filteredClass.id} value={filteredClass.id}>{filteredClass.classes}</Option>\n        ))\n    }\n\n    // end change BirthDistrict\n\n    const [joinDay, setJoinDay] = useState('');\n\n    function joinDayOnChange(date) {\n        setJoinDay(moment(date).format(\"YYYY-MM-DD\"));\n    }\n\n    const [BDay, setBDay] = useState('');\n\n    function joinBDayOnChange(date) {\n        setBDay(moment(date).format(\"YYYY-MM-DD\"));\n    }\n\n    const phoneRegEx = new RegExp(/^[7-9][0-9]{3}[0-9]{4}$/u);\n    const registerNumRegEx = new RegExp(/[А-ЯӨҮЁ]{2}(\\d){8}$/u);\n\n    function onFinish(values) {\n        if (formType === 'edit') {\n            values.joinDate = joinDay\n            values.birthdate = BDay\n            values.id = editData.id\n            updateStudent({ variables: values })\n        } else {\n            values.joinDate = joinDay\n            values.birthdate = BDay\n            createStudent({ variables: values });\n        }\n    };\n\n    return (\n        <Spin spinning={studentLoading || editLoading} tip=\"Ачааллаж байна...\">\n            <Form\n                id=\"StudentForm\"\n                layout={'vertical'}\n                form={form}\n                name=\"control-hooks\"\n                onFinish={onFinish}\n                size=\"small\"\n            >\n                <Row gutter={[16, 24]}>\n                    <Col className=\"gutter-row\" span={12}>\n                        <Form.Item name=\"school\" label={<IntlMessage id=\"school\" />} rules={[\n                            {\n                                required: true,\n                                message: <IntlMessage id=\"form.required\" />\n                            },\n                        ]}>\n                            <Select>\n                                {schoolsData?.allSchools.map((school, index) => (\n                                    <Option key={index} value={school.id}>{school.name}</Option>\n                                ))}\n                            </Select>\n                        </Form.Item>\n                        <Form.Item name=\"program\" label={<IntlMessage id=\"program\" />} rules={[\n                            {\n                                required: true,\n                                message: <IntlMessage id=\"form.required\" />\n                            },\n                        ]}>\n                            <Select onChange={programOnChange}>\n                                {programData?.allPrograms.map((program, index) => (\n                                    <Option key={index} value={program.id}>{program.program}</Option>\n                                ))}\n                            </Select>\n                        </Form.Item>\n                        <Form.Item name=\"classes\" label={<IntlMessage id=\"classes\" />} rules={[\n                            {\n                                required: true,\n                                message: <IntlMessage id=\"form.required\" />\n                            },\n                        ]}>\n                            <Select onChange={e => fetchSection({ variables: { classes: e } })}>\n                                {classesOption}\n                            </Select>\n                        </Form.Item>\n                        <Form.Item name=\"section\" label={<IntlMessage id=\"section\" />} rules={[\n                            {\n                                required: true,\n                                message: <IntlMessage id=\"form.required\" />\n                            },\n                        ]}>\n                            <Select>\n                                {sectionData?.sectionsByClasses.map((section, index) => (\n                                    <Option key={index} value={section.id}>{section.section}</Option>\n                                ))}\n                            </Select>\n                        </Form.Item>\n                        <Form.Item name=\"status\" label={<IntlMessage id=\"status\" />} rules={[\n                            {\n                                required: true,\n                                message: <IntlMessage id=\"form.required\" />\n                            },\n                        ]}>\n                            <Select>\n                                {statusData?.allStudentStatuss.map((status, index) => (\n                                    <Option key={index} value={status.id}>{status.name}</Option>\n                                ))}\n                            </Select>\n                        </Form.Item>\n                        <Form.Item name=\"statusExtra\" label={<IntlMessage id=\"student-status-extra\" />} rules={[\n                            {\n                                required: true,\n                                message: <IntlMessage id=\"form.required\" />\n                            },\n                        ]}>\n                            <Select>\n                                {extraStatusData?.allStudentStatusExtras.map((extra, index) => (\n                                    <Option key={index} value={extra.id}>{extra.name}</Option>\n                                ))}\n                            </Select>\n                        </Form.Item>\n                        <Form.Item name=\"joinDate\" label={<IntlMessage id=\"joinDate\" />} rules={[\n                            {\n                                required: true,\n                                message: <IntlMessage id=\"form.required\" />\n                            },\n                        ]}>\n                            <DatePicker style={{ width: '100%' }} onChange={joinDayOnChange} format={dateFormat} />\n                        </Form.Item>\n                        <Form.Item name=\"nationality\" label={<IntlMessage id=\"nationality\" />} rules={[\n                            {\n                                required: true,\n                                message: <IntlMessage id=\"form.required\" />\n                            },\n                        ]}>\n                            <Input />\n                        </Form.Item>\n                        <Form.Item name=\"phone\" label={<IntlMessage id=\"parent_phone\" />} rules={[\n                            {\n                                required: true,\n                                message: <IntlMessage id=\"form.required\" />\n                            },\n                            {\n                                validator(rule, value) {\n                                    if (phoneRegEx.test(value)) {\n                                        return Promise.resolve();\n                                    }\n                                    return Promise.reject('Утасны дугаар буруу байна!');\n                                },\n                            }\n                        ]}>\n                            <Input />\n                        </Form.Item>\n                        <Form.Item name=\"state\" label={<IntlMessage id=\"state\" />} rules={[\n                            {\n                                required: true,\n                                message: <IntlMessage id=\"form.required\" />\n                            },\n                        ]}>\n                            <Input />\n                        </Form.Item>\n                        <Form.Item name=\"classtime\" label={<IntlMessage id=\"classtime\" />} rules={[\n                            {\n                                required: true,\n                                message: <IntlMessage id=\"form.required\" />\n                            },\n                        ]}>\n                            <Select>\n                                {classtimeData?.allClasstimes.map((classtime, index) => (\n                                    <Option key={index} value={classtime.id}>{classtime.name}</Option>\n                                ))}\n                            </Select>\n                        </Form.Item>\n                        <Form.Item name=\"bodyIndex\" label={<IntlMessage id=\"bodyIndex\" />} rules={[\n                            {\n                                required: true,\n                                message: <IntlMessage id=\"form.required\" />\n                            },\n                        ]}>\n                            <Input />\n                        </Form.Item>\n                        <Form.Item name=\"vaccine\" label={<IntlMessage id=\"vaccine\" />} rules={[\n                            {\n                                required: true,\n                                message: <IntlMessage id=\"form.required\" />\n                            },\n                        ]}>\n                            <Input />\n                        </Form.Item>\n                        <Form.Item name=\"drug\" label={<IntlMessage id=\"drug\" />} rules={[\n                            {\n                                required: true,\n                                message: <IntlMessage id=\"form.required\" />\n                            },\n                        ]}>\n                            <Input />\n                        </Form.Item>\n                        <Form.Item name=\"address\" label={<IntlMessage id=\"address\" />} rules={[\n                            {\n                                required: true,\n                                message: <IntlMessage id=\"form.required\" />\n                            },\n                        ]}>\n                            <TextArea rows={2} />\n                        </Form.Item>\n                    </Col>\n                    <Col className=\"gutter-row\" span={12}>\n                        <Form.Item name=\"religion\" label={<IntlMessage id=\"religion\" />} rules={[\n                            {\n                                required: true,\n                                message: <IntlMessage id=\"form.required\" />\n                            },\n                        ]}>\n                            <Input />\n                        </Form.Item>\n                        <Form.Item name=\"surname\" label={<IntlMessage id=\"surname\" />} rules={[{ required: true }]}>\n                            <Input />\n                        </Form.Item>\n                        <Form.Item name=\"familyName\" label={<IntlMessage id=\"familyName\" />} rules={[\n                            {\n                                required: true,\n                                message: <IntlMessage id=\"form.required\" />\n                            },\n                        ]}>\n                            <Input />\n                        </Form.Item>\n                        <Form.Item name=\"name\" label={<IntlMessage id=\"name\" />} rules={[\n                            {\n                                required: true,\n                                message: <IntlMessage id=\"form.required\" />\n                            },\n                        ]}>\n                            <Input />\n                        </Form.Item>\n                        <Form.Item name=\"registerNo\" label={<IntlMessage id=\"registerNo\" />} rules={[\n                            {\n                                required: true,\n                                message: <IntlMessage id=\"form.required\" />\n                            },\n                            {\n                                validator(rule, value) {\n                                    if (!registerNumRegEx.test(value)) {\n                                        return Promise.reject('Регистерийн дугаар буруу байна!');\n                                    }\n                                    return Promise.resolve();\n                                },\n                            },\n                        ]}>\n                            <Input />\n                        </Form.Item>\n                        <Form.Item name=\"birthdate\" label={<IntlMessage id=\"birthdate\" />} rules={[\n                            {\n                                required: true,\n                                message: <IntlMessage id=\"form.required\" />\n                            },\n                        ]}>\n                            <DatePicker style={{ width: '100%' }} onChange={joinBDayOnChange} format={dateFormat} />\n                        </Form.Item>\n                        <Form.Item name=\"sex\" label={<IntlMessage id=\"sex\" />} rules={[\n                            {\n                                required: true,\n                                message: <IntlMessage id=\"form.required\" />\n                            },\n                        ]}>\n                            <Select>\n                                <Option key=\"0\" value=\"Эрэгтэй\"><IntlMessage id=\"sex.male\" /></Option>\n                                <Option key=\"1\" value=\"Эмэгтэй\"><IntlMessage id=\"sex.female\" /></Option>\n                            </Select>\n                        </Form.Item>\n                        <Form.Item name=\"birthCity\" label={<IntlMessage id=\"birthCity\" />} rules={[\n                            {\n                                required: true,\n                                message: <IntlMessage id=\"form.required\" />\n                            },\n                        ]}>\n                            <Select onChange={onBirthCityChange}>\n                                {citysData?.allCitys.map((city, index) => (\n                                    <Option key={index} value={city.id}>{city.name}</Option>\n                                ))}\n                            </Select>\n                        </Form.Item>\n                        <Form.Item name=\"birthDistrict\" label={<IntlMessage id=\"birthDistrict\" />} rules={[\n                            {\n                                required: true,\n                                message: <IntlMessage id=\"form.required\" />\n                            },\n                        ]}>\n                            <Select>\n                                {districtsOption}\n                            </Select>\n                        </Form.Item>\n                        <Form.Item name=\"activity\" label={<IntlMessage id=\"activity\" />} rules={[\n                            {\n                                required: true,\n                                message: <IntlMessage id=\"form.required\" />\n                            },\n                        ]}>\n                            <Select>\n                                {activityData?.allActivitys.map((activity, index) => (\n                                    <Option key={index} value={activity.id}>{activity.name}</Option>\n                                ))}\n                            </Select>\n                        </Form.Item>\n                        <Form.Item name=\"joinSchoolyear\" label={<IntlMessage id=\"joinSchoolyear\" />} rules={[\n                            {\n                                required: true,\n                                message: <IntlMessage id=\"form.required\" />\n                            },\n                        ]}>\n                            <Select>\n                                {schoolYearData?.allSchoolyears.map((year, index) => (\n                                    <Option key={index} value={year.id}>{year.schoolyear} {year.season}</Option>\n                                ))}\n                            </Select>\n                        </Form.Item>\n                        <Form.Item name=\"allergies\" label={<IntlMessage id=\"allergies\" />} rules={[\n                            {\n                                required: true,\n                                message: <IntlMessage id=\"form.required\" />\n                            },\n                        ]}>\n                            <Input />\n                        </Form.Item>\n                        <Form.Item name=\"bloodType\" label={<IntlMessage id=\"bloodType\" />} rules={[\n                            {\n                                required: true,\n                                message: <IntlMessage id=\"form.required\" />\n                            },\n                        ]}>\n                            <Input />\n                        </Form.Item>\n                        <Form.Item name=\"underlyingDisease\" label={<IntlMessage id=\"underlyingDisease\" />} rules={[\n                            {\n                                required: true,\n                                message: <IntlMessage id=\"form.required\" />\n                            },\n                        ]}>\n                            <Input />\n                        </Form.Item>\n                        <Form.Item name=\"etc\" label={<IntlMessage id=\"etc\" />} rules={[\n                            {\n                                required: true,\n                                message: <IntlMessage id=\"form.required\" />\n                            },\n                        ]}>\n                            <Input.TextArea />\n                        </Form.Item>\n                    </Col>\n                </Row>\n            </Form>\n        </Spin>\n    );\n};\n\nexport default StudentForm"],"names":["STUDENT_REPORT","gql","STUDENT_REPORT_SECTION","ALL_STUDENTS_REPORT","SELECT_STUDENT","SELECT_TEACHER","SELECT_CLASSES","SELECT_SUBJECT","SELECT_PROGRAM","SECTIONS_BY_PROGRAM","SELECT_SECTION","confirm","Modal","useState","excelData","setExelData","setSearchedColumn","editData","setEditData","modalRef","useRef","useQuery","onCompleted","res","allStudentsReport","data","loading","refetch","useMutation","DELETE_STUDENT","message","deleteStudent","handleSearch","selectedKeys","dataIndex","dataIndex2","prevData","getColumnSearchProps","filterDropdown","setSelectedKeys","clearFilters","className","placeholder","value","onChange","e","target","onPressEnter","style","marginBottom","display","type","onClick","icon","size","width","current","copy","handleReset","filterIcon","filtered","classNames","onFilter","record","toString","toLowerCase","includes","render","text","title","key","visible","columns","setColumns","permissions","edit","CheckPer","destroy","password","ref","formName","formType","setIsModalVisible","handleCancel","Excel","addSheet","addColumns","filter","col","addDataSource","saveAs","as","Fragment","enter","enterFrom","enterTo","leave","leaveFrom","leaveTo","map","item","index","temporaryarray","slice","checked","onCheckBoxClick","id","_","elm","user","handleOpen","twoToneColor","row","okText","okType","cancelText","onOk","variables","dataSource","rowKey","bordered","pagination","filters","sorter","extra","currentDataSource","defaultPageSize","scroll","x","y","Option","Select","Form","form","TextArea","Input","dateFormat","CREATE_STUDENT","resetFields","createStudent","studentLoading","UPDATE_STUDENT","updateStudent","editLoading","activityData","ALL_ACTIVITY","useLazyQuery","allClassess","classessData","programData","ALL_PROGRAMS","citysData","ALL_CITYS","districtsData","ALL_DISTRICTS","schoolsData","ALL_SCHOOLS","statusData","ALL_STUDENT_STATUS","extraStatusData","ALL_STUDENT_STATUS_EXTRA","classtimeData","ALL_CLASSTIME","fetchSection","sectionData","schoolYearData","ALL_SCHOOL_YEAR","useEffect","newData","email","surname","familyName","name","religion","registerNo","nationality","state","phone","address","citizen","activity","sex","classtime","birthCity","birthDistrict","status","statusExtra","school","classes","section","program","joinSchoolyear","joinDate","moment","birthdate","bodyIndex","vaccine","drug","allergies","underlyingDisease","bloodType","etc","setDistrict","offset","limit","setClasses","setJoinDay","format","setBDay","setFieldsValue","district","districtType","districtsOption","allDistricts","District","cityID","filteredDistrict","programType","classesOption","filteredClass","joinDay","BDay","phoneRegEx","RegExp","registerNumRegEx","spinning","tip","layout","onFinish","values","gutter","span","label","rules","required","allSchools","allPrograms","sectionsByClasses","allStudentStatuss","allStudentStatusExtras","date","validator","rule","test","Promise","resolve","reject","allClasstimes","rows","allCitys","city","allActivitys","allSchoolyears","year","schoolyear","season"],"sourceRoot":""}