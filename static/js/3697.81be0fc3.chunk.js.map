{"version":3,"file":"static/js/3697.81be0fc3.chunk.js","mappings":"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","sources":["components/shared-components/ChangePassword/form.js","components/shared-components/ChangePassword/index.js","components/shared-components/FormModal/index.js","graphql/core.js","graphql/create.js","graphql/delete.js"],"sourcesContent":["import { useMutation } from '@apollo/client'\nimport { Form, Input, message, Spin } from 'antd'\nimport IntlMessage from 'components/util-components/IntlMessage'\nimport { CHANGE_USER_PASSWORD } from 'graphql/user'\nimport React from 'react'\n\nconst PasswordForm = ({ user, closeModal }) => {\n\n    const [updatePassword, { loading }] = useMutation(CHANGE_USER_PASSWORD, {\n        onCompleted: data => {\n            message.success('Амжилттай хадгаллаа');\n            closeModal()\n        }\n    })\n\n    function onFinish(values) {\n        values.id = user\n        updatePassword({ variables: values })\n    }\n\n    return (\n        <Spin\n            spinning={loading}\n        >\n            <Form\n                layout='vertical'\n                name=\"form\"\n                onFinish={onFinish}\n            >\n                <Form.Item name=\"password\" label={<IntlMessage id=\"password\" />} rules={[{ required: true, message: 'Хоосон орхих боломжгүй' }]}>\n                    <Input.Password />\n                </Form.Item>\n            </Form>\n        </Spin>\n    )\n}\n\nexport default PasswordForm","import { Button } from 'antd'\nimport IntlMessage from 'components/util-components/IntlMessage'\nimport { LockTwoTone } from '@ant-design/icons';\nimport React, { useRef } from 'react'\nimport FormModal from '../FormModal';\nimport PasswordForm from './form';\n\nconst ChangePassword = ({ user }) => {\n\n    const modalRef = useRef();\n    \n    function handleCancel() {\n        modalRef.current.handleCancel()\n    }\n\n    function handleOpen() {\n        modalRef.current.handleOpen()\n    }\n\n    return (\n        <>\n            <FormModal ref={modalRef}>\n                <PasswordForm closeModal={handleCancel} user={user} />\n            </FormModal>\n            <Button\n                onClick={() => handleOpen()}\n                size='small'\n                type='text'\n                icon={<LockTwoTone />} \n            > <IntlMessage id=\"change_password\" />\n            </Button>\n        </>\n    )\n}\n\nexport default ChangePassword","import React, { forwardRef, useImperativeHandle, useState } from 'react'\nimport { Modal } from 'antd';\n\nconst FormModal = forwardRef(({ children, title, footer, formName = 'form' }, ref) => {\n    \n    const [isModalVisible, setIsModalVisible] = useState(false);\n\n    useImperativeHandle(ref, () => ({\n        handleOpen() {\n            setIsModalVisible(true);\n        },\n        handleCancel () {\n            setIsModalVisible(false);\n        }\n    }));\n    \n    return (\n        <Modal \n            width={1000}\n            title={title} \n            visible={isModalVisible}\n            onCancel={ref.current?.handleCancel}\n            okText=\"Хадгалах\"\n            footer={footer}\n            cancelText=\"Болих\"\n            okButtonProps={{form:formName, key: 'submit', htmlType: 'submit'}}\n        >\n            {children}\n        </Modal>\n    )\n});\n\nexport default FormModal;\n","import { gql } from \"@apollo/client\";\n\nexport const ALL_DEGREES = gql`\n  \tquery allDegrees {\n        allDegrees {\n            id\n            name\n        }\n\t}\n`;\n\nexport const CREATE_DEGREE = gql `\n    mutation createDegree($name: String) {\n      createDegree(name: $name) {\n        degree {\n          id\n          name\n        }\n      }\n    }\n`;\n\nexport const UPDATE_DEGREE  = gql `\n    mutation updateDegree ($id: ID, $name: String) {\n        updateDegree (id: $id, name: $name) {\n            degree {\n                id\n                name\n            }\n        }\n    }\n`;\n\nexport const DELETE_DEGREE = gql `\n    mutation deleteDegree($id: ID!){\n        deleteDegree(id: $id){\n            degree{\n                name\n            }\n        }\n    }\n`;\n\nexport const ALL_ACTIVITY = gql`\n  \tquery allActivitys {\n        allActivitys {\n            id\n            name\n        }\n\t}\n`;\n\nexport const CREATE_ACTIVITY = gql `\n    mutation createActivity($name: String) {\n      createActivity(name: $name) {\n        activity {\n          id\n          name\n        }\n      }\n    }\n`;\n\nexport const UPDATE_ACTIVITY  = gql `\n    mutation updateActivity ($id: ID, $name: String) {\n        updateActivity (id: $id, name: $name) {\n            activity {\n                name\n            }\n        }\n    }\n`;\n\nexport const DELETE_ACTIVITY = gql `\n    mutation deleteActivity($id: ID!){\n        deleteActivity(id: $id){\n            activity{\n                name\n            }\n        }\n    }\n`;\n\nexport const ALL_STUDENT_STATUS = gql `\n    query allStudentStatuss {\n        allStudentStatuss {\n            id\n            name\n        }\n    }\n`;\n\nexport const CREATE_STUDENT_STATUS = gql `\n    mutation createStudentStatus($name: String) {\n        createStudentStatus(name: $name) {\n            studentStatus {\n                id\n                name\n            }\n        }\n    }\n`;\n\nexport const UPDATE_STUDENT_STATUS = gql `\n    mutation updateStudentStatus ($id: ID, $name: String) {\n        updateStudentStatus (id: $id, name: $name) {\n            studentStatus {\n                id\n                name\n            }\n        }\n    }\n`;\n\nexport const DELETE_STUDENET_STATUS = gql `\n    mutation deleteStudentStatus ($id: ID) {\n        deleteStudentStatus (id: $id) {\n            studentStatus {\n                name\n            }\n        }\n    }\n`;\n\nexport const ALL_STUDENT_STATUS_EXTRA = gql `\n    query allStudentStatusExtras {\n        allStudentStatusExtras {\n            id\n            name\n        }\n    }\n`;\n\nexport const CREATE_STUDENT_STATUS_EXTRA = gql `\n    mutation createStudentStatusExtra($name: String) {\n        createStudentStatusExtra(name: $name) {\n            studentStatusExtra {\n                id\n                name\n            }\n        }\n    }\n`;\n\nexport const UPDATE_STUDENT_STATUS_EXTRA = gql `\n    mutation updateStudentStatusExtra ($id: ID, $name: String) {\n        updateStudentStatusExtra (id: $id, name: $name) {\n            studentStatusExtra {\n                id\n                name\n            }\n        }\n    }\n`;\n\nexport const DELETE_STUDENET_STATUS_EXTRA = gql `\n    mutation deleteStudentStatusExtra ($id: ID) {\n        deleteStudentStatusExtra (id: $id) {\n            studentStatusExtra {\n                name\n            }\n        }\n    }\n`;\n\n\nexport const ALL_TEACHER_STATUS = gql `\n    query allTeacherStatuss {\n        allTeacherStatuss {\n            id\n            name\n        }\n    }\n`;\n\nexport const CREATE_TEACHER_STATUS = gql `\n    mutation createTeacherStatus($name: String) {\n        createTeacherStatus(name: $name) {\n            teacherStatus {\n                id\n                name\n            }\n        }\n    }\n`;\n\nexport const UPDATE_TEACHER_STATUS = gql `\n    mutation updateTeacherStatus ($id: ID, $name: String) {\n        updateTeacherStatus (id: $id, name: $name) {\n            teacherStatus {\n                id\n                name\n            }\n        }\n    }\n`;\n\nexport const DELETE_STEACHER_STATUS = gql `\n    mutation deleteTeacherStatus ($id: ID) {\n        deleteTeacherStatus (id: $id) {\n            teacherStatus {\n                name\n            }\n        }\n    }\n`;\n\nexport const ALL_CLASSTIME = gql `\n    query allClasstimes {\n        allClasstimes {\n            id\n            name\n        }\n    }\n`;\n\nexport const CREATE_CLASSTIME = gql `\n    mutation createClasstime($name: String) {\n        createClasstime(name: $name) {\n            classtime {\n                id\n                name\n            }\n        }\n    }\n`;\n\nexport const UPDATE_CLASSTIME = gql `\n    mutation updateClasstime ($id: ID, $name: String) {\n        updateClasstime (id: $id, name: $name) {\n            classtime {\n                id\n                name\n            }\n        }\n    }\n`;\n\nexport const DELETE_SCLASSTIME = gql `\n    mutation deleteClasstime ($id: ID) {\n        deleteClasstime (id: $id) {\n            classtime {\n                name\n            }\n        }\n    }\n`;\n\nexport const CREATE_ROUTINE = gql `\n    mutation createRoutine ($classes: Int, $endDate: Date, $program: Int, $room: String, $schoolyear: Int, $section: Int, $startDate: Date, \n                            $subject: Int, $teacher: Int, $time: String, $type: String, $weekly: Int) {\n        createRoutine (classes: $classes, endDate: $endDate, program: $program, room: $room, schoolyear: $schoolyear, section: $section, \n                        startDate: $startDate, subject: $subject, teacher: $teacher, time: $time, type: $type, weekly: $weekly) {\n            routine {\n                id\n            }\n        }\n    }\n`;\n\nexport const ALL_MENUS = gql `\n    query allMenus{\n        allMenus {\n            priority\n            key\n            path\n            title\n            icon\n            breadcrumb\n            subMenu\n            menuSet {\n                priority\n                key\n                path\n                title\n                icon\n                breadcrumb\n                subMenu\n            }\n        }\n    }\n`; \n\nexport const UPDATE_MENU = gql `\n    mutation updateMenu($breadcrumb: Boolean, $icon: String, $id: ID, $priority: Int, $status: String, $submenu: Int) {\n        updateMenu (breadcrumb: $breadcrumb, icon: $icon, id: $id, priority: $priority, status: $status, submenu: $submenu) {\n            menu {\n                id\n            }\n        }\n    }\n`;\n\nexport const ALL_SCHOOLYEAR = gql `\n    query allSchoolyears {\n        allSchoolyears {\n            id\n            schoolyear\n            startDate\n            endDate\n            isCurrent\n        }\n    }\n`;\n\nexport const CREATE_SCHOOLYEAR = gql `\n    mutation createSchoolyear ($endDate: String, $schoolyear: String, $startDate: String, $isCurrent: Boolean) {\n        createSchoolyear (endDate: $endDate, schoolyear: $schoolyear, startDate: $startDate, isCurrent: $isCurrent) {\n            schoolyear {\n                schoolyear\n            }\n        }\n    }\n`;\n\nexport const UPDATE_SCHOOLYEAR = gql `\n    mutation updateSchoolyear ($endDate: String, $id: ID, $schoolyear: String, $startDate: String, $isCurrent: Boolean) {\n        updateSchoolyear (endDate: $endDate, id: $id, schoolyear: $schoolyear, startDate: $startDate, isCurrent: $isCurrent) {\n            schoolyear {\n                schoolyear\n            }\n        }\n    }\n`;\n\nexport const DELETE_SCHOOLYEAR = gql `\n    mutation deleteSchoolyear ($id: ID) {\n        deleteSchoolyear (id: $id) {\n            schoolyear {\n                schoolyear\n            }\n        }\n    }\n`;","import { gql } from '@apollo/client';\n\nexport const CREATE_SCHOOL = gql`\n    mutation createSchool($name: String, $nameMgl: String) {\n      createSchool(name: $name, nameMgl: $nameMgl) {\n        school {\n          id\n          name\n          nameMgl\n        }\n      }\n    }\n`;\n\nexport const CREATE_SUB_SCHOOL = gql`\n    mutation createSubSchool($name: String, $nameMgl: String, $school: Int!){\n      createSubSchool(name: $name, nameMgl: $nameMgl, school: $school) {\n        subSchool {\n          id\n          name\n          nameMgl \n          school {\n            id\n          }\n        }\n      }\n    }\n`;\n\nexport const REGISTER = gql`\n    mutation register($email: String!, $username: String!, $isTeacher: Boolean!, $isStudent: Boolean!, $password1: String!, $password2: String!){\n      register(email: $email, username: $username, isTeacher: $isTeacher, isStudent: $isStudent, password1: $password1, password2: $password2) {\n          success\n          errors\n          token\n      } \n    }\n\n`;\n\nexport const CREATE_TEACHER = gql`\n    mutation createTeacher($address: String, $birthCity: Int, $birthDistrict: Int, $birthdate: String, $degree: Int,\n                            $familyName: String, $joinBefore: String, $joinDate: String, $name: String, $phone: String, $phone2: String,\n                            $registerNo: String, $school: Int, $sex: String, $status: Int, $subSchool: Int, $teacherCode: String!,\n                            $username: String!, $password: String!, $email: String!, $access: String!\n                            # $user: Int\n                            ) {\n      createTeacher(address: $address, birthCity: $birthCity, birthDistrict: $birthDistrict, birthdate: $birthdate, degree: $degree,\n                             familyName: $familyName, joinBefore: $joinBefore, joinDate: $joinDate, name: $name, phone: $phone, phone2: $phone2, \n                            registerNo: $registerNo, school: $school, sex: $sex, status: $status, subSchool: $subSchool, \n                            teacherCode: $teacherCode, access: $access,\n                            username: $username, password: $password, email: $email\n                            # user: $user \n                            ) {\n        teacher {\n          id\n        }\n      }\n    }\n`;\n\nexport const CREATE_EMPLOYEE = gql`\n    mutation createEmployee(\n                $address: String\n                $birthCity: Int\n                $birthDistrict: Int\n                $birthdate: String\n                $email: String!\n                $employeeCode: String!\n                $familyName: String\n                $group: Int\n                $name: String\n                $password: String!\n                $phone: String\n                $phone2: String\n                $photo: Upload\n                $registerNo: String\n                $sex: String\n                $status: Int\n                $compartment: Int\n                $username: String!\n              ) {\n      createEmployee(\n                address: $address\n                birthCity: $birthCity\n                birthDistrict: $birthDistrict\n                birthdate: $birthdate\n                email: $email\n                employeeCode: $employeeCode\n                familyName: $familyName\n                group: $group\n                name: $name\n                password: $password\n                phone: $phone\n                phone2: $phone2\n                photo: $photo\n                compartment: $compartment\n                registerNo: $registerNo\n                sex: $sex\n                status: $status\n                username: $username\n          ) {\n          employee {\n          id\n        }\n      }\n    }\n`;\n\nexport const CREATE_STUDENT = gql`\n    mutation createStudent(\n      $activity: Int\n      $address: String\n      $allergies: String\n      $birthCity: Int\n      $birthDistrict: Int\n      $birthdate: String\n      $bloodType: String\n      $bodyIndex: String\n      $classes: Int\n      $classtime: Int\n      $drug: String\n      $etc: String\n      $familyName: String\n      $joinDate: String\n      $joinSchoolyear: String\n      $name: String\n      $nationality: String\n      $phone: String\n      $program: Int\n      $registerNo: String\n      $religion: String\n      $school: Int\n      $section: Int\n      $sex: String\n      $state: String\n      $status: Int\n      $statusExtra: Int\n      $surname: String\n      $underlyingDisease: String\n      $vaccine: String\n    ) {\n      createStudent(\n        activity: $activity\n        address: $address\n        allergies: $allergies\n        birthCity: $birthCity\n        birthDistrict: $birthDistrict\n        birthdate: $birthdate\n        bloodType: $bloodType\n        bodyIndex: $bodyIndex\n        classes: $classes\n        classtime: $classtime\n        drug: $drug\n        email: \"dummy@dummy.com\"\n        etc: $etc\n        familyName: $familyName\n        joinDate: $joinDate\n        joinSchoolyear: $joinSchoolyear\n        name: $name\n        nationality: $nationality\n        phone: $phone\n        program: $program\n        registerNo: $registerNo\n        religion: $religion\n        school: $school\n        section: $section\n        sex: $sex\n        state: $state\n        status: $status\n        statusExtra: $statusExtra\n        surname: $surname\n        underlyingDisease: $underlyingDisease\n        vaccine: $vaccine\n      ) {\n        student {\n          id\n        }\n      }\n    }\n`;\n\nexport const CREATE_SECTION = gql`\n  mutation createSection($classes: Int, $maxStudentNum: Int, $program: Int, $teacher: Int,  $school: Int, $section: String, $subSchool: Int) {\n    createSection(classes: $classes, program: $program, school: $school, section: $section, subSchool: $subSchool, maxStudentNum: $maxStudentNum, teacher: $teacher) {\n      section {\n        section\n      }\n    }\n  }\n`\nexport const CREATE_CLASSES = gql`\n  mutation createClasses($activity: Int, $classes: String,\n                          $program: Int, $school: Int, $status: String, $subSchool: Int) {\n    createClasses(activity: $activity, classes: $classes,\n                  program: $program, school: $school, status: $status, subSchool: $subSchool) {\n      classes {\n        classes\n      }\n    }\n  }\n`\nexport const CREATE_PROGRAM = gql`\n    mutation createProgram($program: String, $programMgl: String,  \n                           $status: String, $maxStudentNum: Int, $school: Int, $subSchool: Int) {\n      createProgram(program: $program, programMgl: $programMgl,  \n                    status: $status, maxStudentNum: $maxStudentNum, school: $school, subSchool: $subSchool) {\n        program {\n          id\n        }\n      }\n    }\n`;\n\nexport const CREATE_SUBJECT = gql`\n  mutation createSubject($credit: String, $subject: String, $content: String, $school: Int, $subSchool: Int) {\n    createSubject(credit: $credit, subject: $subject, school: $school, content: $content, subSchool: $subSchool) {\n      subject {\n        credit\n      }\n    }\n  }\n`\nexport const CREATE_PROGRAM_SUBJECT = gql`\n  mutation createProgramSubject($program: Int, $subject: Int) {\n    createProgramSubject(program: $program, subject: $subject) {\n      programSubjectType {\n        id\n      }\n    }\n  }\n`;\n\nexport const CREATE_ROUTINE_STUDENT = gql`\n  mutation createRoutineStudent ($routine: Int, $studentCode: String, $section: Int) {\n    createRoutineStudent (routine: $routine, studentCode: $studentCode, section: $section) {\n      routineStudent {\n        id\n      }\n    }\n  }\n`\n\nexport const CREATE_PARENT = gql`\n    mutation createParent ($address: String, $familyName: String, $name: String, $phone: String, $profession: String, $student: Int) {\n        createParent (address: $address, familyName: $familyName, name: $name, phone: $phone, profession: $profession, student: $student) {\n            parent {\n                name\n            }\n        }\n    }\n`;\n\nexport const CREATE_EVENT_TYPE = gql`\n    mutation createEventType ($color: String, $name: String) {\n        createEventType (color: $color, name: $name) {\n            eventType {\n                name\n            }\n        }\n    }\n`;\n\nexport const CREATE_EVENT = gql`\n    mutation createEvent ($content: String, $description: String, $endAt: String, $eventType: Int, $startAt: String, $title: String) {\n        createEvent (content: $content, description: $description, endAt: $endAt, eventType: $eventType, startAt: $startAt, title: $title) {\n            event {\n                title\n            }\n        }\n    }\n`;","import { gql } from '@apollo/client'\n\nexport const DELETE_CITY = gql `\n    mutation deleteCity($id: ID!){\n        deleteCity(id: $id){\n            city{\n              name\n              code\n            }\n        }\n    }\n`\n\nexport const DELETE_USER = gql `\n    mutation deleteAccount($username: String) {\n        deleteAccount(username: $username) {\n            account {\n                username\n            }\n        }\n    }\n`\n\nexport const DELETE_TEACHER = gql `\n    mutation deleteTeacher($id: ID!){\n      deleteTeacher(id: $id){\n            teacher{\n              name\n            }\n        }\n    }\n`;\n\nexport const DELETE_EMPLOYEES = gql `\n  mutation deleteEmployee($id: ID){\n    deleteEmployee(id: $id){\n      employee{\n        name\n      }\n    }\n  }\n  `;\n\nexport const DELETE_SUBJECT = gql `\n  mutation deleteSubject ($id: ID) {\n    deleteSubject (id: $id) {\n      subject {\n        credit\n      }\n    }\n  }\n`\n\nexport const DELETE_STUDENT = gql `\n    mutation deleteStudent($id: ID!){\n      deleteStudent(id: $id){\n            student{\n              surname\n            }\n        }\n    }\n`\n\nexport const DELETE_SUB_SCHOOL = gql `\n  mutation deleteSubSchool($id: ID){\n    deleteSubSchool(id: $id){\n      subSchool{\n        name\n      }\n    }\n}\n`\n\nexport const DELETE_SCHOOL = gql `\n  mutation deleteSchool($id: ID!){\n    deleteSchool(id: $id){\n      school{\n        name\n      }\n    }\n}\n`\n\nexport const DELETE_SECTION = gql `\n  mutation deleteSection($id: ID){\n    deleteSection(id: $id){\n      section{\n        section\n      }\n    }\n}\n`\n\nexport const DELETE_CLASS = gql `\n  mutation deleteClasses($id: ID!){\n    deleteClasses(id: $id){\n      classes{\n        classes\n      }\n    }\n}\n`\n\nexport const DELETE_PROGRAM = gql `\n    mutation deleteProgram($id: ID!){\n        deleteProgram(id: $id){\n            program{\n                program\n            }\n        }\n    }\n`;\n\nexport const DELETE_ROUTINE = gql `\n    mutation deleteRoutine ($id: ID) {\n        deleteRoutine (id: $id) {\n            routine {\n                createdAt\n            }\n        }\n    }\n`;\n\nexport const DELETE_PARENT = gql `\n    mutation deleteParent ($id: ID) {\n        deleteParent (id: $id) {\n            parent {\n                name\n            }\n        }\n    }\n`;\n\nexport const DELETE_EVENT_TYPE = gql `\n    mutation deleteEventType ($id: ID) {\n        deleteEventType (id: $id) {\n            eventType {\n                name\n            }\n        }\n    }\n`;\n\nexport const DELETE_EVENT = gql`\n    mutation deleteEvent ($id: ID) {\n        deleteEvent (id: $id) {\n            event {\n                title\n            }\n        }\n    }\n`;\n"],"names":["user","closeModal","useMutation","CHANGE_USER_PASSWORD","onCompleted","data","message","updatePassword","loading","spinning","layout","name","onFinish","values","id","variables","label","IntlMessage","rules","required","modalRef","useRef","FormModal","ref","current","handleCancel","onClick","handleOpen","size","type","icon","LockTwoTone","forwardRef","children","title","footer","formName","useState","isModalVisible","setIsModalVisible","useImperativeHandle","width","visible","onCancel","okText","cancelText","okButtonProps","form","key","htmlType","ALL_DEGREES","gql","CREATE_DEGREE","UPDATE_DEGREE","DELETE_DEGREE","ALL_ACTIVITY","CREATE_ACTIVITY","UPDATE_ACTIVITY","DELETE_ACTIVITY","ALL_STUDENT_STATUS","CREATE_STUDENT_STATUS","UPDATE_STUDENT_STATUS","DELETE_STUDENET_STATUS","ALL_STUDENT_STATUS_EXTRA","CREATE_STUDENT_STATUS_EXTRA","UPDATE_STUDENT_STATUS_EXTRA","DELETE_STUDENET_STATUS_EXTRA","ALL_TEACHER_STATUS","CREATE_TEACHER_STATUS","UPDATE_TEACHER_STATUS","DELETE_STEACHER_STATUS","ALL_CLASSTIME","CREATE_CLASSTIME","UPDATE_CLASSTIME","DELETE_SCLASSTIME","ALL_SCHOOLYEAR","CREATE_SCHOOLYEAR","UPDATE_SCHOOLYEAR","DELETE_SCHOOLYEAR","CREATE_SCHOOL","CREATE_SUB_SCHOOL","CREATE_TEACHER","CREATE_EMPLOYEE","CREATE_STUDENT","CREATE_SECTION","CREATE_CLASSES","CREATE_PROGRAM","CREATE_SUBJECT","CREATE_PARENT","CREATE_EVENT_TYPE","CREATE_EVENT","DELETE_TEACHER","DELETE_EMPLOYEES","DELETE_SUBJECT","DELETE_STUDENT","DELETE_SUB_SCHOOL","DELETE_SCHOOL","DELETE_SECTION","DELETE_CLASS","DELETE_PROGRAM","DELETE_PARENT","DELETE_EVENT_TYPE","DELETE_EVENT"],"sourceRoot":""}