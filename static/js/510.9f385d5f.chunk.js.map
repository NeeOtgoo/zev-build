{"version":3,"file":"static/js/510.9f385d5f.chunk.js","mappings":"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","sources":["components/shared-components/Flex/index.js","graphql/create.js","graphql/delete.js","graphql/select.js","views/app-views/section/form.js","views/app-views/section/table.js","views/app-views/section/index.js"],"sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\n\nconst Flex = props => {\n\tconst { children, className, alignItems, justifyContent, mobileFlex, flexDirection } = props\n\tconst getFlexResponsive = () => mobileFlex ? 'd-flex' : 'd-md-flex'\n\treturn (\n\t\t<div className={`${getFlexResponsive()} ${className} ${flexDirection?('flex-' + flexDirection): ''} ${alignItems?('align-items-' + alignItems):''} ${justifyContent?('justify-content-' + justifyContent):''}` }>\n\t\t\t{children}\n\t\t</div>\n\t)\n}\n\nFlex.propTypes = {\n\tclassName: PropTypes.string,\n\talignItems: PropTypes.string,\n\tflexDirection: PropTypes.string,\n\tjustifyContent: PropTypes.string,\n\tmobileFlex: PropTypes.bool\n}\n\nFlex.defaultProps = {\n\tmobileFlex: true,\n\tflexDirection: 'row',\n\tclassName: ''\n};\n\n\nexport default Flex\n","import { gql } from '@apollo/client';\n\nexport const CREATE_SCHOOL = gql`\n    mutation createSchool($name: String, $nameMgl: String) {\n      createSchool(name: $name, nameMgl: $nameMgl) {\n        school {\n          id\n          name\n          nameMgl\n        }\n      }\n    }\n`;\n\nexport const CREATE_SUB_SCHOOL = gql`\n    mutation createSubSchool($name: String, $nameMgl: String, $school: Int!){\n      createSubSchool(name: $name, nameMgl: $nameMgl, school: $school) {\n        subSchool {\n          id\n          name\n          nameMgl \n          school {\n            id\n          }\n        }\n      }\n    }\n`;\n\nexport const REGISTER = gql`\n    mutation register($email: String!, $username: String!, $isTeacher: Boolean!, $isStudent: Boolean!, $password1: String!, $password2: String!){\n      register(email: $email, username: $username, isTeacher: $isTeacher, isStudent: $isStudent, password1: $password1, password2: $password2) {\n          success\n          errors\n          token\n      } \n    }\n\n`;\n\nexport const CREATE_TEACHER = gql`\n    mutation createTeacher($address: String, $birthCity: Int, $birthDistrict: Int, $birthdate: String, $degree: Int,\n                            $familyName: String, $joinBefore: String, $joinDate: String, $name: String, $phone: String, $phone2: String,\n                            $registerNo: String, $school: Int, $sex: String, $status: Int, $subSchool: Int, $teacherCode: String!,\n                            $username: String!, $password: String!, $email: String!, $access: String!\n                            # $user: Int\n                            ) {\n      createTeacher(address: $address, birthCity: $birthCity, birthDistrict: $birthDistrict, birthdate: $birthdate, degree: $degree,\n                             familyName: $familyName, joinBefore: $joinBefore, joinDate: $joinDate, name: $name, phone: $phone, phone2: $phone2, \n                            registerNo: $registerNo, school: $school, sex: $sex, status: $status, subSchool: $subSchool, \n                            teacherCode: $teacherCode, access: $access,\n                            username: $username, password: $password, email: $email\n                            # user: $user \n                            ) {\n        teacher {\n          id\n        }\n      }\n    }\n`;\n\nexport const CREATE_EMPLOYEE = gql`\n    mutation createEmployee(\n                $address: String\n                $birthCity: Int\n                $birthDistrict: Int\n                $birthdate: String\n                $email: String!\n                $employeeCode: String!\n                $familyName: String\n                $group: Int\n                $name: String\n                $password: String!\n                $phone: String\n                $phone2: String\n                $photo: Upload\n                $registerNo: String\n                $sex: String\n                $status: Int\n                $compartment: Int\n                $username: String!\n              ) {\n      createEmployee(\n                address: $address\n                birthCity: $birthCity\n                birthDistrict: $birthDistrict\n                birthdate: $birthdate\n                email: $email\n                employeeCode: $employeeCode\n                familyName: $familyName\n                group: $group\n                name: $name\n                password: $password\n                phone: $phone\n                phone2: $phone2\n                photo: $photo\n                compartment: $compartment\n                registerNo: $registerNo\n                sex: $sex\n                status: $status\n                username: $username\n          ) {\n          employee {\n          id\n        }\n      }\n    }\n`;\n\nexport const CREATE_STUDENT = gql`\n    mutation createStudent(\n      $activity: Int\n      $address: String\n      $allergies: String\n      $birthCity: Int\n      $birthDistrict: Int\n      $birthdate: String\n      $bloodType: String\n      $bodyIndex: String\n      $classes: Int\n      $classtime: Int\n      $drug: String\n      $etc: String\n      $familyName: String\n      $joinDate: String\n      $joinSchoolyear: String\n      $name: String\n      $nationality: String\n      $phone: String\n      $program: Int\n      $registerNo: String\n      $religion: String\n      $school: Int\n      $section: Int\n      $sex: String\n      $state: String\n      $status: Int\n      $statusExtra: Int\n      $surname: String\n      $underlyingDisease: String\n      $vaccine: String\n    ) {\n      createStudent(\n        activity: $activity\n        address: $address\n        allergies: $allergies\n        birthCity: $birthCity\n        birthDistrict: $birthDistrict\n        birthdate: $birthdate\n        bloodType: $bloodType\n        bodyIndex: $bodyIndex\n        classes: $classes\n        classtime: $classtime\n        drug: $drug\n        email: \"dummy@dummy.com\"\n        etc: $etc\n        familyName: $familyName\n        joinDate: $joinDate\n        joinSchoolyear: $joinSchoolyear\n        name: $name\n        nationality: $nationality\n        phone: $phone\n        program: $program\n        registerNo: $registerNo\n        religion: $religion\n        school: $school\n        section: $section\n        sex: $sex\n        state: $state\n        status: $status\n        statusExtra: $statusExtra\n        surname: $surname\n        underlyingDisease: $underlyingDisease\n        vaccine: $vaccine\n      ) {\n        student {\n          id\n        }\n      }\n    }\n`;\n\nexport const CREATE_SECTION = gql`\n  mutation createSection($classes: Int, $maxStudentNum: Int, $program: Int, $teacher: Int,  $school: Int, $section: String, $subSchool: Int) {\n    createSection(classes: $classes, program: $program, school: $school, section: $section, subSchool: $subSchool, maxStudentNum: $maxStudentNum, teacher: $teacher) {\n      section {\n        section\n      }\n    }\n  }\n`\nexport const CREATE_CLASSES = gql`\n  mutation createClasses($activity: Int, $classes: String,\n                          $program: Int, $school: Int, $status: String, $subSchool: Int) {\n    createClasses(activity: $activity, classes: $classes,\n                  program: $program, school: $school, status: $status, subSchool: $subSchool) {\n      classes {\n        classes\n      }\n    }\n  }\n`\nexport const CREATE_PROGRAM = gql`\n    mutation createProgram($program: String, $programMgl: String,  \n                           $status: String, $maxStudentNum: Int, $school: Int, $subSchool: Int) {\n      createProgram(program: $program, programMgl: $programMgl,  \n                    status: $status, maxStudentNum: $maxStudentNum, school: $school, subSchool: $subSchool) {\n        program {\n          id\n        }\n      }\n    }\n`;\n\nexport const CREATE_SUBJECT = gql`\n  mutation createSubject($credit: String, $subject: String, $content: String, $school: Int, $subSchool: Int) {\n    createSubject(credit: $credit, subject: $subject, school: $school, content: $content, subSchool: $subSchool) {\n      subject {\n        credit\n      }\n    }\n  }\n`\nexport const CREATE_PROGRAM_SUBJECT = gql`\n  mutation createProgramSubject($program: Int, $subject: Int) {\n    createProgramSubject(program: $program, subject: $subject) {\n      programSubjectType {\n        id\n      }\n    }\n  }\n`;\n\nexport const CREATE_ROUTINE_STUDENT = gql`\n  mutation createRoutineStudent ($routine: Int, $studentCode: String, $section: Int) {\n    createRoutineStudent (routine: $routine, studentCode: $studentCode, section: $section) {\n      routineStudent {\n        id\n      }\n    }\n  }\n`\n\nexport const CREATE_PARENT = gql`\n    mutation createParent ($address: String, $familyName: String, $name: String, $phone: String, $profession: String, $student: Int) {\n        createParent (address: $address, familyName: $familyName, name: $name, phone: $phone, profession: $profession, student: $student) {\n            parent {\n                name\n            }\n        }\n    }\n`;\n\nexport const CREATE_EVENT_TYPE = gql`\n    mutation createEventType ($color: String, $name: String) {\n        createEventType (color: $color, name: $name) {\n            eventType {\n                name\n            }\n        }\n    }\n`;\n\nexport const CREATE_EVENT = gql`\n    mutation createEvent ($content: String, $description: String, $endAt: String, $eventType: Int, $startAt: String, $title: String) {\n        createEvent (content: $content, description: $description, endAt: $endAt, eventType: $eventType, startAt: $startAt, title: $title) {\n            event {\n                title\n            }\n        }\n    }\n`;","import { gql } from '@apollo/client'\n\nexport const DELETE_CITY = gql `\n    mutation deleteCity($id: ID!){\n        deleteCity(id: $id){\n            city{\n              name\n              code\n            }\n        }\n    }\n`\n\nexport const DELETE_USER = gql `\n    mutation deleteAccount($username: String) {\n        deleteAccount(username: $username) {\n            account {\n                username\n            }\n        }\n    }\n`\n\nexport const DELETE_TEACHER = gql `\n    mutation deleteTeacher($id: ID!){\n      deleteTeacher(id: $id){\n            teacher{\n              name\n            }\n        }\n    }\n`;\n\nexport const DELETE_EMPLOYEES = gql `\n  mutation deleteEmployee($id: ID){\n    deleteEmployee(id: $id){\n      employee{\n        name\n      }\n    }\n  }\n  `;\n\nexport const DELETE_SUBJECT = gql `\n  mutation deleteSubject ($id: ID) {\n    deleteSubject (id: $id) {\n      subject {\n        credit\n      }\n    }\n  }\n`\n\nexport const DELETE_STUDENT = gql `\n    mutation deleteStudent($id: ID!){\n      deleteStudent(id: $id){\n            student{\n              surname\n            }\n        }\n    }\n`\n\nexport const DELETE_SUB_SCHOOL = gql `\n  mutation deleteSubSchool($id: ID){\n    deleteSubSchool(id: $id){\n      subSchool{\n        name\n      }\n    }\n}\n`\n\nexport const DELETE_SCHOOL = gql `\n  mutation deleteSchool($id: ID!){\n    deleteSchool(id: $id){\n      school{\n        name\n      }\n    }\n}\n`\n\nexport const DELETE_SECTION = gql `\n  mutation deleteSection($id: ID){\n    deleteSection(id: $id){\n      section{\n        section\n      }\n    }\n}\n`\n\nexport const DELETE_CLASS = gql `\n  mutation deleteClasses($id: ID!){\n    deleteClasses(id: $id){\n      classes{\n        classes\n      }\n    }\n}\n`\n\nexport const DELETE_PROGRAM = gql `\n    mutation deleteProgram($id: ID!){\n        deleteProgram(id: $id){\n            program{\n                program\n            }\n        }\n    }\n`;\n\nexport const DELETE_ROUTINE = gql `\n    mutation deleteRoutine ($id: ID) {\n        deleteRoutine (id: $id) {\n            routine {\n                createdAt\n            }\n        }\n    }\n`;\n\nexport const DELETE_PARENT = gql `\n    mutation deleteParent ($id: ID) {\n        deleteParent (id: $id) {\n            parent {\n                name\n            }\n        }\n    }\n`;\n\nexport const DELETE_EVENT_TYPE = gql `\n    mutation deleteEventType ($id: ID) {\n        deleteEventType (id: $id) {\n            eventType {\n                name\n            }\n        }\n    }\n`;\n\nexport const DELETE_EVENT = gql`\n    mutation deleteEvent ($id: ID) {\n        deleteEvent (id: $id) {\n            event {\n                title\n            }\n        }\n    }\n`;\n","import { gql } from '@apollo/client';\n\nexport const SELECT_STUDENT = gql`\n    query allStudents ($filter: String) {\n        allStudents (filter: $filter) {\n            id\n            familyName\n            name\n            studentCode\n        }\n\t}\n`;\n\nexport const SELECT_TEACHER = gql`\n    query allTeachers ($filter: String) {\n        allTeachers (filter: $filter) {\n            id\n            familyName\n            name\n            teacherCode\n        }\n    }\n`;\n\n// export const SELECT_SECTION_TEACHER = gql `\n//     query allAssistantTeachers ($filter: String) {\n//         allAssistantTeachers (filter: $filter) {\n//             id\n//             familyName\n//             name \n//             teacherCode\n//         }\n//     }\n// `\n\nexport const SELECT_CLASSES = gql`\n    query allClassess ($filter: String, $program: Int) {\n        allClassess (filter: $filter, program: $program) {\n            id\n            classes\n        }\n\t}\n`;\n\nexport const SELECT_SUBJECT = gql `\n    query allSubjects ($offset: Int!, $limit: Int!, $filter: String) {\n        count (appName: \"subject\", modelName: \"Subject\", filter: $filter) {\n            count\n        }\n        allSubjects (offset: $offset, limit: $limit, filter: $filter) {\n            id\n            subject \n            content\n        }\n    }\n`;\n\nexport const SELECT_PROGRAM = gql`\n    query selectProgram {\n        allPrograms {\n            id\n            program\n        }\n    }\n`;\n\nexport const SECTIONS_BY_PROGRAM = gql`\n    query sectionsByProgram ($program: Int!) {\n        sectionsByProgram (program: $program) {\n            id\n            section \n            classes {\n                classes\n            }\n        }\n    }\n`;\n\nexport const SELECT_SECTION = gql `\n    query sectionsByClasses ($classes: Int!){\n        sectionsByClasses (classes: $classes) {\n            id \n            section\n        }\n    }\n`","import React, { useEffect, useState } from 'react';\nimport { Form, Input, message, Spin, Select, Empty } from 'antd';\nimport { useMutation, useLazyQuery } from '@apollo/client';\nimport { SECTION_BY_CLASSES } from 'graphql/all';\nimport { CREATE_SECTION } from 'graphql/create'\nimport { UPDATE_SECTION } from 'graphql/update'\nimport IntlMessage from 'components/util-components/IntlMessage';\nimport { SELECT_TEACHER } from 'graphql/select';\nimport Loading from 'components/shared-components/Loading';\n\nfunction SectionForm({ editData, formType, setIsModalVisible, classData }) {\n\n    const { Option } = Select;\n\n    const [form] = Form.useForm();\n\n    const [teachers, setTeachers] = useState([]);\n\n    const [createSection, { loading }] = useMutation(CREATE_SECTION, {\n        refetchQueries: [\n            {\n                query: SECTION_BY_CLASSES,\n                variables: { classes: classData.classes }\n            }\n        ],\n        onCompleted: data => {\n            message.success('Амжилттай хадгаллаа');\n            setIsModalVisible(false);\n        }\n    });\n\n    const [fetchTeacher, { loading: loadingTeacher }] = useLazyQuery(SELECT_TEACHER, {\n        onCompleted: data => {\n            setTeachers(data.allTeachers);\n        }\n    });\n\n    const [updateSection, { loading: updateLoading }] = useMutation(UPDATE_SECTION, {\n        refetchQueries: [\n            {\n                query: SECTION_BY_CLASSES,\n                variables: { classes: classData.classes }\n            }\n        ],\n        onCompleted: data => {\n            message.success('Амжилттай хадгаллаа');\n            setIsModalVisible(false);\n        }\n    })\n\n    // end useQuery\n\n    useEffect(() => {\n        if (formType === \"edit\") {\n            form.setFieldsValue({\n                section: editData.section,\n                teacher: editData.teacher?.id,\n                maxStudentNum: editData.maxStudentNum,\n                id: editData.id,\n            });\n            fetchTeacher({ variables: { filter: editData.teacher?.name } })\n        } else if (formType === \"create\") {\n            form.resetFields();\n        }\n    }, [editData, form, formType, fetchTeacher]);\n\n\n\n    const onFinish = values => {\n        if (formType === \"edit\") {\n            values.id = editData.id;\n            const finalResult = Object.assign(values, classData);\n            updateSection({ variables: finalResult });\n        } else {\n            const finalResult = Object.assign(values, classData);\n            createSection({ variables: finalResult, });\n        }\n    };\n\n    const onTeacherSearch = value => {\n        if (value === '') {\n            setTeachers([]);\n        } else {\n            fetchTeacher({ variables: { offset: 0, limit: 99999999, filter: value } });\n        }\n    }\n\n    // const onSectionTeacherSearch = value => {\n    //     if (value === '') {\n    //         setSectionTeacher([]);\n    //     } else {\n    //         fetchsectionTeacher({ variables: { offset: 0, limit: 99999999, filter: value } });\n    //     }\n    // }\n\n\n\n    return (\n        <Spin spinning={loading || updateLoading} tip=\"Ачааллаж байна...\">\n            <Form\n                id=\"SectionForm\"\n                layout={'vertical'}\n                form={form}\n                name=\"control-hooks\"\n                onFinish={onFinish}\n            >\n                <Form.Item name=\"section\" label={<IntlMessage id=\"name\" />} rules={[\n                    {\n                        required: true,\n                        message: <IntlMessage id=\"form.required\" />\n                    },\n                ]}>\n                    <Input />\n                </Form.Item>\n                <Form.Item name=\"teacher\" label={<IntlMessage id=\"teacher\" />} rules={[\n                    {\n                        required: true,\n                        message: <IntlMessage id=\"form.required\" />\n                    },\n                ]}>\n                    <Select\n                        showSearch\n                        filterOption={false}\n                        notFoundContent={\n                            loadingTeacher ? <Loading cover='content' />\n                                : <Empty image={Empty.PRESENTED_IMAGE_SIMPLE} />\n                        }\n                        onSearch={onTeacherSearch}>\n                        {teachers.map((item, index) => (\n                            <Option value={item.id} key={index} >{item.familyName} {item.name} / {item.teacherCode} </Option>\n                        ))}\n                    </Select>\n                </Form.Item>\n                <Form.Item name=\"maxStudentNum\" label={<IntlMessage id=\"maxStudentNum\" />} rules=\n                    {[\n                        {\n                            required: true,\n                            message: <IntlMessage id=\"form.required\" />\n                        },\n                        {\n                            pattern: new RegExp(/^[0-9]+$/),\n                            message: 'Зөвхөн тоон утга оруулна'\n                        },\n                    ]}\n                >\n                    <Input />\n                </Form.Item>\n            </Form>\n        </Spin>\n    );\n};\n\nexport default SectionForm","import React, { useEffect, useState } from 'react'\nimport { Card, Table, Input, Modal, message, Button } from 'antd';\nimport { DeleteTwoTone, SearchOutlined, EditTwoTone, PlusCircleOutlined, RollbackOutlined } from '@ant-design/icons';\nimport Flex from 'components/shared-components/Flex'\nimport utils from 'utils'\nimport SectionForm from './form'\nimport { useMutation, useQuery } from '@apollo/client';\nimport { DELETE_SECTION } from 'graphql/delete';\nimport { SECTION_BY_CLASSES } from 'graphql/all';\nimport IntlMessage from 'components/util-components/IntlMessage';\nimport { useHistory } from 'react-router-dom';\n\nfunction  SectionTable (props) {\n\n    const history = useHistory();\n\n\tconst [list, setList] = useState([])\n\n    const { loading, data } = useQuery(SECTION_BY_CLASSES, {\n        variables: { classes: props.classes.id },\n    })\n\n\tconst [isModalVisible, setIsModalVisible] = useState(false);\n\tconst [editData, setEditData] = useState([]);\n\tconst [formType, setFormType] = useState([]);\n\n    const showModal = () => {\n\t\tsetFormType(\"create\");\n      setIsModalVisible(true);\n    };\n\n    const handleCancel = () => {\n      setIsModalVisible(false);\n    };\n\n\tconst editRow = row => {\n\t\tsetFormType(\"edit\");\n\t\tsetEditData(row);\n\t\tsetIsModalVisible(true);\n\t};\n\n    useEffect(() => {\n        if (loading === false && data) {\n            setList(data.sectionsByClasses)\n        }\n    }, [data, loading])\n    \n\n\tconst { confirm } = Modal;\n\n\tconst [deleteSection] = useMutation(DELETE_SECTION, {\n\t\trefetchQueries: [\n            {\n                query: SECTION_BY_CLASSES,\n                variables: { classes:  props.classes.id}\n            }\n        ],\n\t\tonCompleted: data => {\n            message.success('Амжилттай устлаа');\n\t\t}\n\t});\n\n\tfunction deleteRow(row) {\n\t\tconfirm({\n\t\t  title: 'Устгах уу?',\n\t\t  okText: 'Устгах',\n\t\t  okType: 'danger',\n\t\t  cancelText: 'Болих',\n\t\t  onOk() {\n\t\t\tdeleteSection({ variables: { id: row.id } }); \n\t\t  },\n\t\t});\n\t}\n\n\tconst tableColumns = [\n\t\t{\n\t\t\tkey: 'section',\n\t\t\ttitle: <IntlMessage id=\"section\" />,\n\t\t\tdataIndex: 'section',\n\t\t\tsorter: (a, b) => utils.antdTableSorter(a, b, 'section')\n\t\t},\n\t\t{\n\t\t\tkey: 'school',\n\t\t\ttitle: <IntlMessage id=\"school\" />,\n\t\t\tdataIndex: ['school', 'name'],\n\t\t\tsorter: (a, b) => utils.antdTableSorter(a, b, 'school')\n\t\t},\n\t\t{\n\t\t\tkey: 'subSchool',\n\t\t\ttitle: <IntlMessage id=\"sub-school\" />,\n\t\t\tdataIndex: ['subSchool', 'name'],\n\t\t\tsorter: (a, b) => utils.antdTableSorter(a, b, 'subSchool')\n\t\t},\n\t\t{\n\t\t\tkey: 'program',\n\t\t\ttitle: <IntlMessage id='program' />,\n\t\t\tdataIndex: ['program', 'program'],\n\t\t\tsorter: (a, b) => utils.antdTableSorter(a, b, 'program')\n\t\t},\n\t\t{\n\t\t\tkey: 'classes',\n\t\t\ttitle: <IntlMessage id='classes' />,\n\t\t\tdataIndex: ['classes', 'classes'],\n\t\t\tsorter: (a, b) => utils.antdTableSorter(a, b, 'classes')\n\t\t},\n\t\t{\n\t\t\tkey: 'maxStudentNum',\n            title: <IntlMessage id=\"maxStudentNum\" />,\n            dataIndex: 'maxStudentNum', \n            responsive: ['lg'],\n\t\t\tsorter: (a, b) => utils.antdTableSorter(a, b, 'maxStudentNum'),\n\t\t\t// render: text => <span>{nf.format(text)}</span>\n\t\t},\n\t\t{\n\t\t\tkey: 'teacher',\n\t\t\ttitle: <IntlMessage id=\"teacher\" />,\n\t\t\tdataIndex: ['teacher', 'name'], \n\t\t\tsorter: (a, b) => utils.antdTableSorter(a, b, 'teacher')\n\t\t},\n\t\t// {\n\t\t// \tkey: 'sectionTeacher',\n\t\t// \ttitle: <IntlMessage id=\"sectionTeacher\" />,\n\t\t// \tdataIndex: ['sectionTeacher', 'name'], \n\t\t// \tsorter: (a, b) => utils.antdTableSorter(a, b, 'sectionTeacher')\n\t\t// },\n\t];\n\n\tif (props.permissions.edit === true || props.permissions.destroy === true) {\n\t\ttableColumns.push(\n\t\t\t{\n\t\t\t\tkey: 'actions',\n\t\t\t\ttitle: <IntlMessage id='main.action' />,\n\t\t\t\twidth: '15vw',\n\t\t\t\tdataIndex: 'actions',\n\t\t\t\trender: (_, elm) => (\n\t\t\t\t\t<div className=\"text-center\">\n\t\t\t\t\t\t{ props.permissions.edit === true &&\n\t\t\t\t\t\t\t<Button size=\"small\" onClick={() => editRow(elm)} type=\"text\" icon={<EditTwoTone twoToneColor=\"#ffdb00\"/>} > <IntlMessage id='edit' /></Button>\n\t\t\t\t\t\t}\n\t\t\t\t\t\t{ props.permissions.destroy === true &&\n\t\t\t\t\t\t\t<Button size=\"small\" onClick={() => deleteRow(elm)} type=\"text\" icon={<DeleteTwoTone twoToneColor=\"#f42f2f\"/>} > <IntlMessage id='delete' /></Button>\n\t\t\t\t\t\t}\n\t\t\t\t\t</div>\n\t\t\t\t)\n\t\t\t}\n\t\t)\n\t}\n\n\tconst onSearch = e => {\n\t\tconst value = e.currentTarget.value\n\t\tconst searchArray = list\n\t\tconst datas = utils.wildCardSearch(searchArray, value)\n\t\tsetList(datas)\n\t}\n\n\treturn (\n\t\t<>\n\t\t\t<Modal \n                title= {formType === 'create' ? <IntlMessage id=\"add_new\" />  : <IntlMessage id=\"edit\" />}\n                visible={isModalVisible}\n\t\t\t\tokText={<IntlMessage id=\"main.okText\" />}\n\t\t\t\tcancelText={<IntlMessage id=\"main.cancelText\" />}\n\t\t\t\tonCancel={handleCancel}\n\t\t\t\tokButtonProps={{form:'SectionForm', key: 'submit', htmlType: 'submit'}}\n            >\n                <SectionForm\n\t\t\t\t\tformType={formType} \n\t\t\t\t\teditData={editData} \n\t\t\t\t\tsetIsModalVisible={setIsModalVisible} \n                    classData={{ \n                        school: props.classes.school.id,\n                        subSchool: props.classes.subSchool.id,\n                        program: props.classes.program.id,\n                        classes: props.classes.id\n                    }}\n                    classes={props.classes}\n\t\t\t\t/>\n            </Modal>\n            <Flex alignItems=\"center\" justifyContent=\"between\" mobileFlex={false}>\n                <Flex mobileFlex={false}>\n                    <div className='text-right' >\n                        <Button onClick={() => history.goBack()} type=\"default\" icon={<RollbackOutlined />} block> <IntlMessage id=\"back\" /></Button>\n                    </div>\n                </Flex>\n            </Flex>\n\t\t\t<Card className='mt-4'>\n\t\t\t\t<Flex alignItems=\"center\" justifyContent=\"between\" mobileFlex={false}>\n\t\t\t\t\t<Flex className=\"mb-1\" mobileFlex={false}>\n\t\t\t\t\t\t<div className=\"mr-md-3 mb-3\">\n\t\t\t\t\t\t\t<Input placeholder={'Хайх'} prefix={<SearchOutlined />} onChange={e => onSearch(e)}/>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</Flex>\n\t\t\t\t\t{ props.permissions.create === true &&\n\t\t\t\t\t\t<div className=\"mr-md-3 mb-3\">\n\t\t\t\t\t\t\t<Button onClick={showModal} type=\"primary\" icon={<PlusCircleOutlined />} block> <IntlMessage id=\"add_new\" /></Button>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t}\n\t\t\t\t</Flex>\n\t\t\t\t<div className=\"table-responsive\">\n\t\t\t\t\t<Table \n\t\t\t\t\t\tcolumns={tableColumns} \n\t\t\t\t\t\tdataSource={list}\n\t\t\t\t\t\tsize='small'\n\t\t\t\t\t\trowKey='id'\n                        loading={loading}\n\t\t\t\t\t\tbordered\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t</Card>\n\t\t</>\n\t\t\n\t)\n}\n\nexport default SectionTable\n","import React, { useState } from \"react\";\nimport SectionTable from './table';\nimport { CheckPer } from 'hooks/checkPermission';\nimport Loading from \"components/shared-components/Loading\";\nimport { useHistory } from \"react-router-dom\";\n\nconst Index = (props) => {\n\n    const history = useHistory();\n\n    const create = CheckPer('add_section');\n    const edit = CheckPer('change_section');\n    const destroy = CheckPer('delete_section');\n    \n    const [classes] = useState(props.location.state?.message);\n\n    const permissions = {\n        create: create,\n        edit: edit,\n        destroy: destroy\n    }\n\n    if (Object.values(permissions).indexOf('loading') > -1) {\n        return <Loading cover=\"content\" />\n    }\n\n    if (props.location.state === undefined) {\n        history.push('/app/home');\n        return null\n    }\n\n    return (\n        <SectionTable title={props.title} permissions={permissions} classes={classes} />\n    )\n}\n\nexport default Index;"],"names":["Flex","props","children","className","alignItems","justifyContent","mobileFlex","flexDirection","defaultProps","CREATE_SCHOOL","gql","CREATE_SUB_SCHOOL","CREATE_TEACHER","CREATE_EMPLOYEE","CREATE_STUDENT","CREATE_SECTION","CREATE_CLASSES","CREATE_PROGRAM","CREATE_SUBJECT","CREATE_PARENT","CREATE_EVENT_TYPE","CREATE_EVENT","DELETE_TEACHER","DELETE_EMPLOYEES","DELETE_SUBJECT","DELETE_STUDENT","DELETE_SUB_SCHOOL","DELETE_SCHOOL","DELETE_SECTION","DELETE_CLASS","DELETE_PROGRAM","DELETE_PARENT","DELETE_EVENT_TYPE","DELETE_EVENT","SELECT_STUDENT","SELECT_TEACHER","SELECT_CLASSES","SELECT_SUBJECT","SELECT_PROGRAM","SECTIONS_BY_PROGRAM","SELECT_SECTION","editData","formType","setIsModalVisible","classData","Option","Select","Form","form","useState","teachers","setTeachers","useMutation","refetchQueries","query","SECTION_BY_CLASSES","variables","classes","onCompleted","data","message","createSection","loading","useLazyQuery","allTeachers","fetchTeacher","loadingTeacher","UPDATE_SECTION","updateSection","updateLoading","useEffect","setFieldsValue","section","teacher","id","maxStudentNum","filter","name","resetFields","spinning","tip","layout","onFinish","values","finalResult","Object","assign","label","IntlMessage","rules","required","showSearch","filterOption","notFoundContent","Loading","cover","image","Empty","onSearch","value","offset","limit","map","item","index","familyName","teacherCode","pattern","RegExp","history","useHistory","list","setList","useQuery","isModalVisible","setEditData","setFormType","sectionsByClasses","confirm","Modal","deleteSection","tableColumns","key","title","dataIndex","sorter","a","b","utils","responsive","permissions","edit","destroy","push","width","render","_","elm","size","onClick","row","type","icon","EditTwoTone","twoToneColor","okText","okType","cancelText","onOk","DeleteTwoTone","visible","onCancel","okButtonProps","htmlType","school","subSchool","program","goBack","RollbackOutlined","block","placeholder","prefix","SearchOutlined","onChange","e","currentTarget","searchArray","datas","create","PlusCircleOutlined","columns","dataSource","rowKey","bordered","CheckPer","location","state","indexOf","undefined"],"sourceRoot":""}